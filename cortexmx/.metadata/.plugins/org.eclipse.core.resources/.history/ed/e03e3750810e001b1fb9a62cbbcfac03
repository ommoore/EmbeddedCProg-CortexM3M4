/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

/*
 * 		__Fault Handlers__
 *
 * 	What is a fault?
 * 	. The fault is an exception generated by the processor (system exception) to indicate an error.
 *
 * 	Why does a fault happen?
 * 	. Faults happen because of programmers violating the design rules of handling a processor or the interfaces with which the processor deals with.
 *  . Whenever a fault happens, internal processor registers will be updated to record the type of fault, the address of instruction at which the fault happened,
 *    and if an associated exception is enabled, the exception handler will be called by the processor.
 *  . In the exception handler programmers may implement the code to report, resolve, or recover from the fault.
 *  . For example, if your code tries to divide a number by zero, then divide by 0 fault will be raised from the hardware, which will invoke usage fault
 *    exception handler (if enabled). In the exception handler, you may make certain decisions to get rid of the problem, like closing the task, etc.
 *  . Most of the time, fault happens by programmer's code not adhering to processor programming guidelines.
 *
 *	There are 9 system exceptions implemented in the processor.
 *	Reset (highest priority), NMI, and HardFault exceptions have fixed (non-configurable) priority values.
 *	HardFault, MemManage, BusFault, UsageFault are Fault Exceptions. These should all be taken care of by the programmer.
 *
 *	Hard fault exception*   {enabled by default, non-configurable priority}  Can disable using FAULTMASK register.
 *	Usage fault exception         }
 *	Mem manage fault exception    }Disabled by default, configurable priority.
 *	Bus fault exception           }
 */


int main(void)
{

}

