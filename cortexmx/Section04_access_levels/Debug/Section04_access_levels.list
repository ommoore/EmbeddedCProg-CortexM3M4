
Section04_access_levels.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ca4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08000e68  08000e68  00010e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f40  08000f40  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08000f40  08000f40  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f40  08000f40  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f40  08000f40  00010f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f44  08000f44  00010f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08000f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000064  08000fac  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08000fac  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002388  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000688  00000000  00000000  00022416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000138  00000000  00000000  00022aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000100  00000000  00000000  00022bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b77  00000000  00000000  00022cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001421  00000000  00000000  0002584f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009794  00000000  00000000  00026c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00030404  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a7c  00000000  00000000  00030458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000e50 	.word	0x08000e50

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	08000e50 	.word	0x08000e50

08000204 <generate_interrupt>:
#include<stdio.h>
#include<stdint.h>

/* This function executes in THREAD MODE of the processor */
void generate_interrupt()
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
	//these control register addresses cannot be changed in unprivileged mode.
	//any attempt to change contents in unpriv access level will result in processor fault exception
	uint32_t *pSTIR  = (uint32_t*)0xE000EF00;
 800020a:	4b09      	ldr	r3, [pc, #36]	; (8000230 <generate_interrupt+0x2c>)
 800020c:	607b      	str	r3, [r7, #4]
	uint32_t *pISER0 = (uint32_t*)0xE000E100;
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <generate_interrupt+0x30>)
 8000210:	603b      	str	r3, [r7, #0]

	//enable IRQ3 interrupt
	*pISER0 |= ( 1 << 3);   //ISER = interrupt set-enable register
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f043 0208 	orr.w	r2, r3, #8
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	601a      	str	r2, [r3, #0]

	//generate an interrupt from software for IRQ3
	*pSTIR = (3 & 0x1FF); //STIR = Software Trigger Interrupt Register
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	2203      	movs	r2, #3
 8000222:	601a      	str	r2, [r3, #0]

}
 8000224:	bf00      	nop
 8000226:	370c      	adds	r7, #12
 8000228:	46bd      	mov	sp, r7
 800022a:	bc80      	pop	{r7}
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	e000ef00 	.word	0xe000ef00
 8000234:	e000e100 	.word	0xe000e100

08000238 <change_access_level_unpriv>:

void change_access_level_unpriv(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
	//read
	__asm volatile ("MRS R0,CONTROL");
 800023c:	f3ef 8014 	mrs	r0, CONTROL
	//modify
	__asm volatile ("ORR R0,R0,#0x01");
 8000240:	f040 0001 	orr.w	r0, r0, #1
	//write
	__asm volatile ("MSR CONTROL,R0");
 8000244:	f380 8814 	msr	CONTROL, r0
}
 8000248:	bf00      	nop
 800024a:	46bd      	mov	sp, r7
 800024c:	bc80      	pop	{r7}
 800024e:	4770      	bx	lr

08000250 <main>:


/* This function executes in THREAD MODE of the processor */
int main(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	printf("In thread mode : before interrupt\n");
 8000254:	4805      	ldr	r0, [pc, #20]	; (800026c <main+0x1c>)
 8000256:	f000 f9a5 	bl	80005a4 <puts>
	//user task should not modify system level settings of processor
	//user task should not trigger or turn off interrupts
	//before running user task, the kernel can change access level to unpriv then it can launch user task
	//if the unpriv code wants any services, then it can trigger syscall which is serviced by the kernel code

	change_access_level_unpriv();
 800025a:	f7ff ffed 	bl	8000238 <change_access_level_unpriv>

	generate_interrupt();
 800025e:	f7ff ffd1 	bl	8000204 <generate_interrupt>

	printf("In thread mode : after interrupt\n");
 8000262:	4803      	ldr	r0, [pc, #12]	; (8000270 <main+0x20>)
 8000264:	f000 f99e 	bl	80005a4 <puts>
	// ISR always is privileged access level (control = 0)
	// to change back to privilege you have to trigger interrupt or system exception
	// then go to Handler mode to modify control = 1 there, then return to thread mode


	for(;;);
 8000268:	e7fe      	b.n	8000268 <main+0x18>
 800026a:	bf00      	nop
 800026c:	08000e68 	.word	0x08000e68
 8000270:	08000e8c 	.word	0x08000e8c

08000274 <RTC_WKUP_IRQHandler>:
}

/* This function(ISR) executes in HANDLER MODE of the processor */
void RTC_WKUP_IRQHandler(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	printf("In handler mode : ISR\n");
 8000278:	4802      	ldr	r0, [pc, #8]	; (8000284 <RTC_WKUP_IRQHandler+0x10>)
 800027a:	f000 f993 	bl	80005a4 <puts>
}
 800027e:	bf00      	nop
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	08000eb0 	.word	0x08000eb0

08000288 <HardFault_Handler>:

/* fault handler catches exception */
void HardFault_Handler(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	printf("Hard fault detected\n");
 800028c:	4801      	ldr	r0, [pc, #4]	; (8000294 <HardFault_Handler+0xc>)
 800028e:	f000 f989 	bl	80005a4 <puts>
	while(1);
 8000292:	e7fe      	b.n	8000292 <HardFault_Handler+0xa>
 8000294:	08000ec8 	.word	0x08000ec8

08000298 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80002a2:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <ITM_SendChar+0x44>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a0d      	ldr	r2, [pc, #52]	; (80002dc <ITM_SendChar+0x44>)
 80002a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002ac:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80002ae:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <ITM_SendChar+0x48>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a0b      	ldr	r2, [pc, #44]	; (80002e0 <ITM_SendChar+0x48>)
 80002b4:	f043 0301 	orr.w	r3, r3, #1
 80002b8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80002ba:	bf00      	nop
 80002bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f003 0301 	and.w	r3, r3, #1
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d0f8      	beq.n	80002bc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80002ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	6013      	str	r3, [r2, #0]
}
 80002d2:	bf00      	nop
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	e000edfc 	.word	0xe000edfc
 80002e0:	e0000e00 	.word	0xe0000e00

080002e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b086      	sub	sp, #24
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	60f8      	str	r0, [r7, #12]
 80002ec:	60b9      	str	r1, [r7, #8]
 80002ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002f0:	2300      	movs	r3, #0
 80002f2:	617b      	str	r3, [r7, #20]
 80002f4:	e00a      	b.n	800030c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80002f6:	f3af 8000 	nop.w
 80002fa:	4601      	mov	r1, r0
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	1c5a      	adds	r2, r3, #1
 8000300:	60ba      	str	r2, [r7, #8]
 8000302:	b2ca      	uxtb	r2, r1
 8000304:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	3301      	adds	r3, #1
 800030a:	617b      	str	r3, [r7, #20]
 800030c:	697a      	ldr	r2, [r7, #20]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	429a      	cmp	r2, r3
 8000312:	dbf0      	blt.n	80002f6 <_read+0x12>
	}

return len;
 8000314:	687b      	ldr	r3, [r7, #4]
}
 8000316:	4618      	mov	r0, r3
 8000318:	3718      	adds	r7, #24
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}

0800031e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800031e:	b580      	push	{r7, lr}
 8000320:	b086      	sub	sp, #24
 8000322:	af00      	add	r7, sp, #0
 8000324:	60f8      	str	r0, [r7, #12]
 8000326:	60b9      	str	r1, [r7, #8]
 8000328:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800032a:	2300      	movs	r3, #0
 800032c:	617b      	str	r3, [r7, #20]
 800032e:	e009      	b.n	8000344 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	1c5a      	adds	r2, r3, #1
 8000334:	60ba      	str	r2, [r7, #8]
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	4618      	mov	r0, r3
 800033a:	f7ff ffad 	bl	8000298 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	3301      	adds	r3, #1
 8000342:	617b      	str	r3, [r7, #20]
 8000344:	697a      	ldr	r2, [r7, #20]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	429a      	cmp	r2, r3
 800034a:	dbf1      	blt.n	8000330 <_write+0x12>
	}
	return len;
 800034c:	687b      	ldr	r3, [r7, #4]
}
 800034e:	4618      	mov	r0, r3
 8000350:	3718      	adds	r7, #24
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}

08000356 <_close>:

int _close(int file)
{
 8000356:	b480      	push	{r7}
 8000358:	b083      	sub	sp, #12
 800035a:	af00      	add	r7, sp, #0
 800035c:	6078      	str	r0, [r7, #4]
	return -1;
 800035e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000362:	4618      	mov	r0, r3
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr

0800036c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800037c:	605a      	str	r2, [r3, #4]
	return 0;
 800037e:	2300      	movs	r3, #0
}
 8000380:	4618      	mov	r0, r3
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	bc80      	pop	{r7}
 8000388:	4770      	bx	lr

0800038a <_isatty>:

int _isatty(int file)
{
 800038a:	b480      	push	{r7}
 800038c:	b083      	sub	sp, #12
 800038e:	af00      	add	r7, sp, #0
 8000390:	6078      	str	r0, [r7, #4]
	return 1;
 8000392:	2301      	movs	r3, #1
}
 8000394:	4618      	mov	r0, r3
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr

0800039e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800039e:	b480      	push	{r7}
 80003a0:	b085      	sub	sp, #20
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	60f8      	str	r0, [r7, #12]
 80003a6:	60b9      	str	r1, [r7, #8]
 80003a8:	607a      	str	r2, [r7, #4]
	return 0;
 80003aa:	2300      	movs	r3, #0
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	3714      	adds	r7, #20
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr
	...

080003b8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80003c0:	4b11      	ldr	r3, [pc, #68]	; (8000408 <_sbrk+0x50>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d102      	bne.n	80003ce <_sbrk+0x16>
		heap_end = &end;
 80003c8:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <_sbrk+0x50>)
 80003ca:	4a10      	ldr	r2, [pc, #64]	; (800040c <_sbrk+0x54>)
 80003cc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <_sbrk+0x50>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <_sbrk+0x50>)
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4413      	add	r3, r2
 80003dc:	466a      	mov	r2, sp
 80003de:	4293      	cmp	r3, r2
 80003e0:	d907      	bls.n	80003f2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80003e2:	f000 f83f 	bl	8000464 <__errno>
 80003e6:	4603      	mov	r3, r0
 80003e8:	220c      	movs	r2, #12
 80003ea:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80003ec:	f04f 33ff 	mov.w	r3, #4294967295
 80003f0:	e006      	b.n	8000400 <_sbrk+0x48>
	}

	heap_end += incr;
 80003f2:	4b05      	ldr	r3, [pc, #20]	; (8000408 <_sbrk+0x50>)
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4413      	add	r3, r2
 80003fa:	4a03      	ldr	r2, [pc, #12]	; (8000408 <_sbrk+0x50>)
 80003fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80003fe:	68fb      	ldr	r3, [r7, #12]
}
 8000400:	4618      	mov	r0, r3
 8000402:	3710      	adds	r7, #16
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000080 	.word	0x20000080
 800040c:	200000a0 	.word	0x200000a0

08000410 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000410:	480d      	ldr	r0, [pc, #52]	; (8000448 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000412:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000414:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000418:	480c      	ldr	r0, [pc, #48]	; (800044c <LoopForever+0x6>)
  ldr r1, =_edata
 800041a:	490d      	ldr	r1, [pc, #52]	; (8000450 <LoopForever+0xa>)
  ldr r2, =_sidata
 800041c:	4a0d      	ldr	r2, [pc, #52]	; (8000454 <LoopForever+0xe>)
  movs r3, #0
 800041e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000420:	e002      	b.n	8000428 <LoopCopyDataInit>

08000422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000426:	3304      	adds	r3, #4

08000428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800042a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800042c:	d3f9      	bcc.n	8000422 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800042e:	4a0a      	ldr	r2, [pc, #40]	; (8000458 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000430:	4c0a      	ldr	r4, [pc, #40]	; (800045c <LoopForever+0x16>)
  movs r3, #0
 8000432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000434:	e001      	b.n	800043a <LoopFillZerobss>

08000436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000438:	3204      	adds	r2, #4

0800043a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800043a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800043c:	d3fb      	bcc.n	8000436 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800043e:	f000 f817 	bl	8000470 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000442:	f7ff ff05 	bl	8000250 <main>

08000446 <LoopForever>:

LoopForever:
    b LoopForever
 8000446:	e7fe      	b.n	8000446 <LoopForever>
  ldr   r0, =_estack
 8000448:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800044c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000450:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000454:	08000f48 	.word	0x08000f48
  ldr r2, =_sbss
 8000458:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800045c:	2000009c 	.word	0x2000009c

08000460 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000460:	e7fe      	b.n	8000460 <ADC_IRQHandler>
	...

08000464 <__errno>:
 8000464:	4b01      	ldr	r3, [pc, #4]	; (800046c <__errno+0x8>)
 8000466:	6818      	ldr	r0, [r3, #0]
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	20000000 	.word	0x20000000

08000470 <__libc_init_array>:
 8000470:	b570      	push	{r4, r5, r6, lr}
 8000472:	4d0d      	ldr	r5, [pc, #52]	; (80004a8 <__libc_init_array+0x38>)
 8000474:	4c0d      	ldr	r4, [pc, #52]	; (80004ac <__libc_init_array+0x3c>)
 8000476:	1b64      	subs	r4, r4, r5
 8000478:	10a4      	asrs	r4, r4, #2
 800047a:	2600      	movs	r6, #0
 800047c:	42a6      	cmp	r6, r4
 800047e:	d109      	bne.n	8000494 <__libc_init_array+0x24>
 8000480:	4d0b      	ldr	r5, [pc, #44]	; (80004b0 <__libc_init_array+0x40>)
 8000482:	4c0c      	ldr	r4, [pc, #48]	; (80004b4 <__libc_init_array+0x44>)
 8000484:	f000 fce4 	bl	8000e50 <_init>
 8000488:	1b64      	subs	r4, r4, r5
 800048a:	10a4      	asrs	r4, r4, #2
 800048c:	2600      	movs	r6, #0
 800048e:	42a6      	cmp	r6, r4
 8000490:	d105      	bne.n	800049e <__libc_init_array+0x2e>
 8000492:	bd70      	pop	{r4, r5, r6, pc}
 8000494:	f855 3b04 	ldr.w	r3, [r5], #4
 8000498:	4798      	blx	r3
 800049a:	3601      	adds	r6, #1
 800049c:	e7ee      	b.n	800047c <__libc_init_array+0xc>
 800049e:	f855 3b04 	ldr.w	r3, [r5], #4
 80004a2:	4798      	blx	r3
 80004a4:	3601      	adds	r6, #1
 80004a6:	e7f2      	b.n	800048e <__libc_init_array+0x1e>
 80004a8:	08000f40 	.word	0x08000f40
 80004ac:	08000f40 	.word	0x08000f40
 80004b0:	08000f40 	.word	0x08000f40
 80004b4:	08000f44 	.word	0x08000f44

080004b8 <memset>:
 80004b8:	4402      	add	r2, r0
 80004ba:	4603      	mov	r3, r0
 80004bc:	4293      	cmp	r3, r2
 80004be:	d100      	bne.n	80004c2 <memset+0xa>
 80004c0:	4770      	bx	lr
 80004c2:	f803 1b01 	strb.w	r1, [r3], #1
 80004c6:	e7f9      	b.n	80004bc <memset+0x4>

080004c8 <_puts_r>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	460e      	mov	r6, r1
 80004cc:	4605      	mov	r5, r0
 80004ce:	b118      	cbz	r0, 80004d8 <_puts_r+0x10>
 80004d0:	6983      	ldr	r3, [r0, #24]
 80004d2:	b90b      	cbnz	r3, 80004d8 <_puts_r+0x10>
 80004d4:	f000 fa48 	bl	8000968 <__sinit>
 80004d8:	69ab      	ldr	r3, [r5, #24]
 80004da:	68ac      	ldr	r4, [r5, #8]
 80004dc:	b913      	cbnz	r3, 80004e4 <_puts_r+0x1c>
 80004de:	4628      	mov	r0, r5
 80004e0:	f000 fa42 	bl	8000968 <__sinit>
 80004e4:	4b2c      	ldr	r3, [pc, #176]	; (8000598 <_puts_r+0xd0>)
 80004e6:	429c      	cmp	r4, r3
 80004e8:	d120      	bne.n	800052c <_puts_r+0x64>
 80004ea:	686c      	ldr	r4, [r5, #4]
 80004ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80004ee:	07db      	lsls	r3, r3, #31
 80004f0:	d405      	bmi.n	80004fe <_puts_r+0x36>
 80004f2:	89a3      	ldrh	r3, [r4, #12]
 80004f4:	0598      	lsls	r0, r3, #22
 80004f6:	d402      	bmi.n	80004fe <_puts_r+0x36>
 80004f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80004fa:	f000 fad3 	bl	8000aa4 <__retarget_lock_acquire_recursive>
 80004fe:	89a3      	ldrh	r3, [r4, #12]
 8000500:	0719      	lsls	r1, r3, #28
 8000502:	d51d      	bpl.n	8000540 <_puts_r+0x78>
 8000504:	6923      	ldr	r3, [r4, #16]
 8000506:	b1db      	cbz	r3, 8000540 <_puts_r+0x78>
 8000508:	3e01      	subs	r6, #1
 800050a:	68a3      	ldr	r3, [r4, #8]
 800050c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000510:	3b01      	subs	r3, #1
 8000512:	60a3      	str	r3, [r4, #8]
 8000514:	bb39      	cbnz	r1, 8000566 <_puts_r+0x9e>
 8000516:	2b00      	cmp	r3, #0
 8000518:	da38      	bge.n	800058c <_puts_r+0xc4>
 800051a:	4622      	mov	r2, r4
 800051c:	210a      	movs	r1, #10
 800051e:	4628      	mov	r0, r5
 8000520:	f000 f848 	bl	80005b4 <__swbuf_r>
 8000524:	3001      	adds	r0, #1
 8000526:	d011      	beq.n	800054c <_puts_r+0x84>
 8000528:	250a      	movs	r5, #10
 800052a:	e011      	b.n	8000550 <_puts_r+0x88>
 800052c:	4b1b      	ldr	r3, [pc, #108]	; (800059c <_puts_r+0xd4>)
 800052e:	429c      	cmp	r4, r3
 8000530:	d101      	bne.n	8000536 <_puts_r+0x6e>
 8000532:	68ac      	ldr	r4, [r5, #8]
 8000534:	e7da      	b.n	80004ec <_puts_r+0x24>
 8000536:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <_puts_r+0xd8>)
 8000538:	429c      	cmp	r4, r3
 800053a:	bf08      	it	eq
 800053c:	68ec      	ldreq	r4, [r5, #12]
 800053e:	e7d5      	b.n	80004ec <_puts_r+0x24>
 8000540:	4621      	mov	r1, r4
 8000542:	4628      	mov	r0, r5
 8000544:	f000 f888 	bl	8000658 <__swsetup_r>
 8000548:	2800      	cmp	r0, #0
 800054a:	d0dd      	beq.n	8000508 <_puts_r+0x40>
 800054c:	f04f 35ff 	mov.w	r5, #4294967295
 8000550:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000552:	07da      	lsls	r2, r3, #31
 8000554:	d405      	bmi.n	8000562 <_puts_r+0x9a>
 8000556:	89a3      	ldrh	r3, [r4, #12]
 8000558:	059b      	lsls	r3, r3, #22
 800055a:	d402      	bmi.n	8000562 <_puts_r+0x9a>
 800055c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800055e:	f000 faa2 	bl	8000aa6 <__retarget_lock_release_recursive>
 8000562:	4628      	mov	r0, r5
 8000564:	bd70      	pop	{r4, r5, r6, pc}
 8000566:	2b00      	cmp	r3, #0
 8000568:	da04      	bge.n	8000574 <_puts_r+0xac>
 800056a:	69a2      	ldr	r2, [r4, #24]
 800056c:	429a      	cmp	r2, r3
 800056e:	dc06      	bgt.n	800057e <_puts_r+0xb6>
 8000570:	290a      	cmp	r1, #10
 8000572:	d004      	beq.n	800057e <_puts_r+0xb6>
 8000574:	6823      	ldr	r3, [r4, #0]
 8000576:	1c5a      	adds	r2, r3, #1
 8000578:	6022      	str	r2, [r4, #0]
 800057a:	7019      	strb	r1, [r3, #0]
 800057c:	e7c5      	b.n	800050a <_puts_r+0x42>
 800057e:	4622      	mov	r2, r4
 8000580:	4628      	mov	r0, r5
 8000582:	f000 f817 	bl	80005b4 <__swbuf_r>
 8000586:	3001      	adds	r0, #1
 8000588:	d1bf      	bne.n	800050a <_puts_r+0x42>
 800058a:	e7df      	b.n	800054c <_puts_r+0x84>
 800058c:	6823      	ldr	r3, [r4, #0]
 800058e:	250a      	movs	r5, #10
 8000590:	1c5a      	adds	r2, r3, #1
 8000592:	6022      	str	r2, [r4, #0]
 8000594:	701d      	strb	r5, [r3, #0]
 8000596:	e7db      	b.n	8000550 <_puts_r+0x88>
 8000598:	08000f00 	.word	0x08000f00
 800059c:	08000f20 	.word	0x08000f20
 80005a0:	08000ee0 	.word	0x08000ee0

080005a4 <puts>:
 80005a4:	4b02      	ldr	r3, [pc, #8]	; (80005b0 <puts+0xc>)
 80005a6:	4601      	mov	r1, r0
 80005a8:	6818      	ldr	r0, [r3, #0]
 80005aa:	f7ff bf8d 	b.w	80004c8 <_puts_r>
 80005ae:	bf00      	nop
 80005b0:	20000000 	.word	0x20000000

080005b4 <__swbuf_r>:
 80005b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005b6:	460e      	mov	r6, r1
 80005b8:	4614      	mov	r4, r2
 80005ba:	4605      	mov	r5, r0
 80005bc:	b118      	cbz	r0, 80005c6 <__swbuf_r+0x12>
 80005be:	6983      	ldr	r3, [r0, #24]
 80005c0:	b90b      	cbnz	r3, 80005c6 <__swbuf_r+0x12>
 80005c2:	f000 f9d1 	bl	8000968 <__sinit>
 80005c6:	4b21      	ldr	r3, [pc, #132]	; (800064c <__swbuf_r+0x98>)
 80005c8:	429c      	cmp	r4, r3
 80005ca:	d12b      	bne.n	8000624 <__swbuf_r+0x70>
 80005cc:	686c      	ldr	r4, [r5, #4]
 80005ce:	69a3      	ldr	r3, [r4, #24]
 80005d0:	60a3      	str	r3, [r4, #8]
 80005d2:	89a3      	ldrh	r3, [r4, #12]
 80005d4:	071a      	lsls	r2, r3, #28
 80005d6:	d52f      	bpl.n	8000638 <__swbuf_r+0x84>
 80005d8:	6923      	ldr	r3, [r4, #16]
 80005da:	b36b      	cbz	r3, 8000638 <__swbuf_r+0x84>
 80005dc:	6923      	ldr	r3, [r4, #16]
 80005de:	6820      	ldr	r0, [r4, #0]
 80005e0:	1ac0      	subs	r0, r0, r3
 80005e2:	6963      	ldr	r3, [r4, #20]
 80005e4:	b2f6      	uxtb	r6, r6
 80005e6:	4283      	cmp	r3, r0
 80005e8:	4637      	mov	r7, r6
 80005ea:	dc04      	bgt.n	80005f6 <__swbuf_r+0x42>
 80005ec:	4621      	mov	r1, r4
 80005ee:	4628      	mov	r0, r5
 80005f0:	f000 f926 	bl	8000840 <_fflush_r>
 80005f4:	bb30      	cbnz	r0, 8000644 <__swbuf_r+0x90>
 80005f6:	68a3      	ldr	r3, [r4, #8]
 80005f8:	3b01      	subs	r3, #1
 80005fa:	60a3      	str	r3, [r4, #8]
 80005fc:	6823      	ldr	r3, [r4, #0]
 80005fe:	1c5a      	adds	r2, r3, #1
 8000600:	6022      	str	r2, [r4, #0]
 8000602:	701e      	strb	r6, [r3, #0]
 8000604:	6963      	ldr	r3, [r4, #20]
 8000606:	3001      	adds	r0, #1
 8000608:	4283      	cmp	r3, r0
 800060a:	d004      	beq.n	8000616 <__swbuf_r+0x62>
 800060c:	89a3      	ldrh	r3, [r4, #12]
 800060e:	07db      	lsls	r3, r3, #31
 8000610:	d506      	bpl.n	8000620 <__swbuf_r+0x6c>
 8000612:	2e0a      	cmp	r6, #10
 8000614:	d104      	bne.n	8000620 <__swbuf_r+0x6c>
 8000616:	4621      	mov	r1, r4
 8000618:	4628      	mov	r0, r5
 800061a:	f000 f911 	bl	8000840 <_fflush_r>
 800061e:	b988      	cbnz	r0, 8000644 <__swbuf_r+0x90>
 8000620:	4638      	mov	r0, r7
 8000622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <__swbuf_r+0x9c>)
 8000626:	429c      	cmp	r4, r3
 8000628:	d101      	bne.n	800062e <__swbuf_r+0x7a>
 800062a:	68ac      	ldr	r4, [r5, #8]
 800062c:	e7cf      	b.n	80005ce <__swbuf_r+0x1a>
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <__swbuf_r+0xa0>)
 8000630:	429c      	cmp	r4, r3
 8000632:	bf08      	it	eq
 8000634:	68ec      	ldreq	r4, [r5, #12]
 8000636:	e7ca      	b.n	80005ce <__swbuf_r+0x1a>
 8000638:	4621      	mov	r1, r4
 800063a:	4628      	mov	r0, r5
 800063c:	f000 f80c 	bl	8000658 <__swsetup_r>
 8000640:	2800      	cmp	r0, #0
 8000642:	d0cb      	beq.n	80005dc <__swbuf_r+0x28>
 8000644:	f04f 37ff 	mov.w	r7, #4294967295
 8000648:	e7ea      	b.n	8000620 <__swbuf_r+0x6c>
 800064a:	bf00      	nop
 800064c:	08000f00 	.word	0x08000f00
 8000650:	08000f20 	.word	0x08000f20
 8000654:	08000ee0 	.word	0x08000ee0

08000658 <__swsetup_r>:
 8000658:	4b32      	ldr	r3, [pc, #200]	; (8000724 <__swsetup_r+0xcc>)
 800065a:	b570      	push	{r4, r5, r6, lr}
 800065c:	681d      	ldr	r5, [r3, #0]
 800065e:	4606      	mov	r6, r0
 8000660:	460c      	mov	r4, r1
 8000662:	b125      	cbz	r5, 800066e <__swsetup_r+0x16>
 8000664:	69ab      	ldr	r3, [r5, #24]
 8000666:	b913      	cbnz	r3, 800066e <__swsetup_r+0x16>
 8000668:	4628      	mov	r0, r5
 800066a:	f000 f97d 	bl	8000968 <__sinit>
 800066e:	4b2e      	ldr	r3, [pc, #184]	; (8000728 <__swsetup_r+0xd0>)
 8000670:	429c      	cmp	r4, r3
 8000672:	d10f      	bne.n	8000694 <__swsetup_r+0x3c>
 8000674:	686c      	ldr	r4, [r5, #4]
 8000676:	89a3      	ldrh	r3, [r4, #12]
 8000678:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800067c:	0719      	lsls	r1, r3, #28
 800067e:	d42c      	bmi.n	80006da <__swsetup_r+0x82>
 8000680:	06dd      	lsls	r5, r3, #27
 8000682:	d411      	bmi.n	80006a8 <__swsetup_r+0x50>
 8000684:	2309      	movs	r3, #9
 8000686:	6033      	str	r3, [r6, #0]
 8000688:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800068c:	81a3      	strh	r3, [r4, #12]
 800068e:	f04f 30ff 	mov.w	r0, #4294967295
 8000692:	e03e      	b.n	8000712 <__swsetup_r+0xba>
 8000694:	4b25      	ldr	r3, [pc, #148]	; (800072c <__swsetup_r+0xd4>)
 8000696:	429c      	cmp	r4, r3
 8000698:	d101      	bne.n	800069e <__swsetup_r+0x46>
 800069a:	68ac      	ldr	r4, [r5, #8]
 800069c:	e7eb      	b.n	8000676 <__swsetup_r+0x1e>
 800069e:	4b24      	ldr	r3, [pc, #144]	; (8000730 <__swsetup_r+0xd8>)
 80006a0:	429c      	cmp	r4, r3
 80006a2:	bf08      	it	eq
 80006a4:	68ec      	ldreq	r4, [r5, #12]
 80006a6:	e7e6      	b.n	8000676 <__swsetup_r+0x1e>
 80006a8:	0758      	lsls	r0, r3, #29
 80006aa:	d512      	bpl.n	80006d2 <__swsetup_r+0x7a>
 80006ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80006ae:	b141      	cbz	r1, 80006c2 <__swsetup_r+0x6a>
 80006b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80006b4:	4299      	cmp	r1, r3
 80006b6:	d002      	beq.n	80006be <__swsetup_r+0x66>
 80006b8:	4630      	mov	r0, r6
 80006ba:	f000 fa59 	bl	8000b70 <_free_r>
 80006be:	2300      	movs	r3, #0
 80006c0:	6363      	str	r3, [r4, #52]	; 0x34
 80006c2:	89a3      	ldrh	r3, [r4, #12]
 80006c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80006c8:	81a3      	strh	r3, [r4, #12]
 80006ca:	2300      	movs	r3, #0
 80006cc:	6063      	str	r3, [r4, #4]
 80006ce:	6923      	ldr	r3, [r4, #16]
 80006d0:	6023      	str	r3, [r4, #0]
 80006d2:	89a3      	ldrh	r3, [r4, #12]
 80006d4:	f043 0308 	orr.w	r3, r3, #8
 80006d8:	81a3      	strh	r3, [r4, #12]
 80006da:	6923      	ldr	r3, [r4, #16]
 80006dc:	b94b      	cbnz	r3, 80006f2 <__swsetup_r+0x9a>
 80006de:	89a3      	ldrh	r3, [r4, #12]
 80006e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80006e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006e8:	d003      	beq.n	80006f2 <__swsetup_r+0x9a>
 80006ea:	4621      	mov	r1, r4
 80006ec:	4630      	mov	r0, r6
 80006ee:	f000 f9ff 	bl	8000af0 <__smakebuf_r>
 80006f2:	89a0      	ldrh	r0, [r4, #12]
 80006f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80006f8:	f010 0301 	ands.w	r3, r0, #1
 80006fc:	d00a      	beq.n	8000714 <__swsetup_r+0xbc>
 80006fe:	2300      	movs	r3, #0
 8000700:	60a3      	str	r3, [r4, #8]
 8000702:	6963      	ldr	r3, [r4, #20]
 8000704:	425b      	negs	r3, r3
 8000706:	61a3      	str	r3, [r4, #24]
 8000708:	6923      	ldr	r3, [r4, #16]
 800070a:	b943      	cbnz	r3, 800071e <__swsetup_r+0xc6>
 800070c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000710:	d1ba      	bne.n	8000688 <__swsetup_r+0x30>
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	0781      	lsls	r1, r0, #30
 8000716:	bf58      	it	pl
 8000718:	6963      	ldrpl	r3, [r4, #20]
 800071a:	60a3      	str	r3, [r4, #8]
 800071c:	e7f4      	b.n	8000708 <__swsetup_r+0xb0>
 800071e:	2000      	movs	r0, #0
 8000720:	e7f7      	b.n	8000712 <__swsetup_r+0xba>
 8000722:	bf00      	nop
 8000724:	20000000 	.word	0x20000000
 8000728:	08000f00 	.word	0x08000f00
 800072c:	08000f20 	.word	0x08000f20
 8000730:	08000ee0 	.word	0x08000ee0

08000734 <__sflush_r>:
 8000734:	898a      	ldrh	r2, [r1, #12]
 8000736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800073a:	4605      	mov	r5, r0
 800073c:	0710      	lsls	r0, r2, #28
 800073e:	460c      	mov	r4, r1
 8000740:	d458      	bmi.n	80007f4 <__sflush_r+0xc0>
 8000742:	684b      	ldr	r3, [r1, #4]
 8000744:	2b00      	cmp	r3, #0
 8000746:	dc05      	bgt.n	8000754 <__sflush_r+0x20>
 8000748:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800074a:	2b00      	cmp	r3, #0
 800074c:	dc02      	bgt.n	8000754 <__sflush_r+0x20>
 800074e:	2000      	movs	r0, #0
 8000750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000754:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000756:	2e00      	cmp	r6, #0
 8000758:	d0f9      	beq.n	800074e <__sflush_r+0x1a>
 800075a:	2300      	movs	r3, #0
 800075c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000760:	682f      	ldr	r7, [r5, #0]
 8000762:	602b      	str	r3, [r5, #0]
 8000764:	d032      	beq.n	80007cc <__sflush_r+0x98>
 8000766:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000768:	89a3      	ldrh	r3, [r4, #12]
 800076a:	075a      	lsls	r2, r3, #29
 800076c:	d505      	bpl.n	800077a <__sflush_r+0x46>
 800076e:	6863      	ldr	r3, [r4, #4]
 8000770:	1ac0      	subs	r0, r0, r3
 8000772:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000774:	b10b      	cbz	r3, 800077a <__sflush_r+0x46>
 8000776:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000778:	1ac0      	subs	r0, r0, r3
 800077a:	2300      	movs	r3, #0
 800077c:	4602      	mov	r2, r0
 800077e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000780:	6a21      	ldr	r1, [r4, #32]
 8000782:	4628      	mov	r0, r5
 8000784:	47b0      	blx	r6
 8000786:	1c43      	adds	r3, r0, #1
 8000788:	89a3      	ldrh	r3, [r4, #12]
 800078a:	d106      	bne.n	800079a <__sflush_r+0x66>
 800078c:	6829      	ldr	r1, [r5, #0]
 800078e:	291d      	cmp	r1, #29
 8000790:	d82c      	bhi.n	80007ec <__sflush_r+0xb8>
 8000792:	4a2a      	ldr	r2, [pc, #168]	; (800083c <__sflush_r+0x108>)
 8000794:	40ca      	lsrs	r2, r1
 8000796:	07d6      	lsls	r6, r2, #31
 8000798:	d528      	bpl.n	80007ec <__sflush_r+0xb8>
 800079a:	2200      	movs	r2, #0
 800079c:	6062      	str	r2, [r4, #4]
 800079e:	04d9      	lsls	r1, r3, #19
 80007a0:	6922      	ldr	r2, [r4, #16]
 80007a2:	6022      	str	r2, [r4, #0]
 80007a4:	d504      	bpl.n	80007b0 <__sflush_r+0x7c>
 80007a6:	1c42      	adds	r2, r0, #1
 80007a8:	d101      	bne.n	80007ae <__sflush_r+0x7a>
 80007aa:	682b      	ldr	r3, [r5, #0]
 80007ac:	b903      	cbnz	r3, 80007b0 <__sflush_r+0x7c>
 80007ae:	6560      	str	r0, [r4, #84]	; 0x54
 80007b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80007b2:	602f      	str	r7, [r5, #0]
 80007b4:	2900      	cmp	r1, #0
 80007b6:	d0ca      	beq.n	800074e <__sflush_r+0x1a>
 80007b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80007bc:	4299      	cmp	r1, r3
 80007be:	d002      	beq.n	80007c6 <__sflush_r+0x92>
 80007c0:	4628      	mov	r0, r5
 80007c2:	f000 f9d5 	bl	8000b70 <_free_r>
 80007c6:	2000      	movs	r0, #0
 80007c8:	6360      	str	r0, [r4, #52]	; 0x34
 80007ca:	e7c1      	b.n	8000750 <__sflush_r+0x1c>
 80007cc:	6a21      	ldr	r1, [r4, #32]
 80007ce:	2301      	movs	r3, #1
 80007d0:	4628      	mov	r0, r5
 80007d2:	47b0      	blx	r6
 80007d4:	1c41      	adds	r1, r0, #1
 80007d6:	d1c7      	bne.n	8000768 <__sflush_r+0x34>
 80007d8:	682b      	ldr	r3, [r5, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d0c4      	beq.n	8000768 <__sflush_r+0x34>
 80007de:	2b1d      	cmp	r3, #29
 80007e0:	d001      	beq.n	80007e6 <__sflush_r+0xb2>
 80007e2:	2b16      	cmp	r3, #22
 80007e4:	d101      	bne.n	80007ea <__sflush_r+0xb6>
 80007e6:	602f      	str	r7, [r5, #0]
 80007e8:	e7b1      	b.n	800074e <__sflush_r+0x1a>
 80007ea:	89a3      	ldrh	r3, [r4, #12]
 80007ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f0:	81a3      	strh	r3, [r4, #12]
 80007f2:	e7ad      	b.n	8000750 <__sflush_r+0x1c>
 80007f4:	690f      	ldr	r7, [r1, #16]
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	d0a9      	beq.n	800074e <__sflush_r+0x1a>
 80007fa:	0793      	lsls	r3, r2, #30
 80007fc:	680e      	ldr	r6, [r1, #0]
 80007fe:	bf08      	it	eq
 8000800:	694b      	ldreq	r3, [r1, #20]
 8000802:	600f      	str	r7, [r1, #0]
 8000804:	bf18      	it	ne
 8000806:	2300      	movne	r3, #0
 8000808:	eba6 0807 	sub.w	r8, r6, r7
 800080c:	608b      	str	r3, [r1, #8]
 800080e:	f1b8 0f00 	cmp.w	r8, #0
 8000812:	dd9c      	ble.n	800074e <__sflush_r+0x1a>
 8000814:	6a21      	ldr	r1, [r4, #32]
 8000816:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000818:	4643      	mov	r3, r8
 800081a:	463a      	mov	r2, r7
 800081c:	4628      	mov	r0, r5
 800081e:	47b0      	blx	r6
 8000820:	2800      	cmp	r0, #0
 8000822:	dc06      	bgt.n	8000832 <__sflush_r+0xfe>
 8000824:	89a3      	ldrh	r3, [r4, #12]
 8000826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800082a:	81a3      	strh	r3, [r4, #12]
 800082c:	f04f 30ff 	mov.w	r0, #4294967295
 8000830:	e78e      	b.n	8000750 <__sflush_r+0x1c>
 8000832:	4407      	add	r7, r0
 8000834:	eba8 0800 	sub.w	r8, r8, r0
 8000838:	e7e9      	b.n	800080e <__sflush_r+0xda>
 800083a:	bf00      	nop
 800083c:	20400001 	.word	0x20400001

08000840 <_fflush_r>:
 8000840:	b538      	push	{r3, r4, r5, lr}
 8000842:	690b      	ldr	r3, [r1, #16]
 8000844:	4605      	mov	r5, r0
 8000846:	460c      	mov	r4, r1
 8000848:	b913      	cbnz	r3, 8000850 <_fflush_r+0x10>
 800084a:	2500      	movs	r5, #0
 800084c:	4628      	mov	r0, r5
 800084e:	bd38      	pop	{r3, r4, r5, pc}
 8000850:	b118      	cbz	r0, 800085a <_fflush_r+0x1a>
 8000852:	6983      	ldr	r3, [r0, #24]
 8000854:	b90b      	cbnz	r3, 800085a <_fflush_r+0x1a>
 8000856:	f000 f887 	bl	8000968 <__sinit>
 800085a:	4b14      	ldr	r3, [pc, #80]	; (80008ac <_fflush_r+0x6c>)
 800085c:	429c      	cmp	r4, r3
 800085e:	d11b      	bne.n	8000898 <_fflush_r+0x58>
 8000860:	686c      	ldr	r4, [r5, #4]
 8000862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d0ef      	beq.n	800084a <_fflush_r+0xa>
 800086a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800086c:	07d0      	lsls	r0, r2, #31
 800086e:	d404      	bmi.n	800087a <_fflush_r+0x3a>
 8000870:	0599      	lsls	r1, r3, #22
 8000872:	d402      	bmi.n	800087a <_fflush_r+0x3a>
 8000874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000876:	f000 f915 	bl	8000aa4 <__retarget_lock_acquire_recursive>
 800087a:	4628      	mov	r0, r5
 800087c:	4621      	mov	r1, r4
 800087e:	f7ff ff59 	bl	8000734 <__sflush_r>
 8000882:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000884:	07da      	lsls	r2, r3, #31
 8000886:	4605      	mov	r5, r0
 8000888:	d4e0      	bmi.n	800084c <_fflush_r+0xc>
 800088a:	89a3      	ldrh	r3, [r4, #12]
 800088c:	059b      	lsls	r3, r3, #22
 800088e:	d4dd      	bmi.n	800084c <_fflush_r+0xc>
 8000890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000892:	f000 f908 	bl	8000aa6 <__retarget_lock_release_recursive>
 8000896:	e7d9      	b.n	800084c <_fflush_r+0xc>
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <_fflush_r+0x70>)
 800089a:	429c      	cmp	r4, r3
 800089c:	d101      	bne.n	80008a2 <_fflush_r+0x62>
 800089e:	68ac      	ldr	r4, [r5, #8]
 80008a0:	e7df      	b.n	8000862 <_fflush_r+0x22>
 80008a2:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <_fflush_r+0x74>)
 80008a4:	429c      	cmp	r4, r3
 80008a6:	bf08      	it	eq
 80008a8:	68ec      	ldreq	r4, [r5, #12]
 80008aa:	e7da      	b.n	8000862 <_fflush_r+0x22>
 80008ac:	08000f00 	.word	0x08000f00
 80008b0:	08000f20 	.word	0x08000f20
 80008b4:	08000ee0 	.word	0x08000ee0

080008b8 <std>:
 80008b8:	2300      	movs	r3, #0
 80008ba:	b510      	push	{r4, lr}
 80008bc:	4604      	mov	r4, r0
 80008be:	e9c0 3300 	strd	r3, r3, [r0]
 80008c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80008c6:	6083      	str	r3, [r0, #8]
 80008c8:	8181      	strh	r1, [r0, #12]
 80008ca:	6643      	str	r3, [r0, #100]	; 0x64
 80008cc:	81c2      	strh	r2, [r0, #14]
 80008ce:	6183      	str	r3, [r0, #24]
 80008d0:	4619      	mov	r1, r3
 80008d2:	2208      	movs	r2, #8
 80008d4:	305c      	adds	r0, #92	; 0x5c
 80008d6:	f7ff fdef 	bl	80004b8 <memset>
 80008da:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <std+0x38>)
 80008dc:	6263      	str	r3, [r4, #36]	; 0x24
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <std+0x3c>)
 80008e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80008e2:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <std+0x40>)
 80008e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80008e6:	4b05      	ldr	r3, [pc, #20]	; (80008fc <std+0x44>)
 80008e8:	6224      	str	r4, [r4, #32]
 80008ea:	6323      	str	r3, [r4, #48]	; 0x30
 80008ec:	bd10      	pop	{r4, pc}
 80008ee:	bf00      	nop
 80008f0:	08000ce1 	.word	0x08000ce1
 80008f4:	08000d03 	.word	0x08000d03
 80008f8:	08000d3b 	.word	0x08000d3b
 80008fc:	08000d5f 	.word	0x08000d5f

08000900 <_cleanup_r>:
 8000900:	4901      	ldr	r1, [pc, #4]	; (8000908 <_cleanup_r+0x8>)
 8000902:	f000 b8af 	b.w	8000a64 <_fwalk_reent>
 8000906:	bf00      	nop
 8000908:	08000841 	.word	0x08000841

0800090c <__sfmoreglue>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	1e4a      	subs	r2, r1, #1
 8000910:	2568      	movs	r5, #104	; 0x68
 8000912:	4355      	muls	r5, r2
 8000914:	460e      	mov	r6, r1
 8000916:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800091a:	f000 f977 	bl	8000c0c <_malloc_r>
 800091e:	4604      	mov	r4, r0
 8000920:	b140      	cbz	r0, 8000934 <__sfmoreglue+0x28>
 8000922:	2100      	movs	r1, #0
 8000924:	e9c0 1600 	strd	r1, r6, [r0]
 8000928:	300c      	adds	r0, #12
 800092a:	60a0      	str	r0, [r4, #8]
 800092c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000930:	f7ff fdc2 	bl	80004b8 <memset>
 8000934:	4620      	mov	r0, r4
 8000936:	bd70      	pop	{r4, r5, r6, pc}

08000938 <__sfp_lock_acquire>:
 8000938:	4801      	ldr	r0, [pc, #4]	; (8000940 <__sfp_lock_acquire+0x8>)
 800093a:	f000 b8b3 	b.w	8000aa4 <__retarget_lock_acquire_recursive>
 800093e:	bf00      	nop
 8000940:	20000094 	.word	0x20000094

08000944 <__sfp_lock_release>:
 8000944:	4801      	ldr	r0, [pc, #4]	; (800094c <__sfp_lock_release+0x8>)
 8000946:	f000 b8ae 	b.w	8000aa6 <__retarget_lock_release_recursive>
 800094a:	bf00      	nop
 800094c:	20000094 	.word	0x20000094

08000950 <__sinit_lock_acquire>:
 8000950:	4801      	ldr	r0, [pc, #4]	; (8000958 <__sinit_lock_acquire+0x8>)
 8000952:	f000 b8a7 	b.w	8000aa4 <__retarget_lock_acquire_recursive>
 8000956:	bf00      	nop
 8000958:	2000008f 	.word	0x2000008f

0800095c <__sinit_lock_release>:
 800095c:	4801      	ldr	r0, [pc, #4]	; (8000964 <__sinit_lock_release+0x8>)
 800095e:	f000 b8a2 	b.w	8000aa6 <__retarget_lock_release_recursive>
 8000962:	bf00      	nop
 8000964:	2000008f 	.word	0x2000008f

08000968 <__sinit>:
 8000968:	b510      	push	{r4, lr}
 800096a:	4604      	mov	r4, r0
 800096c:	f7ff fff0 	bl	8000950 <__sinit_lock_acquire>
 8000970:	69a3      	ldr	r3, [r4, #24]
 8000972:	b11b      	cbz	r3, 800097c <__sinit+0x14>
 8000974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000978:	f7ff bff0 	b.w	800095c <__sinit_lock_release>
 800097c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000980:	6523      	str	r3, [r4, #80]	; 0x50
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <__sinit+0x68>)
 8000984:	4a13      	ldr	r2, [pc, #76]	; (80009d4 <__sinit+0x6c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	62a2      	str	r2, [r4, #40]	; 0x28
 800098a:	42a3      	cmp	r3, r4
 800098c:	bf04      	itt	eq
 800098e:	2301      	moveq	r3, #1
 8000990:	61a3      	streq	r3, [r4, #24]
 8000992:	4620      	mov	r0, r4
 8000994:	f000 f820 	bl	80009d8 <__sfp>
 8000998:	6060      	str	r0, [r4, #4]
 800099a:	4620      	mov	r0, r4
 800099c:	f000 f81c 	bl	80009d8 <__sfp>
 80009a0:	60a0      	str	r0, [r4, #8]
 80009a2:	4620      	mov	r0, r4
 80009a4:	f000 f818 	bl	80009d8 <__sfp>
 80009a8:	2200      	movs	r2, #0
 80009aa:	60e0      	str	r0, [r4, #12]
 80009ac:	2104      	movs	r1, #4
 80009ae:	6860      	ldr	r0, [r4, #4]
 80009b0:	f7ff ff82 	bl	80008b8 <std>
 80009b4:	68a0      	ldr	r0, [r4, #8]
 80009b6:	2201      	movs	r2, #1
 80009b8:	2109      	movs	r1, #9
 80009ba:	f7ff ff7d 	bl	80008b8 <std>
 80009be:	68e0      	ldr	r0, [r4, #12]
 80009c0:	2202      	movs	r2, #2
 80009c2:	2112      	movs	r1, #18
 80009c4:	f7ff ff78 	bl	80008b8 <std>
 80009c8:	2301      	movs	r3, #1
 80009ca:	61a3      	str	r3, [r4, #24]
 80009cc:	e7d2      	b.n	8000974 <__sinit+0xc>
 80009ce:	bf00      	nop
 80009d0:	08000edc 	.word	0x08000edc
 80009d4:	08000901 	.word	0x08000901

080009d8 <__sfp>:
 80009d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009da:	4607      	mov	r7, r0
 80009dc:	f7ff ffac 	bl	8000938 <__sfp_lock_acquire>
 80009e0:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <__sfp+0x84>)
 80009e2:	681e      	ldr	r6, [r3, #0]
 80009e4:	69b3      	ldr	r3, [r6, #24]
 80009e6:	b913      	cbnz	r3, 80009ee <__sfp+0x16>
 80009e8:	4630      	mov	r0, r6
 80009ea:	f7ff ffbd 	bl	8000968 <__sinit>
 80009ee:	3648      	adds	r6, #72	; 0x48
 80009f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80009f4:	3b01      	subs	r3, #1
 80009f6:	d503      	bpl.n	8000a00 <__sfp+0x28>
 80009f8:	6833      	ldr	r3, [r6, #0]
 80009fa:	b30b      	cbz	r3, 8000a40 <__sfp+0x68>
 80009fc:	6836      	ldr	r6, [r6, #0]
 80009fe:	e7f7      	b.n	80009f0 <__sfp+0x18>
 8000a00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000a04:	b9d5      	cbnz	r5, 8000a3c <__sfp+0x64>
 8000a06:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <__sfp+0x88>)
 8000a08:	60e3      	str	r3, [r4, #12]
 8000a0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000a0e:	6665      	str	r5, [r4, #100]	; 0x64
 8000a10:	f000 f847 	bl	8000aa2 <__retarget_lock_init_recursive>
 8000a14:	f7ff ff96 	bl	8000944 <__sfp_lock_release>
 8000a18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000a1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000a20:	6025      	str	r5, [r4, #0]
 8000a22:	61a5      	str	r5, [r4, #24]
 8000a24:	2208      	movs	r2, #8
 8000a26:	4629      	mov	r1, r5
 8000a28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000a2c:	f7ff fd44 	bl	80004b8 <memset>
 8000a30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000a34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000a38:	4620      	mov	r0, r4
 8000a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a3c:	3468      	adds	r4, #104	; 0x68
 8000a3e:	e7d9      	b.n	80009f4 <__sfp+0x1c>
 8000a40:	2104      	movs	r1, #4
 8000a42:	4638      	mov	r0, r7
 8000a44:	f7ff ff62 	bl	800090c <__sfmoreglue>
 8000a48:	4604      	mov	r4, r0
 8000a4a:	6030      	str	r0, [r6, #0]
 8000a4c:	2800      	cmp	r0, #0
 8000a4e:	d1d5      	bne.n	80009fc <__sfp+0x24>
 8000a50:	f7ff ff78 	bl	8000944 <__sfp_lock_release>
 8000a54:	230c      	movs	r3, #12
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	e7ee      	b.n	8000a38 <__sfp+0x60>
 8000a5a:	bf00      	nop
 8000a5c:	08000edc 	.word	0x08000edc
 8000a60:	ffff0001 	.word	0xffff0001

08000a64 <_fwalk_reent>:
 8000a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a68:	4606      	mov	r6, r0
 8000a6a:	4688      	mov	r8, r1
 8000a6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000a70:	2700      	movs	r7, #0
 8000a72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000a76:	f1b9 0901 	subs.w	r9, r9, #1
 8000a7a:	d505      	bpl.n	8000a88 <_fwalk_reent+0x24>
 8000a7c:	6824      	ldr	r4, [r4, #0]
 8000a7e:	2c00      	cmp	r4, #0
 8000a80:	d1f7      	bne.n	8000a72 <_fwalk_reent+0xe>
 8000a82:	4638      	mov	r0, r7
 8000a84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a88:	89ab      	ldrh	r3, [r5, #12]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d907      	bls.n	8000a9e <_fwalk_reent+0x3a>
 8000a8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000a92:	3301      	adds	r3, #1
 8000a94:	d003      	beq.n	8000a9e <_fwalk_reent+0x3a>
 8000a96:	4629      	mov	r1, r5
 8000a98:	4630      	mov	r0, r6
 8000a9a:	47c0      	blx	r8
 8000a9c:	4307      	orrs	r7, r0
 8000a9e:	3568      	adds	r5, #104	; 0x68
 8000aa0:	e7e9      	b.n	8000a76 <_fwalk_reent+0x12>

08000aa2 <__retarget_lock_init_recursive>:
 8000aa2:	4770      	bx	lr

08000aa4 <__retarget_lock_acquire_recursive>:
 8000aa4:	4770      	bx	lr

08000aa6 <__retarget_lock_release_recursive>:
 8000aa6:	4770      	bx	lr

08000aa8 <__swhatbuf_r>:
 8000aa8:	b570      	push	{r4, r5, r6, lr}
 8000aaa:	460e      	mov	r6, r1
 8000aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	b096      	sub	sp, #88	; 0x58
 8000ab4:	4614      	mov	r4, r2
 8000ab6:	461d      	mov	r5, r3
 8000ab8:	da07      	bge.n	8000aca <__swhatbuf_r+0x22>
 8000aba:	2300      	movs	r3, #0
 8000abc:	602b      	str	r3, [r5, #0]
 8000abe:	89b3      	ldrh	r3, [r6, #12]
 8000ac0:	061a      	lsls	r2, r3, #24
 8000ac2:	d410      	bmi.n	8000ae6 <__swhatbuf_r+0x3e>
 8000ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac8:	e00e      	b.n	8000ae8 <__swhatbuf_r+0x40>
 8000aca:	466a      	mov	r2, sp
 8000acc:	f000 f96e 	bl	8000dac <_fstat_r>
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	dbf2      	blt.n	8000aba <__swhatbuf_r+0x12>
 8000ad4:	9a01      	ldr	r2, [sp, #4]
 8000ad6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000ada:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000ade:	425a      	negs	r2, r3
 8000ae0:	415a      	adcs	r2, r3
 8000ae2:	602a      	str	r2, [r5, #0]
 8000ae4:	e7ee      	b.n	8000ac4 <__swhatbuf_r+0x1c>
 8000ae6:	2340      	movs	r3, #64	; 0x40
 8000ae8:	2000      	movs	r0, #0
 8000aea:	6023      	str	r3, [r4, #0]
 8000aec:	b016      	add	sp, #88	; 0x58
 8000aee:	bd70      	pop	{r4, r5, r6, pc}

08000af0 <__smakebuf_r>:
 8000af0:	898b      	ldrh	r3, [r1, #12]
 8000af2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000af4:	079d      	lsls	r5, r3, #30
 8000af6:	4606      	mov	r6, r0
 8000af8:	460c      	mov	r4, r1
 8000afa:	d507      	bpl.n	8000b0c <__smakebuf_r+0x1c>
 8000afc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000b00:	6023      	str	r3, [r4, #0]
 8000b02:	6123      	str	r3, [r4, #16]
 8000b04:	2301      	movs	r3, #1
 8000b06:	6163      	str	r3, [r4, #20]
 8000b08:	b002      	add	sp, #8
 8000b0a:	bd70      	pop	{r4, r5, r6, pc}
 8000b0c:	ab01      	add	r3, sp, #4
 8000b0e:	466a      	mov	r2, sp
 8000b10:	f7ff ffca 	bl	8000aa8 <__swhatbuf_r>
 8000b14:	9900      	ldr	r1, [sp, #0]
 8000b16:	4605      	mov	r5, r0
 8000b18:	4630      	mov	r0, r6
 8000b1a:	f000 f877 	bl	8000c0c <_malloc_r>
 8000b1e:	b948      	cbnz	r0, 8000b34 <__smakebuf_r+0x44>
 8000b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b24:	059a      	lsls	r2, r3, #22
 8000b26:	d4ef      	bmi.n	8000b08 <__smakebuf_r+0x18>
 8000b28:	f023 0303 	bic.w	r3, r3, #3
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	81a3      	strh	r3, [r4, #12]
 8000b32:	e7e3      	b.n	8000afc <__smakebuf_r+0xc>
 8000b34:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <__smakebuf_r+0x7c>)
 8000b36:	62b3      	str	r3, [r6, #40]	; 0x28
 8000b38:	89a3      	ldrh	r3, [r4, #12]
 8000b3a:	6020      	str	r0, [r4, #0]
 8000b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b40:	81a3      	strh	r3, [r4, #12]
 8000b42:	9b00      	ldr	r3, [sp, #0]
 8000b44:	6163      	str	r3, [r4, #20]
 8000b46:	9b01      	ldr	r3, [sp, #4]
 8000b48:	6120      	str	r0, [r4, #16]
 8000b4a:	b15b      	cbz	r3, 8000b64 <__smakebuf_r+0x74>
 8000b4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000b50:	4630      	mov	r0, r6
 8000b52:	f000 f93d 	bl	8000dd0 <_isatty_r>
 8000b56:	b128      	cbz	r0, 8000b64 <__smakebuf_r+0x74>
 8000b58:	89a3      	ldrh	r3, [r4, #12]
 8000b5a:	f023 0303 	bic.w	r3, r3, #3
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	81a3      	strh	r3, [r4, #12]
 8000b64:	89a0      	ldrh	r0, [r4, #12]
 8000b66:	4305      	orrs	r5, r0
 8000b68:	81a5      	strh	r5, [r4, #12]
 8000b6a:	e7cd      	b.n	8000b08 <__smakebuf_r+0x18>
 8000b6c:	08000901 	.word	0x08000901

08000b70 <_free_r>:
 8000b70:	b538      	push	{r3, r4, r5, lr}
 8000b72:	4605      	mov	r5, r0
 8000b74:	2900      	cmp	r1, #0
 8000b76:	d045      	beq.n	8000c04 <_free_r+0x94>
 8000b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b7c:	1f0c      	subs	r4, r1, #4
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	bfb8      	it	lt
 8000b82:	18e4      	addlt	r4, r4, r3
 8000b84:	f000 f946 	bl	8000e14 <__malloc_lock>
 8000b88:	4a1f      	ldr	r2, [pc, #124]	; (8000c08 <_free_r+0x98>)
 8000b8a:	6813      	ldr	r3, [r2, #0]
 8000b8c:	4610      	mov	r0, r2
 8000b8e:	b933      	cbnz	r3, 8000b9e <_free_r+0x2e>
 8000b90:	6063      	str	r3, [r4, #4]
 8000b92:	6014      	str	r4, [r2, #0]
 8000b94:	4628      	mov	r0, r5
 8000b96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b9a:	f000 b941 	b.w	8000e20 <__malloc_unlock>
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	d90b      	bls.n	8000bba <_free_r+0x4a>
 8000ba2:	6821      	ldr	r1, [r4, #0]
 8000ba4:	1862      	adds	r2, r4, r1
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	bf04      	itt	eq
 8000baa:	681a      	ldreq	r2, [r3, #0]
 8000bac:	685b      	ldreq	r3, [r3, #4]
 8000bae:	6063      	str	r3, [r4, #4]
 8000bb0:	bf04      	itt	eq
 8000bb2:	1852      	addeq	r2, r2, r1
 8000bb4:	6022      	streq	r2, [r4, #0]
 8000bb6:	6004      	str	r4, [r0, #0]
 8000bb8:	e7ec      	b.n	8000b94 <_free_r+0x24>
 8000bba:	461a      	mov	r2, r3
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	b10b      	cbz	r3, 8000bc4 <_free_r+0x54>
 8000bc0:	42a3      	cmp	r3, r4
 8000bc2:	d9fa      	bls.n	8000bba <_free_r+0x4a>
 8000bc4:	6811      	ldr	r1, [r2, #0]
 8000bc6:	1850      	adds	r0, r2, r1
 8000bc8:	42a0      	cmp	r0, r4
 8000bca:	d10b      	bne.n	8000be4 <_free_r+0x74>
 8000bcc:	6820      	ldr	r0, [r4, #0]
 8000bce:	4401      	add	r1, r0
 8000bd0:	1850      	adds	r0, r2, r1
 8000bd2:	4283      	cmp	r3, r0
 8000bd4:	6011      	str	r1, [r2, #0]
 8000bd6:	d1dd      	bne.n	8000b94 <_free_r+0x24>
 8000bd8:	6818      	ldr	r0, [r3, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	6053      	str	r3, [r2, #4]
 8000bde:	4401      	add	r1, r0
 8000be0:	6011      	str	r1, [r2, #0]
 8000be2:	e7d7      	b.n	8000b94 <_free_r+0x24>
 8000be4:	d902      	bls.n	8000bec <_free_r+0x7c>
 8000be6:	230c      	movs	r3, #12
 8000be8:	602b      	str	r3, [r5, #0]
 8000bea:	e7d3      	b.n	8000b94 <_free_r+0x24>
 8000bec:	6820      	ldr	r0, [r4, #0]
 8000bee:	1821      	adds	r1, r4, r0
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	bf04      	itt	eq
 8000bf4:	6819      	ldreq	r1, [r3, #0]
 8000bf6:	685b      	ldreq	r3, [r3, #4]
 8000bf8:	6063      	str	r3, [r4, #4]
 8000bfa:	bf04      	itt	eq
 8000bfc:	1809      	addeq	r1, r1, r0
 8000bfe:	6021      	streq	r1, [r4, #0]
 8000c00:	6054      	str	r4, [r2, #4]
 8000c02:	e7c7      	b.n	8000b94 <_free_r+0x24>
 8000c04:	bd38      	pop	{r3, r4, r5, pc}
 8000c06:	bf00      	nop
 8000c08:	20000084 	.word	0x20000084

08000c0c <_malloc_r>:
 8000c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c0e:	1ccd      	adds	r5, r1, #3
 8000c10:	f025 0503 	bic.w	r5, r5, #3
 8000c14:	3508      	adds	r5, #8
 8000c16:	2d0c      	cmp	r5, #12
 8000c18:	bf38      	it	cc
 8000c1a:	250c      	movcc	r5, #12
 8000c1c:	2d00      	cmp	r5, #0
 8000c1e:	4606      	mov	r6, r0
 8000c20:	db01      	blt.n	8000c26 <_malloc_r+0x1a>
 8000c22:	42a9      	cmp	r1, r5
 8000c24:	d903      	bls.n	8000c2e <_malloc_r+0x22>
 8000c26:	230c      	movs	r3, #12
 8000c28:	6033      	str	r3, [r6, #0]
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c2e:	f000 f8f1 	bl	8000e14 <__malloc_lock>
 8000c32:	4921      	ldr	r1, [pc, #132]	; (8000cb8 <_malloc_r+0xac>)
 8000c34:	680a      	ldr	r2, [r1, #0]
 8000c36:	4614      	mov	r4, r2
 8000c38:	b99c      	cbnz	r4, 8000c62 <_malloc_r+0x56>
 8000c3a:	4f20      	ldr	r7, [pc, #128]	; (8000cbc <_malloc_r+0xb0>)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	b923      	cbnz	r3, 8000c4a <_malloc_r+0x3e>
 8000c40:	4621      	mov	r1, r4
 8000c42:	4630      	mov	r0, r6
 8000c44:	f000 f83c 	bl	8000cc0 <_sbrk_r>
 8000c48:	6038      	str	r0, [r7, #0]
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	4630      	mov	r0, r6
 8000c4e:	f000 f837 	bl	8000cc0 <_sbrk_r>
 8000c52:	1c43      	adds	r3, r0, #1
 8000c54:	d123      	bne.n	8000c9e <_malloc_r+0x92>
 8000c56:	230c      	movs	r3, #12
 8000c58:	6033      	str	r3, [r6, #0]
 8000c5a:	4630      	mov	r0, r6
 8000c5c:	f000 f8e0 	bl	8000e20 <__malloc_unlock>
 8000c60:	e7e3      	b.n	8000c2a <_malloc_r+0x1e>
 8000c62:	6823      	ldr	r3, [r4, #0]
 8000c64:	1b5b      	subs	r3, r3, r5
 8000c66:	d417      	bmi.n	8000c98 <_malloc_r+0x8c>
 8000c68:	2b0b      	cmp	r3, #11
 8000c6a:	d903      	bls.n	8000c74 <_malloc_r+0x68>
 8000c6c:	6023      	str	r3, [r4, #0]
 8000c6e:	441c      	add	r4, r3
 8000c70:	6025      	str	r5, [r4, #0]
 8000c72:	e004      	b.n	8000c7e <_malloc_r+0x72>
 8000c74:	6863      	ldr	r3, [r4, #4]
 8000c76:	42a2      	cmp	r2, r4
 8000c78:	bf0c      	ite	eq
 8000c7a:	600b      	streq	r3, [r1, #0]
 8000c7c:	6053      	strne	r3, [r2, #4]
 8000c7e:	4630      	mov	r0, r6
 8000c80:	f000 f8ce 	bl	8000e20 <__malloc_unlock>
 8000c84:	f104 000b 	add.w	r0, r4, #11
 8000c88:	1d23      	adds	r3, r4, #4
 8000c8a:	f020 0007 	bic.w	r0, r0, #7
 8000c8e:	1ac2      	subs	r2, r0, r3
 8000c90:	d0cc      	beq.n	8000c2c <_malloc_r+0x20>
 8000c92:	1a1b      	subs	r3, r3, r0
 8000c94:	50a3      	str	r3, [r4, r2]
 8000c96:	e7c9      	b.n	8000c2c <_malloc_r+0x20>
 8000c98:	4622      	mov	r2, r4
 8000c9a:	6864      	ldr	r4, [r4, #4]
 8000c9c:	e7cc      	b.n	8000c38 <_malloc_r+0x2c>
 8000c9e:	1cc4      	adds	r4, r0, #3
 8000ca0:	f024 0403 	bic.w	r4, r4, #3
 8000ca4:	42a0      	cmp	r0, r4
 8000ca6:	d0e3      	beq.n	8000c70 <_malloc_r+0x64>
 8000ca8:	1a21      	subs	r1, r4, r0
 8000caa:	4630      	mov	r0, r6
 8000cac:	f000 f808 	bl	8000cc0 <_sbrk_r>
 8000cb0:	3001      	adds	r0, #1
 8000cb2:	d1dd      	bne.n	8000c70 <_malloc_r+0x64>
 8000cb4:	e7cf      	b.n	8000c56 <_malloc_r+0x4a>
 8000cb6:	bf00      	nop
 8000cb8:	20000084 	.word	0x20000084
 8000cbc:	20000088 	.word	0x20000088

08000cc0 <_sbrk_r>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	4d06      	ldr	r5, [pc, #24]	; (8000cdc <_sbrk_r+0x1c>)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	4608      	mov	r0, r1
 8000cca:	602b      	str	r3, [r5, #0]
 8000ccc:	f7ff fb74 	bl	80003b8 <_sbrk>
 8000cd0:	1c43      	adds	r3, r0, #1
 8000cd2:	d102      	bne.n	8000cda <_sbrk_r+0x1a>
 8000cd4:	682b      	ldr	r3, [r5, #0]
 8000cd6:	b103      	cbz	r3, 8000cda <_sbrk_r+0x1a>
 8000cd8:	6023      	str	r3, [r4, #0]
 8000cda:	bd38      	pop	{r3, r4, r5, pc}
 8000cdc:	20000098 	.word	0x20000098

08000ce0 <__sread>:
 8000ce0:	b510      	push	{r4, lr}
 8000ce2:	460c      	mov	r4, r1
 8000ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ce8:	f000 f8a0 	bl	8000e2c <_read_r>
 8000cec:	2800      	cmp	r0, #0
 8000cee:	bfab      	itete	ge
 8000cf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000cf2:	89a3      	ldrhlt	r3, [r4, #12]
 8000cf4:	181b      	addge	r3, r3, r0
 8000cf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000cfa:	bfac      	ite	ge
 8000cfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8000cfe:	81a3      	strhlt	r3, [r4, #12]
 8000d00:	bd10      	pop	{r4, pc}

08000d02 <__swrite>:
 8000d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d06:	461f      	mov	r7, r3
 8000d08:	898b      	ldrh	r3, [r1, #12]
 8000d0a:	05db      	lsls	r3, r3, #23
 8000d0c:	4605      	mov	r5, r0
 8000d0e:	460c      	mov	r4, r1
 8000d10:	4616      	mov	r6, r2
 8000d12:	d505      	bpl.n	8000d20 <__swrite+0x1e>
 8000d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d18:	2302      	movs	r3, #2
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f000 f868 	bl	8000df0 <_lseek_r>
 8000d20:	89a3      	ldrh	r3, [r4, #12]
 8000d22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d2a:	81a3      	strh	r3, [r4, #12]
 8000d2c:	4632      	mov	r2, r6
 8000d2e:	463b      	mov	r3, r7
 8000d30:	4628      	mov	r0, r5
 8000d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d36:	f000 b817 	b.w	8000d68 <_write_r>

08000d3a <__sseek>:
 8000d3a:	b510      	push	{r4, lr}
 8000d3c:	460c      	mov	r4, r1
 8000d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d42:	f000 f855 	bl	8000df0 <_lseek_r>
 8000d46:	1c43      	adds	r3, r0, #1
 8000d48:	89a3      	ldrh	r3, [r4, #12]
 8000d4a:	bf15      	itete	ne
 8000d4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8000d4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000d52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000d56:	81a3      	strheq	r3, [r4, #12]
 8000d58:	bf18      	it	ne
 8000d5a:	81a3      	strhne	r3, [r4, #12]
 8000d5c:	bd10      	pop	{r4, pc}

08000d5e <__sclose>:
 8000d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d62:	f000 b813 	b.w	8000d8c <_close_r>
	...

08000d68 <_write_r>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	4d07      	ldr	r5, [pc, #28]	; (8000d88 <_write_r+0x20>)
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	4611      	mov	r1, r2
 8000d72:	2200      	movs	r2, #0
 8000d74:	602a      	str	r2, [r5, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	f7ff fad1 	bl	800031e <_write>
 8000d7c:	1c43      	adds	r3, r0, #1
 8000d7e:	d102      	bne.n	8000d86 <_write_r+0x1e>
 8000d80:	682b      	ldr	r3, [r5, #0]
 8000d82:	b103      	cbz	r3, 8000d86 <_write_r+0x1e>
 8000d84:	6023      	str	r3, [r4, #0]
 8000d86:	bd38      	pop	{r3, r4, r5, pc}
 8000d88:	20000098 	.word	0x20000098

08000d8c <_close_r>:
 8000d8c:	b538      	push	{r3, r4, r5, lr}
 8000d8e:	4d06      	ldr	r5, [pc, #24]	; (8000da8 <_close_r+0x1c>)
 8000d90:	2300      	movs	r3, #0
 8000d92:	4604      	mov	r4, r0
 8000d94:	4608      	mov	r0, r1
 8000d96:	602b      	str	r3, [r5, #0]
 8000d98:	f7ff fadd 	bl	8000356 <_close>
 8000d9c:	1c43      	adds	r3, r0, #1
 8000d9e:	d102      	bne.n	8000da6 <_close_r+0x1a>
 8000da0:	682b      	ldr	r3, [r5, #0]
 8000da2:	b103      	cbz	r3, 8000da6 <_close_r+0x1a>
 8000da4:	6023      	str	r3, [r4, #0]
 8000da6:	bd38      	pop	{r3, r4, r5, pc}
 8000da8:	20000098 	.word	0x20000098

08000dac <_fstat_r>:
 8000dac:	b538      	push	{r3, r4, r5, lr}
 8000dae:	4d07      	ldr	r5, [pc, #28]	; (8000dcc <_fstat_r+0x20>)
 8000db0:	2300      	movs	r3, #0
 8000db2:	4604      	mov	r4, r0
 8000db4:	4608      	mov	r0, r1
 8000db6:	4611      	mov	r1, r2
 8000db8:	602b      	str	r3, [r5, #0]
 8000dba:	f7ff fad7 	bl	800036c <_fstat>
 8000dbe:	1c43      	adds	r3, r0, #1
 8000dc0:	d102      	bne.n	8000dc8 <_fstat_r+0x1c>
 8000dc2:	682b      	ldr	r3, [r5, #0]
 8000dc4:	b103      	cbz	r3, 8000dc8 <_fstat_r+0x1c>
 8000dc6:	6023      	str	r3, [r4, #0]
 8000dc8:	bd38      	pop	{r3, r4, r5, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000098 	.word	0x20000098

08000dd0 <_isatty_r>:
 8000dd0:	b538      	push	{r3, r4, r5, lr}
 8000dd2:	4d06      	ldr	r5, [pc, #24]	; (8000dec <_isatty_r+0x1c>)
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	4604      	mov	r4, r0
 8000dd8:	4608      	mov	r0, r1
 8000dda:	602b      	str	r3, [r5, #0]
 8000ddc:	f7ff fad5 	bl	800038a <_isatty>
 8000de0:	1c43      	adds	r3, r0, #1
 8000de2:	d102      	bne.n	8000dea <_isatty_r+0x1a>
 8000de4:	682b      	ldr	r3, [r5, #0]
 8000de6:	b103      	cbz	r3, 8000dea <_isatty_r+0x1a>
 8000de8:	6023      	str	r3, [r4, #0]
 8000dea:	bd38      	pop	{r3, r4, r5, pc}
 8000dec:	20000098 	.word	0x20000098

08000df0 <_lseek_r>:
 8000df0:	b538      	push	{r3, r4, r5, lr}
 8000df2:	4d07      	ldr	r5, [pc, #28]	; (8000e10 <_lseek_r+0x20>)
 8000df4:	4604      	mov	r4, r0
 8000df6:	4608      	mov	r0, r1
 8000df8:	4611      	mov	r1, r2
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	602a      	str	r2, [r5, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	f7ff facd 	bl	800039e <_lseek>
 8000e04:	1c43      	adds	r3, r0, #1
 8000e06:	d102      	bne.n	8000e0e <_lseek_r+0x1e>
 8000e08:	682b      	ldr	r3, [r5, #0]
 8000e0a:	b103      	cbz	r3, 8000e0e <_lseek_r+0x1e>
 8000e0c:	6023      	str	r3, [r4, #0]
 8000e0e:	bd38      	pop	{r3, r4, r5, pc}
 8000e10:	20000098 	.word	0x20000098

08000e14 <__malloc_lock>:
 8000e14:	4801      	ldr	r0, [pc, #4]	; (8000e1c <__malloc_lock+0x8>)
 8000e16:	f7ff be45 	b.w	8000aa4 <__retarget_lock_acquire_recursive>
 8000e1a:	bf00      	nop
 8000e1c:	20000090 	.word	0x20000090

08000e20 <__malloc_unlock>:
 8000e20:	4801      	ldr	r0, [pc, #4]	; (8000e28 <__malloc_unlock+0x8>)
 8000e22:	f7ff be40 	b.w	8000aa6 <__retarget_lock_release_recursive>
 8000e26:	bf00      	nop
 8000e28:	20000090 	.word	0x20000090

08000e2c <_read_r>:
 8000e2c:	b538      	push	{r3, r4, r5, lr}
 8000e2e:	4d07      	ldr	r5, [pc, #28]	; (8000e4c <_read_r+0x20>)
 8000e30:	4604      	mov	r4, r0
 8000e32:	4608      	mov	r0, r1
 8000e34:	4611      	mov	r1, r2
 8000e36:	2200      	movs	r2, #0
 8000e38:	602a      	str	r2, [r5, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	f7ff fa52 	bl	80002e4 <_read>
 8000e40:	1c43      	adds	r3, r0, #1
 8000e42:	d102      	bne.n	8000e4a <_read_r+0x1e>
 8000e44:	682b      	ldr	r3, [r5, #0]
 8000e46:	b103      	cbz	r3, 8000e4a <_read_r+0x1e>
 8000e48:	6023      	str	r3, [r4, #0]
 8000e4a:	bd38      	pop	{r3, r4, r5, pc}
 8000e4c:	20000098 	.word	0x20000098

08000e50 <_init>:
 8000e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e52:	bf00      	nop
 8000e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e56:	bc08      	pop	{r3}
 8000e58:	469e      	mov	lr, r3
 8000e5a:	4770      	bx	lr

08000e5c <_fini>:
 8000e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e5e:	bf00      	nop
 8000e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e62:	bc08      	pop	{r3}
 8000e64:	469e      	mov	lr, r3
 8000e66:	4770      	bx	lr
