
Section04_access_levels.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bec  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08000db0  08000db0  00010db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e88  08000e88  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08000e88  08000e88  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e88  08000e88  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e88  08000e88  00010e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e8c  08000e8c  00010e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08000e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000064  08000ef4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08000ef4  00020090  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000215a  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000602  00000000  00000000  000221e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000138  00000000  00000000  000227f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000100  00000000  00000000  00022928  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002a92  00000000  00000000  00022a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000012ef  00000000  00000000  000254ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009162  00000000  00000000  000267a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002f90b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000009a4  00000000  00000000  0002f988  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000d98 	.word	0x08000d98

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	08000d98 	.word	0x08000d98

08000204 <generate_interrupt>:
#include<stdio.h>
#include<stdint.h>

/* This function executes in THREAD MODE of the processor */
void generate_interrupt()
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
	//these control register addresses cannot be changed in unprivileged mode.
	//any attempt to change contents in unpriv access level will result in processor fault exception
	uint32_t *pSTIR  = (uint32_t*)0xE000EF00;
 800020a:	4b09      	ldr	r3, [pc, #36]	; (8000230 <generate_interrupt+0x2c>)
 800020c:	607b      	str	r3, [r7, #4]
	uint32_t *pISER0 = (uint32_t*)0xE000E100;
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <generate_interrupt+0x30>)
 8000210:	603b      	str	r3, [r7, #0]

	//enable IRQ3 interrupt
	*pISER0 |= ( 1 << 3);   //ISER = interrupt set-enable register
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f043 0208 	orr.w	r2, r3, #8
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	601a      	str	r2, [r3, #0]

	//generate an interrupt from software for IRQ3
	*pSTIR = (3 & 0x1FF); //STIR = Software Trigger Interrupt Register
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	2203      	movs	r2, #3
 8000222:	601a      	str	r2, [r3, #0]

}
 8000224:	bf00      	nop
 8000226:	370c      	adds	r7, #12
 8000228:	46bd      	mov	sp, r7
 800022a:	bc80      	pop	{r7}
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	e000ef00 	.word	0xe000ef00
 8000234:	e000e100 	.word	0xe000e100

08000238 <change_access_level_unpriv>:

void change_access_level_unpriv(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
	//read
	__asm volatile ("MRS R0,CONTROL");
 800023c:	f3ef 8014 	mrs	r0, CONTROL
	//modify
	__asm volatile ("ORR R0,R0,#0x01");
 8000240:	f040 0001 	orr.w	r0, r0, #1
	//write
	__asm volatile ("MSR CONTROL,R0");
 8000244:	f380 8814 	msr	CONTROL, r0
}
 8000248:	bf00      	nop
 800024a:	46bd      	mov	sp, r7
 800024c:	bc80      	pop	{r7}
 800024e:	4770      	bx	lr

08000250 <main>:


/* This function executes in THREAD MODE of the processor */
int main(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	printf("In thread mode : before interrupt\n");
 8000254:	4805      	ldr	r0, [pc, #20]	; (800026c <main+0x1c>)
 8000256:	f000 f993 	bl	8000580 <puts>
	//user task should not modify system level settings of processor
	//user task should not trigger or turn off interrupts
	//before running user task, the kernel can change access level to unpriv then it can launch user task
	//if the unpriv code wants any services, then it can trigger syscall which is serviced by the kernel code

	change_access_level_unpriv();
 800025a:	f7ff ffed 	bl	8000238 <change_access_level_unpriv>

	generate_interrupt();
 800025e:	f7ff ffd1 	bl	8000204 <generate_interrupt>

	printf("In thread mode : after interrupt\n");
 8000262:	4803      	ldr	r0, [pc, #12]	; (8000270 <main+0x20>)
 8000264:	f000 f98c 	bl	8000580 <puts>
	// ISR always is privileged access level (control = 0)
	// to change back to privilege you have to trigger interrupt or system exception
	// then go to Handler mode to modify control = 1 there, then return to thread mode


	for(;;);
 8000268:	e7fe      	b.n	8000268 <main+0x18>
 800026a:	bf00      	nop
 800026c:	08000db0 	.word	0x08000db0
 8000270:	08000dd4 	.word	0x08000dd4

08000274 <RTC_WKUP_IRQHandler>:
}

/* This function(ISR) executes in HANDLER MODE of the processor */
void RTC_WKUP_IRQHandler(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	printf("In handler mode : ISR\n");
 8000278:	4802      	ldr	r0, [pc, #8]	; (8000284 <RTC_WKUP_IRQHandler+0x10>)
 800027a:	f000 f981 	bl	8000580 <puts>
}
 800027e:	bf00      	nop
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	08000df8 	.word	0x08000df8

08000288 <HardFault_Handler>:

/* fault handler catches exception */
void HardFault_Handler(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	printf("Hard fault detected\n");
 800028c:	4801      	ldr	r0, [pc, #4]	; (8000294 <HardFault_Handler+0xc>)
 800028e:	f000 f977 	bl	8000580 <puts>
	while(1);
 8000292:	e7fe      	b.n	8000292 <HardFault_Handler+0xa>
 8000294:	08000e10 	.word	0x08000e10

08000298 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80002a2:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <ITM_SendChar+0x44>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a0d      	ldr	r2, [pc, #52]	; (80002dc <ITM_SendChar+0x44>)
 80002a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002ac:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80002ae:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <ITM_SendChar+0x48>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a0b      	ldr	r2, [pc, #44]	; (80002e0 <ITM_SendChar+0x48>)
 80002b4:	f043 0301 	orr.w	r3, r3, #1
 80002b8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80002ba:	bf00      	nop
 80002bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f003 0301 	and.w	r3, r3, #1
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d0f8      	beq.n	80002bc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80002ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	6013      	str	r3, [r2, #0]
}
 80002d2:	bf00      	nop
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	e000edfc 	.word	0xe000edfc
 80002e0:	e0000e00 	.word	0xe0000e00

080002e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b086      	sub	sp, #24
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	60f8      	str	r0, [r7, #12]
 80002ec:	60b9      	str	r1, [r7, #8]
 80002ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002f0:	2300      	movs	r3, #0
 80002f2:	617b      	str	r3, [r7, #20]
 80002f4:	e00a      	b.n	800030c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80002f6:	f3af 8000 	nop.w
 80002fa:	4601      	mov	r1, r0
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	1c5a      	adds	r2, r3, #1
 8000300:	60ba      	str	r2, [r7, #8]
 8000302:	b2ca      	uxtb	r2, r1
 8000304:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	3301      	adds	r3, #1
 800030a:	617b      	str	r3, [r7, #20]
 800030c:	697a      	ldr	r2, [r7, #20]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	429a      	cmp	r2, r3
 8000312:	dbf0      	blt.n	80002f6 <_read+0x12>
	}

return len;
 8000314:	687b      	ldr	r3, [r7, #4]
}
 8000316:	4618      	mov	r0, r3
 8000318:	3718      	adds	r7, #24
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}

0800031e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800031e:	b580      	push	{r7, lr}
 8000320:	b086      	sub	sp, #24
 8000322:	af00      	add	r7, sp, #0
 8000324:	60f8      	str	r0, [r7, #12]
 8000326:	60b9      	str	r1, [r7, #8]
 8000328:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800032a:	2300      	movs	r3, #0
 800032c:	617b      	str	r3, [r7, #20]
 800032e:	e009      	b.n	8000344 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	1c5a      	adds	r2, r3, #1
 8000334:	60ba      	str	r2, [r7, #8]
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	4618      	mov	r0, r3
 800033a:	f7ff ffad 	bl	8000298 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	3301      	adds	r3, #1
 8000342:	617b      	str	r3, [r7, #20]
 8000344:	697a      	ldr	r2, [r7, #20]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	429a      	cmp	r2, r3
 800034a:	dbf1      	blt.n	8000330 <_write+0x12>
	}
	return len;
 800034c:	687b      	ldr	r3, [r7, #4]
}
 800034e:	4618      	mov	r0, r3
 8000350:	3718      	adds	r7, #24
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}

08000356 <_close>:

int _close(int file)
{
 8000356:	b480      	push	{r7}
 8000358:	b083      	sub	sp, #12
 800035a:	af00      	add	r7, sp, #0
 800035c:	6078      	str	r0, [r7, #4]
	return -1;
 800035e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000362:	4618      	mov	r0, r3
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr

0800036c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800037c:	605a      	str	r2, [r3, #4]
	return 0;
 800037e:	2300      	movs	r3, #0
}
 8000380:	4618      	mov	r0, r3
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	bc80      	pop	{r7}
 8000388:	4770      	bx	lr

0800038a <_isatty>:

int _isatty(int file)
{
 800038a:	b480      	push	{r7}
 800038c:	b083      	sub	sp, #12
 800038e:	af00      	add	r7, sp, #0
 8000390:	6078      	str	r0, [r7, #4]
	return 1;
 8000392:	2301      	movs	r3, #1
}
 8000394:	4618      	mov	r0, r3
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr

0800039e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800039e:	b480      	push	{r7}
 80003a0:	b085      	sub	sp, #20
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	60f8      	str	r0, [r7, #12]
 80003a6:	60b9      	str	r1, [r7, #8]
 80003a8:	607a      	str	r2, [r7, #4]
	return 0;
 80003aa:	2300      	movs	r3, #0
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	3714      	adds	r7, #20
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr
	...

080003b8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80003c0:	4b11      	ldr	r3, [pc, #68]	; (8000408 <_sbrk+0x50>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d102      	bne.n	80003ce <_sbrk+0x16>
		heap_end = &end;
 80003c8:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <_sbrk+0x50>)
 80003ca:	4a10      	ldr	r2, [pc, #64]	; (800040c <_sbrk+0x54>)
 80003cc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <_sbrk+0x50>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <_sbrk+0x50>)
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4413      	add	r3, r2
 80003dc:	466a      	mov	r2, sp
 80003de:	4293      	cmp	r3, r2
 80003e0:	d907      	bls.n	80003f2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80003e2:	f000 f83f 	bl	8000464 <__errno>
 80003e6:	4602      	mov	r2, r0
 80003e8:	230c      	movs	r3, #12
 80003ea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80003ec:	f04f 33ff 	mov.w	r3, #4294967295
 80003f0:	e006      	b.n	8000400 <_sbrk+0x48>
	}

	heap_end += incr;
 80003f2:	4b05      	ldr	r3, [pc, #20]	; (8000408 <_sbrk+0x50>)
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4413      	add	r3, r2
 80003fa:	4a03      	ldr	r2, [pc, #12]	; (8000408 <_sbrk+0x50>)
 80003fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80003fe:	68fb      	ldr	r3, [r7, #12]
}
 8000400:	4618      	mov	r0, r3
 8000402:	3710      	adds	r7, #16
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000080 	.word	0x20000080
 800040c:	20000090 	.word	0x20000090

08000410 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000410:	480d      	ldr	r0, [pc, #52]	; (8000448 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000412:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000414:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000418:	480c      	ldr	r0, [pc, #48]	; (800044c <LoopForever+0x6>)
  ldr r1, =_edata
 800041a:	490d      	ldr	r1, [pc, #52]	; (8000450 <LoopForever+0xa>)
  ldr r2, =_sidata
 800041c:	4a0d      	ldr	r2, [pc, #52]	; (8000454 <LoopForever+0xe>)
  movs r3, #0
 800041e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000420:	e002      	b.n	8000428 <LoopCopyDataInit>

08000422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000426:	3304      	adds	r3, #4

08000428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800042a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800042c:	d3f9      	bcc.n	8000422 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800042e:	4a0a      	ldr	r2, [pc, #40]	; (8000458 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000430:	4c0a      	ldr	r4, [pc, #40]	; (800045c <LoopForever+0x16>)
  movs r3, #0
 8000432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000434:	e001      	b.n	800043a <LoopFillZerobss>

08000436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000438:	3204      	adds	r2, #4

0800043a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800043a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800043c:	d3fb      	bcc.n	8000436 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800043e:	f000 f817 	bl	8000470 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000442:	f7ff ff05 	bl	8000250 <main>

08000446 <LoopForever>:

LoopForever:
    b LoopForever
 8000446:	e7fe      	b.n	8000446 <LoopForever>
  ldr   r0, =_estack
 8000448:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800044c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000450:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000454:	08000e90 	.word	0x08000e90
  ldr r2, =_sbss
 8000458:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800045c:	20000090 	.word	0x20000090

08000460 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000460:	e7fe      	b.n	8000460 <ADC_IRQHandler>
	...

08000464 <__errno>:
 8000464:	4b01      	ldr	r3, [pc, #4]	; (800046c <__errno+0x8>)
 8000466:	6818      	ldr	r0, [r3, #0]
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	20000000 	.word	0x20000000

08000470 <__libc_init_array>:
 8000470:	b570      	push	{r4, r5, r6, lr}
 8000472:	4e0d      	ldr	r6, [pc, #52]	; (80004a8 <__libc_init_array+0x38>)
 8000474:	4c0d      	ldr	r4, [pc, #52]	; (80004ac <__libc_init_array+0x3c>)
 8000476:	1ba4      	subs	r4, r4, r6
 8000478:	10a4      	asrs	r4, r4, #2
 800047a:	2500      	movs	r5, #0
 800047c:	42a5      	cmp	r5, r4
 800047e:	d109      	bne.n	8000494 <__libc_init_array+0x24>
 8000480:	4e0b      	ldr	r6, [pc, #44]	; (80004b0 <__libc_init_array+0x40>)
 8000482:	4c0c      	ldr	r4, [pc, #48]	; (80004b4 <__libc_init_array+0x44>)
 8000484:	f000 fc88 	bl	8000d98 <_init>
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	10a4      	asrs	r4, r4, #2
 800048c:	2500      	movs	r5, #0
 800048e:	42a5      	cmp	r5, r4
 8000490:	d105      	bne.n	800049e <__libc_init_array+0x2e>
 8000492:	bd70      	pop	{r4, r5, r6, pc}
 8000494:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000498:	4798      	blx	r3
 800049a:	3501      	adds	r5, #1
 800049c:	e7ee      	b.n	800047c <__libc_init_array+0xc>
 800049e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004a2:	4798      	blx	r3
 80004a4:	3501      	adds	r5, #1
 80004a6:	e7f2      	b.n	800048e <__libc_init_array+0x1e>
 80004a8:	08000e88 	.word	0x08000e88
 80004ac:	08000e88 	.word	0x08000e88
 80004b0:	08000e88 	.word	0x08000e88
 80004b4:	08000e8c 	.word	0x08000e8c

080004b8 <memset>:
 80004b8:	4402      	add	r2, r0
 80004ba:	4603      	mov	r3, r0
 80004bc:	4293      	cmp	r3, r2
 80004be:	d100      	bne.n	80004c2 <memset+0xa>
 80004c0:	4770      	bx	lr
 80004c2:	f803 1b01 	strb.w	r1, [r3], #1
 80004c6:	e7f9      	b.n	80004bc <memset+0x4>

080004c8 <_puts_r>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	460e      	mov	r6, r1
 80004cc:	4605      	mov	r5, r0
 80004ce:	b118      	cbz	r0, 80004d8 <_puts_r+0x10>
 80004d0:	6983      	ldr	r3, [r0, #24]
 80004d2:	b90b      	cbnz	r3, 80004d8 <_puts_r+0x10>
 80004d4:	f000 fa0c 	bl	80008f0 <__sinit>
 80004d8:	69ab      	ldr	r3, [r5, #24]
 80004da:	68ac      	ldr	r4, [r5, #8]
 80004dc:	b913      	cbnz	r3, 80004e4 <_puts_r+0x1c>
 80004de:	4628      	mov	r0, r5
 80004e0:	f000 fa06 	bl	80008f0 <__sinit>
 80004e4:	4b23      	ldr	r3, [pc, #140]	; (8000574 <_puts_r+0xac>)
 80004e6:	429c      	cmp	r4, r3
 80004e8:	d117      	bne.n	800051a <_puts_r+0x52>
 80004ea:	686c      	ldr	r4, [r5, #4]
 80004ec:	89a3      	ldrh	r3, [r4, #12]
 80004ee:	071b      	lsls	r3, r3, #28
 80004f0:	d51d      	bpl.n	800052e <_puts_r+0x66>
 80004f2:	6923      	ldr	r3, [r4, #16]
 80004f4:	b1db      	cbz	r3, 800052e <_puts_r+0x66>
 80004f6:	3e01      	subs	r6, #1
 80004f8:	68a3      	ldr	r3, [r4, #8]
 80004fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80004fe:	3b01      	subs	r3, #1
 8000500:	60a3      	str	r3, [r4, #8]
 8000502:	b9e9      	cbnz	r1, 8000540 <_puts_r+0x78>
 8000504:	2b00      	cmp	r3, #0
 8000506:	da2e      	bge.n	8000566 <_puts_r+0x9e>
 8000508:	4622      	mov	r2, r4
 800050a:	210a      	movs	r1, #10
 800050c:	4628      	mov	r0, r5
 800050e:	f000 f83f 	bl	8000590 <__swbuf_r>
 8000512:	3001      	adds	r0, #1
 8000514:	d011      	beq.n	800053a <_puts_r+0x72>
 8000516:	200a      	movs	r0, #10
 8000518:	e011      	b.n	800053e <_puts_r+0x76>
 800051a:	4b17      	ldr	r3, [pc, #92]	; (8000578 <_puts_r+0xb0>)
 800051c:	429c      	cmp	r4, r3
 800051e:	d101      	bne.n	8000524 <_puts_r+0x5c>
 8000520:	68ac      	ldr	r4, [r5, #8]
 8000522:	e7e3      	b.n	80004ec <_puts_r+0x24>
 8000524:	4b15      	ldr	r3, [pc, #84]	; (800057c <_puts_r+0xb4>)
 8000526:	429c      	cmp	r4, r3
 8000528:	bf08      	it	eq
 800052a:	68ec      	ldreq	r4, [r5, #12]
 800052c:	e7de      	b.n	80004ec <_puts_r+0x24>
 800052e:	4621      	mov	r1, r4
 8000530:	4628      	mov	r0, r5
 8000532:	f000 f87f 	bl	8000634 <__swsetup_r>
 8000536:	2800      	cmp	r0, #0
 8000538:	d0dd      	beq.n	80004f6 <_puts_r+0x2e>
 800053a:	f04f 30ff 	mov.w	r0, #4294967295
 800053e:	bd70      	pop	{r4, r5, r6, pc}
 8000540:	2b00      	cmp	r3, #0
 8000542:	da04      	bge.n	800054e <_puts_r+0x86>
 8000544:	69a2      	ldr	r2, [r4, #24]
 8000546:	429a      	cmp	r2, r3
 8000548:	dc06      	bgt.n	8000558 <_puts_r+0x90>
 800054a:	290a      	cmp	r1, #10
 800054c:	d004      	beq.n	8000558 <_puts_r+0x90>
 800054e:	6823      	ldr	r3, [r4, #0]
 8000550:	1c5a      	adds	r2, r3, #1
 8000552:	6022      	str	r2, [r4, #0]
 8000554:	7019      	strb	r1, [r3, #0]
 8000556:	e7cf      	b.n	80004f8 <_puts_r+0x30>
 8000558:	4622      	mov	r2, r4
 800055a:	4628      	mov	r0, r5
 800055c:	f000 f818 	bl	8000590 <__swbuf_r>
 8000560:	3001      	adds	r0, #1
 8000562:	d1c9      	bne.n	80004f8 <_puts_r+0x30>
 8000564:	e7e9      	b.n	800053a <_puts_r+0x72>
 8000566:	6823      	ldr	r3, [r4, #0]
 8000568:	200a      	movs	r0, #10
 800056a:	1c5a      	adds	r2, r3, #1
 800056c:	6022      	str	r2, [r4, #0]
 800056e:	7018      	strb	r0, [r3, #0]
 8000570:	e7e5      	b.n	800053e <_puts_r+0x76>
 8000572:	bf00      	nop
 8000574:	08000e48 	.word	0x08000e48
 8000578:	08000e68 	.word	0x08000e68
 800057c:	08000e28 	.word	0x08000e28

08000580 <puts>:
 8000580:	4b02      	ldr	r3, [pc, #8]	; (800058c <puts+0xc>)
 8000582:	4601      	mov	r1, r0
 8000584:	6818      	ldr	r0, [r3, #0]
 8000586:	f7ff bf9f 	b.w	80004c8 <_puts_r>
 800058a:	bf00      	nop
 800058c:	20000000 	.word	0x20000000

08000590 <__swbuf_r>:
 8000590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000592:	460e      	mov	r6, r1
 8000594:	4614      	mov	r4, r2
 8000596:	4605      	mov	r5, r0
 8000598:	b118      	cbz	r0, 80005a2 <__swbuf_r+0x12>
 800059a:	6983      	ldr	r3, [r0, #24]
 800059c:	b90b      	cbnz	r3, 80005a2 <__swbuf_r+0x12>
 800059e:	f000 f9a7 	bl	80008f0 <__sinit>
 80005a2:	4b21      	ldr	r3, [pc, #132]	; (8000628 <__swbuf_r+0x98>)
 80005a4:	429c      	cmp	r4, r3
 80005a6:	d12a      	bne.n	80005fe <__swbuf_r+0x6e>
 80005a8:	686c      	ldr	r4, [r5, #4]
 80005aa:	69a3      	ldr	r3, [r4, #24]
 80005ac:	60a3      	str	r3, [r4, #8]
 80005ae:	89a3      	ldrh	r3, [r4, #12]
 80005b0:	071a      	lsls	r2, r3, #28
 80005b2:	d52e      	bpl.n	8000612 <__swbuf_r+0x82>
 80005b4:	6923      	ldr	r3, [r4, #16]
 80005b6:	b363      	cbz	r3, 8000612 <__swbuf_r+0x82>
 80005b8:	6923      	ldr	r3, [r4, #16]
 80005ba:	6820      	ldr	r0, [r4, #0]
 80005bc:	1ac0      	subs	r0, r0, r3
 80005be:	6963      	ldr	r3, [r4, #20]
 80005c0:	b2f6      	uxtb	r6, r6
 80005c2:	4283      	cmp	r3, r0
 80005c4:	4637      	mov	r7, r6
 80005c6:	dc04      	bgt.n	80005d2 <__swbuf_r+0x42>
 80005c8:	4621      	mov	r1, r4
 80005ca:	4628      	mov	r0, r5
 80005cc:	f000 f926 	bl	800081c <_fflush_r>
 80005d0:	bb28      	cbnz	r0, 800061e <__swbuf_r+0x8e>
 80005d2:	68a3      	ldr	r3, [r4, #8]
 80005d4:	3b01      	subs	r3, #1
 80005d6:	60a3      	str	r3, [r4, #8]
 80005d8:	6823      	ldr	r3, [r4, #0]
 80005da:	1c5a      	adds	r2, r3, #1
 80005dc:	6022      	str	r2, [r4, #0]
 80005de:	701e      	strb	r6, [r3, #0]
 80005e0:	6963      	ldr	r3, [r4, #20]
 80005e2:	3001      	adds	r0, #1
 80005e4:	4283      	cmp	r3, r0
 80005e6:	d004      	beq.n	80005f2 <__swbuf_r+0x62>
 80005e8:	89a3      	ldrh	r3, [r4, #12]
 80005ea:	07db      	lsls	r3, r3, #31
 80005ec:	d519      	bpl.n	8000622 <__swbuf_r+0x92>
 80005ee:	2e0a      	cmp	r6, #10
 80005f0:	d117      	bne.n	8000622 <__swbuf_r+0x92>
 80005f2:	4621      	mov	r1, r4
 80005f4:	4628      	mov	r0, r5
 80005f6:	f000 f911 	bl	800081c <_fflush_r>
 80005fa:	b190      	cbz	r0, 8000622 <__swbuf_r+0x92>
 80005fc:	e00f      	b.n	800061e <__swbuf_r+0x8e>
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <__swbuf_r+0x9c>)
 8000600:	429c      	cmp	r4, r3
 8000602:	d101      	bne.n	8000608 <__swbuf_r+0x78>
 8000604:	68ac      	ldr	r4, [r5, #8]
 8000606:	e7d0      	b.n	80005aa <__swbuf_r+0x1a>
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <__swbuf_r+0xa0>)
 800060a:	429c      	cmp	r4, r3
 800060c:	bf08      	it	eq
 800060e:	68ec      	ldreq	r4, [r5, #12]
 8000610:	e7cb      	b.n	80005aa <__swbuf_r+0x1a>
 8000612:	4621      	mov	r1, r4
 8000614:	4628      	mov	r0, r5
 8000616:	f000 f80d 	bl	8000634 <__swsetup_r>
 800061a:	2800      	cmp	r0, #0
 800061c:	d0cc      	beq.n	80005b8 <__swbuf_r+0x28>
 800061e:	f04f 37ff 	mov.w	r7, #4294967295
 8000622:	4638      	mov	r0, r7
 8000624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000626:	bf00      	nop
 8000628:	08000e48 	.word	0x08000e48
 800062c:	08000e68 	.word	0x08000e68
 8000630:	08000e28 	.word	0x08000e28

08000634 <__swsetup_r>:
 8000634:	4b32      	ldr	r3, [pc, #200]	; (8000700 <__swsetup_r+0xcc>)
 8000636:	b570      	push	{r4, r5, r6, lr}
 8000638:	681d      	ldr	r5, [r3, #0]
 800063a:	4606      	mov	r6, r0
 800063c:	460c      	mov	r4, r1
 800063e:	b125      	cbz	r5, 800064a <__swsetup_r+0x16>
 8000640:	69ab      	ldr	r3, [r5, #24]
 8000642:	b913      	cbnz	r3, 800064a <__swsetup_r+0x16>
 8000644:	4628      	mov	r0, r5
 8000646:	f000 f953 	bl	80008f0 <__sinit>
 800064a:	4b2e      	ldr	r3, [pc, #184]	; (8000704 <__swsetup_r+0xd0>)
 800064c:	429c      	cmp	r4, r3
 800064e:	d10f      	bne.n	8000670 <__swsetup_r+0x3c>
 8000650:	686c      	ldr	r4, [r5, #4]
 8000652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000656:	b29a      	uxth	r2, r3
 8000658:	0715      	lsls	r5, r2, #28
 800065a:	d42c      	bmi.n	80006b6 <__swsetup_r+0x82>
 800065c:	06d0      	lsls	r0, r2, #27
 800065e:	d411      	bmi.n	8000684 <__swsetup_r+0x50>
 8000660:	2209      	movs	r2, #9
 8000662:	6032      	str	r2, [r6, #0]
 8000664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000668:	81a3      	strh	r3, [r4, #12]
 800066a:	f04f 30ff 	mov.w	r0, #4294967295
 800066e:	e03e      	b.n	80006ee <__swsetup_r+0xba>
 8000670:	4b25      	ldr	r3, [pc, #148]	; (8000708 <__swsetup_r+0xd4>)
 8000672:	429c      	cmp	r4, r3
 8000674:	d101      	bne.n	800067a <__swsetup_r+0x46>
 8000676:	68ac      	ldr	r4, [r5, #8]
 8000678:	e7eb      	b.n	8000652 <__swsetup_r+0x1e>
 800067a:	4b24      	ldr	r3, [pc, #144]	; (800070c <__swsetup_r+0xd8>)
 800067c:	429c      	cmp	r4, r3
 800067e:	bf08      	it	eq
 8000680:	68ec      	ldreq	r4, [r5, #12]
 8000682:	e7e6      	b.n	8000652 <__swsetup_r+0x1e>
 8000684:	0751      	lsls	r1, r2, #29
 8000686:	d512      	bpl.n	80006ae <__swsetup_r+0x7a>
 8000688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800068a:	b141      	cbz	r1, 800069e <__swsetup_r+0x6a>
 800068c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000690:	4299      	cmp	r1, r3
 8000692:	d002      	beq.n	800069a <__swsetup_r+0x66>
 8000694:	4630      	mov	r0, r6
 8000696:	f000 fa19 	bl	8000acc <_free_r>
 800069a:	2300      	movs	r3, #0
 800069c:	6363      	str	r3, [r4, #52]	; 0x34
 800069e:	89a3      	ldrh	r3, [r4, #12]
 80006a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80006a4:	81a3      	strh	r3, [r4, #12]
 80006a6:	2300      	movs	r3, #0
 80006a8:	6063      	str	r3, [r4, #4]
 80006aa:	6923      	ldr	r3, [r4, #16]
 80006ac:	6023      	str	r3, [r4, #0]
 80006ae:	89a3      	ldrh	r3, [r4, #12]
 80006b0:	f043 0308 	orr.w	r3, r3, #8
 80006b4:	81a3      	strh	r3, [r4, #12]
 80006b6:	6923      	ldr	r3, [r4, #16]
 80006b8:	b94b      	cbnz	r3, 80006ce <__swsetup_r+0x9a>
 80006ba:	89a3      	ldrh	r3, [r4, #12]
 80006bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80006c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006c4:	d003      	beq.n	80006ce <__swsetup_r+0x9a>
 80006c6:	4621      	mov	r1, r4
 80006c8:	4630      	mov	r0, r6
 80006ca:	f000 f9bf 	bl	8000a4c <__smakebuf_r>
 80006ce:	89a2      	ldrh	r2, [r4, #12]
 80006d0:	f012 0301 	ands.w	r3, r2, #1
 80006d4:	d00c      	beq.n	80006f0 <__swsetup_r+0xbc>
 80006d6:	2300      	movs	r3, #0
 80006d8:	60a3      	str	r3, [r4, #8]
 80006da:	6963      	ldr	r3, [r4, #20]
 80006dc:	425b      	negs	r3, r3
 80006de:	61a3      	str	r3, [r4, #24]
 80006e0:	6923      	ldr	r3, [r4, #16]
 80006e2:	b953      	cbnz	r3, 80006fa <__swsetup_r+0xc6>
 80006e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80006e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80006ec:	d1ba      	bne.n	8000664 <__swsetup_r+0x30>
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	0792      	lsls	r2, r2, #30
 80006f2:	bf58      	it	pl
 80006f4:	6963      	ldrpl	r3, [r4, #20]
 80006f6:	60a3      	str	r3, [r4, #8]
 80006f8:	e7f2      	b.n	80006e0 <__swsetup_r+0xac>
 80006fa:	2000      	movs	r0, #0
 80006fc:	e7f7      	b.n	80006ee <__swsetup_r+0xba>
 80006fe:	bf00      	nop
 8000700:	20000000 	.word	0x20000000
 8000704:	08000e48 	.word	0x08000e48
 8000708:	08000e68 	.word	0x08000e68
 800070c:	08000e28 	.word	0x08000e28

08000710 <__sflush_r>:
 8000710:	898a      	ldrh	r2, [r1, #12]
 8000712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000716:	4605      	mov	r5, r0
 8000718:	0710      	lsls	r0, r2, #28
 800071a:	460c      	mov	r4, r1
 800071c:	d458      	bmi.n	80007d0 <__sflush_r+0xc0>
 800071e:	684b      	ldr	r3, [r1, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dc05      	bgt.n	8000730 <__sflush_r+0x20>
 8000724:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000726:	2b00      	cmp	r3, #0
 8000728:	dc02      	bgt.n	8000730 <__sflush_r+0x20>
 800072a:	2000      	movs	r0, #0
 800072c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000730:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000732:	2e00      	cmp	r6, #0
 8000734:	d0f9      	beq.n	800072a <__sflush_r+0x1a>
 8000736:	2300      	movs	r3, #0
 8000738:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800073c:	682f      	ldr	r7, [r5, #0]
 800073e:	6a21      	ldr	r1, [r4, #32]
 8000740:	602b      	str	r3, [r5, #0]
 8000742:	d032      	beq.n	80007aa <__sflush_r+0x9a>
 8000744:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000746:	89a3      	ldrh	r3, [r4, #12]
 8000748:	075a      	lsls	r2, r3, #29
 800074a:	d505      	bpl.n	8000758 <__sflush_r+0x48>
 800074c:	6863      	ldr	r3, [r4, #4]
 800074e:	1ac0      	subs	r0, r0, r3
 8000750:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000752:	b10b      	cbz	r3, 8000758 <__sflush_r+0x48>
 8000754:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000756:	1ac0      	subs	r0, r0, r3
 8000758:	2300      	movs	r3, #0
 800075a:	4602      	mov	r2, r0
 800075c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800075e:	6a21      	ldr	r1, [r4, #32]
 8000760:	4628      	mov	r0, r5
 8000762:	47b0      	blx	r6
 8000764:	1c43      	adds	r3, r0, #1
 8000766:	89a3      	ldrh	r3, [r4, #12]
 8000768:	d106      	bne.n	8000778 <__sflush_r+0x68>
 800076a:	6829      	ldr	r1, [r5, #0]
 800076c:	291d      	cmp	r1, #29
 800076e:	d848      	bhi.n	8000802 <__sflush_r+0xf2>
 8000770:	4a29      	ldr	r2, [pc, #164]	; (8000818 <__sflush_r+0x108>)
 8000772:	40ca      	lsrs	r2, r1
 8000774:	07d6      	lsls	r6, r2, #31
 8000776:	d544      	bpl.n	8000802 <__sflush_r+0xf2>
 8000778:	2200      	movs	r2, #0
 800077a:	6062      	str	r2, [r4, #4]
 800077c:	04d9      	lsls	r1, r3, #19
 800077e:	6922      	ldr	r2, [r4, #16]
 8000780:	6022      	str	r2, [r4, #0]
 8000782:	d504      	bpl.n	800078e <__sflush_r+0x7e>
 8000784:	1c42      	adds	r2, r0, #1
 8000786:	d101      	bne.n	800078c <__sflush_r+0x7c>
 8000788:	682b      	ldr	r3, [r5, #0]
 800078a:	b903      	cbnz	r3, 800078e <__sflush_r+0x7e>
 800078c:	6560      	str	r0, [r4, #84]	; 0x54
 800078e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000790:	602f      	str	r7, [r5, #0]
 8000792:	2900      	cmp	r1, #0
 8000794:	d0c9      	beq.n	800072a <__sflush_r+0x1a>
 8000796:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800079a:	4299      	cmp	r1, r3
 800079c:	d002      	beq.n	80007a4 <__sflush_r+0x94>
 800079e:	4628      	mov	r0, r5
 80007a0:	f000 f994 	bl	8000acc <_free_r>
 80007a4:	2000      	movs	r0, #0
 80007a6:	6360      	str	r0, [r4, #52]	; 0x34
 80007a8:	e7c0      	b.n	800072c <__sflush_r+0x1c>
 80007aa:	2301      	movs	r3, #1
 80007ac:	4628      	mov	r0, r5
 80007ae:	47b0      	blx	r6
 80007b0:	1c41      	adds	r1, r0, #1
 80007b2:	d1c8      	bne.n	8000746 <__sflush_r+0x36>
 80007b4:	682b      	ldr	r3, [r5, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d0c5      	beq.n	8000746 <__sflush_r+0x36>
 80007ba:	2b1d      	cmp	r3, #29
 80007bc:	d001      	beq.n	80007c2 <__sflush_r+0xb2>
 80007be:	2b16      	cmp	r3, #22
 80007c0:	d101      	bne.n	80007c6 <__sflush_r+0xb6>
 80007c2:	602f      	str	r7, [r5, #0]
 80007c4:	e7b1      	b.n	800072a <__sflush_r+0x1a>
 80007c6:	89a3      	ldrh	r3, [r4, #12]
 80007c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007cc:	81a3      	strh	r3, [r4, #12]
 80007ce:	e7ad      	b.n	800072c <__sflush_r+0x1c>
 80007d0:	690f      	ldr	r7, [r1, #16]
 80007d2:	2f00      	cmp	r7, #0
 80007d4:	d0a9      	beq.n	800072a <__sflush_r+0x1a>
 80007d6:	0793      	lsls	r3, r2, #30
 80007d8:	680e      	ldr	r6, [r1, #0]
 80007da:	bf08      	it	eq
 80007dc:	694b      	ldreq	r3, [r1, #20]
 80007de:	600f      	str	r7, [r1, #0]
 80007e0:	bf18      	it	ne
 80007e2:	2300      	movne	r3, #0
 80007e4:	eba6 0807 	sub.w	r8, r6, r7
 80007e8:	608b      	str	r3, [r1, #8]
 80007ea:	f1b8 0f00 	cmp.w	r8, #0
 80007ee:	dd9c      	ble.n	800072a <__sflush_r+0x1a>
 80007f0:	4643      	mov	r3, r8
 80007f2:	463a      	mov	r2, r7
 80007f4:	6a21      	ldr	r1, [r4, #32]
 80007f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80007f8:	4628      	mov	r0, r5
 80007fa:	47b0      	blx	r6
 80007fc:	2800      	cmp	r0, #0
 80007fe:	dc06      	bgt.n	800080e <__sflush_r+0xfe>
 8000800:	89a3      	ldrh	r3, [r4, #12]
 8000802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000806:	81a3      	strh	r3, [r4, #12]
 8000808:	f04f 30ff 	mov.w	r0, #4294967295
 800080c:	e78e      	b.n	800072c <__sflush_r+0x1c>
 800080e:	4407      	add	r7, r0
 8000810:	eba8 0800 	sub.w	r8, r8, r0
 8000814:	e7e9      	b.n	80007ea <__sflush_r+0xda>
 8000816:	bf00      	nop
 8000818:	20400001 	.word	0x20400001

0800081c <_fflush_r>:
 800081c:	b538      	push	{r3, r4, r5, lr}
 800081e:	690b      	ldr	r3, [r1, #16]
 8000820:	4605      	mov	r5, r0
 8000822:	460c      	mov	r4, r1
 8000824:	b1db      	cbz	r3, 800085e <_fflush_r+0x42>
 8000826:	b118      	cbz	r0, 8000830 <_fflush_r+0x14>
 8000828:	6983      	ldr	r3, [r0, #24]
 800082a:	b90b      	cbnz	r3, 8000830 <_fflush_r+0x14>
 800082c:	f000 f860 	bl	80008f0 <__sinit>
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <_fflush_r+0x48>)
 8000832:	429c      	cmp	r4, r3
 8000834:	d109      	bne.n	800084a <_fflush_r+0x2e>
 8000836:	686c      	ldr	r4, [r5, #4]
 8000838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800083c:	b17b      	cbz	r3, 800085e <_fflush_r+0x42>
 800083e:	4621      	mov	r1, r4
 8000840:	4628      	mov	r0, r5
 8000842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000846:	f7ff bf63 	b.w	8000710 <__sflush_r>
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <_fflush_r+0x4c>)
 800084c:	429c      	cmp	r4, r3
 800084e:	d101      	bne.n	8000854 <_fflush_r+0x38>
 8000850:	68ac      	ldr	r4, [r5, #8]
 8000852:	e7f1      	b.n	8000838 <_fflush_r+0x1c>
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <_fflush_r+0x50>)
 8000856:	429c      	cmp	r4, r3
 8000858:	bf08      	it	eq
 800085a:	68ec      	ldreq	r4, [r5, #12]
 800085c:	e7ec      	b.n	8000838 <_fflush_r+0x1c>
 800085e:	2000      	movs	r0, #0
 8000860:	bd38      	pop	{r3, r4, r5, pc}
 8000862:	bf00      	nop
 8000864:	08000e48 	.word	0x08000e48
 8000868:	08000e68 	.word	0x08000e68
 800086c:	08000e28 	.word	0x08000e28

08000870 <std>:
 8000870:	2300      	movs	r3, #0
 8000872:	b510      	push	{r4, lr}
 8000874:	4604      	mov	r4, r0
 8000876:	e9c0 3300 	strd	r3, r3, [r0]
 800087a:	6083      	str	r3, [r0, #8]
 800087c:	8181      	strh	r1, [r0, #12]
 800087e:	6643      	str	r3, [r0, #100]	; 0x64
 8000880:	81c2      	strh	r2, [r0, #14]
 8000882:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000886:	6183      	str	r3, [r0, #24]
 8000888:	4619      	mov	r1, r3
 800088a:	2208      	movs	r2, #8
 800088c:	305c      	adds	r0, #92	; 0x5c
 800088e:	f7ff fe13 	bl	80004b8 <memset>
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <std+0x38>)
 8000894:	6263      	str	r3, [r4, #36]	; 0x24
 8000896:	4b05      	ldr	r3, [pc, #20]	; (80008ac <std+0x3c>)
 8000898:	62a3      	str	r3, [r4, #40]	; 0x28
 800089a:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <std+0x40>)
 800089c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800089e:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <std+0x44>)
 80008a0:	6224      	str	r4, [r4, #32]
 80008a2:	6323      	str	r3, [r4, #48]	; 0x30
 80008a4:	bd10      	pop	{r4, pc}
 80008a6:	bf00      	nop
 80008a8:	08000c3d 	.word	0x08000c3d
 80008ac:	08000c5f 	.word	0x08000c5f
 80008b0:	08000c97 	.word	0x08000c97
 80008b4:	08000cbb 	.word	0x08000cbb

080008b8 <_cleanup_r>:
 80008b8:	4901      	ldr	r1, [pc, #4]	; (80008c0 <_cleanup_r+0x8>)
 80008ba:	f000 b885 	b.w	80009c8 <_fwalk_reent>
 80008be:	bf00      	nop
 80008c0:	0800081d 	.word	0x0800081d

080008c4 <__sfmoreglue>:
 80008c4:	b570      	push	{r4, r5, r6, lr}
 80008c6:	1e4a      	subs	r2, r1, #1
 80008c8:	2568      	movs	r5, #104	; 0x68
 80008ca:	4355      	muls	r5, r2
 80008cc:	460e      	mov	r6, r1
 80008ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80008d2:	f000 f949 	bl	8000b68 <_malloc_r>
 80008d6:	4604      	mov	r4, r0
 80008d8:	b140      	cbz	r0, 80008ec <__sfmoreglue+0x28>
 80008da:	2100      	movs	r1, #0
 80008dc:	e9c0 1600 	strd	r1, r6, [r0]
 80008e0:	300c      	adds	r0, #12
 80008e2:	60a0      	str	r0, [r4, #8]
 80008e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80008e8:	f7ff fde6 	bl	80004b8 <memset>
 80008ec:	4620      	mov	r0, r4
 80008ee:	bd70      	pop	{r4, r5, r6, pc}

080008f0 <__sinit>:
 80008f0:	6983      	ldr	r3, [r0, #24]
 80008f2:	b510      	push	{r4, lr}
 80008f4:	4604      	mov	r4, r0
 80008f6:	bb33      	cbnz	r3, 8000946 <__sinit+0x56>
 80008f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80008fc:	6503      	str	r3, [r0, #80]	; 0x50
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <__sinit+0x58>)
 8000900:	4a12      	ldr	r2, [pc, #72]	; (800094c <__sinit+0x5c>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	6282      	str	r2, [r0, #40]	; 0x28
 8000906:	4298      	cmp	r0, r3
 8000908:	bf04      	itt	eq
 800090a:	2301      	moveq	r3, #1
 800090c:	6183      	streq	r3, [r0, #24]
 800090e:	f000 f81f 	bl	8000950 <__sfp>
 8000912:	6060      	str	r0, [r4, #4]
 8000914:	4620      	mov	r0, r4
 8000916:	f000 f81b 	bl	8000950 <__sfp>
 800091a:	60a0      	str	r0, [r4, #8]
 800091c:	4620      	mov	r0, r4
 800091e:	f000 f817 	bl	8000950 <__sfp>
 8000922:	2200      	movs	r2, #0
 8000924:	60e0      	str	r0, [r4, #12]
 8000926:	2104      	movs	r1, #4
 8000928:	6860      	ldr	r0, [r4, #4]
 800092a:	f7ff ffa1 	bl	8000870 <std>
 800092e:	2201      	movs	r2, #1
 8000930:	2109      	movs	r1, #9
 8000932:	68a0      	ldr	r0, [r4, #8]
 8000934:	f7ff ff9c 	bl	8000870 <std>
 8000938:	2202      	movs	r2, #2
 800093a:	2112      	movs	r1, #18
 800093c:	68e0      	ldr	r0, [r4, #12]
 800093e:	f7ff ff97 	bl	8000870 <std>
 8000942:	2301      	movs	r3, #1
 8000944:	61a3      	str	r3, [r4, #24]
 8000946:	bd10      	pop	{r4, pc}
 8000948:	08000e24 	.word	0x08000e24
 800094c:	080008b9 	.word	0x080008b9

08000950 <__sfp>:
 8000950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000952:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <__sfp+0x70>)
 8000954:	681e      	ldr	r6, [r3, #0]
 8000956:	69b3      	ldr	r3, [r6, #24]
 8000958:	4607      	mov	r7, r0
 800095a:	b913      	cbnz	r3, 8000962 <__sfp+0x12>
 800095c:	4630      	mov	r0, r6
 800095e:	f7ff ffc7 	bl	80008f0 <__sinit>
 8000962:	3648      	adds	r6, #72	; 0x48
 8000964:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000968:	3b01      	subs	r3, #1
 800096a:	d503      	bpl.n	8000974 <__sfp+0x24>
 800096c:	6833      	ldr	r3, [r6, #0]
 800096e:	b133      	cbz	r3, 800097e <__sfp+0x2e>
 8000970:	6836      	ldr	r6, [r6, #0]
 8000972:	e7f7      	b.n	8000964 <__sfp+0x14>
 8000974:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000978:	b16d      	cbz	r5, 8000996 <__sfp+0x46>
 800097a:	3468      	adds	r4, #104	; 0x68
 800097c:	e7f4      	b.n	8000968 <__sfp+0x18>
 800097e:	2104      	movs	r1, #4
 8000980:	4638      	mov	r0, r7
 8000982:	f7ff ff9f 	bl	80008c4 <__sfmoreglue>
 8000986:	6030      	str	r0, [r6, #0]
 8000988:	2800      	cmp	r0, #0
 800098a:	d1f1      	bne.n	8000970 <__sfp+0x20>
 800098c:	230c      	movs	r3, #12
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	4604      	mov	r4, r0
 8000992:	4620      	mov	r0, r4
 8000994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <__sfp+0x74>)
 8000998:	6665      	str	r5, [r4, #100]	; 0x64
 800099a:	e9c4 5500 	strd	r5, r5, [r4]
 800099e:	60a5      	str	r5, [r4, #8]
 80009a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80009a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80009a8:	2208      	movs	r2, #8
 80009aa:	4629      	mov	r1, r5
 80009ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80009b0:	f7ff fd82 	bl	80004b8 <memset>
 80009b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80009b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80009bc:	e7e9      	b.n	8000992 <__sfp+0x42>
 80009be:	bf00      	nop
 80009c0:	08000e24 	.word	0x08000e24
 80009c4:	ffff0001 	.word	0xffff0001

080009c8 <_fwalk_reent>:
 80009c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009cc:	4680      	mov	r8, r0
 80009ce:	4689      	mov	r9, r1
 80009d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80009d4:	2600      	movs	r6, #0
 80009d6:	b914      	cbnz	r4, 80009de <_fwalk_reent+0x16>
 80009d8:	4630      	mov	r0, r6
 80009da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80009e2:	3f01      	subs	r7, #1
 80009e4:	d501      	bpl.n	80009ea <_fwalk_reent+0x22>
 80009e6:	6824      	ldr	r4, [r4, #0]
 80009e8:	e7f5      	b.n	80009d6 <_fwalk_reent+0xe>
 80009ea:	89ab      	ldrh	r3, [r5, #12]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d907      	bls.n	8000a00 <_fwalk_reent+0x38>
 80009f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80009f4:	3301      	adds	r3, #1
 80009f6:	d003      	beq.n	8000a00 <_fwalk_reent+0x38>
 80009f8:	4629      	mov	r1, r5
 80009fa:	4640      	mov	r0, r8
 80009fc:	47c8      	blx	r9
 80009fe:	4306      	orrs	r6, r0
 8000a00:	3568      	adds	r5, #104	; 0x68
 8000a02:	e7ee      	b.n	80009e2 <_fwalk_reent+0x1a>

08000a04 <__swhatbuf_r>:
 8000a04:	b570      	push	{r4, r5, r6, lr}
 8000a06:	460e      	mov	r6, r1
 8000a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a0c:	2900      	cmp	r1, #0
 8000a0e:	b096      	sub	sp, #88	; 0x58
 8000a10:	4614      	mov	r4, r2
 8000a12:	461d      	mov	r5, r3
 8000a14:	da07      	bge.n	8000a26 <__swhatbuf_r+0x22>
 8000a16:	2300      	movs	r3, #0
 8000a18:	602b      	str	r3, [r5, #0]
 8000a1a:	89b3      	ldrh	r3, [r6, #12]
 8000a1c:	061a      	lsls	r2, r3, #24
 8000a1e:	d410      	bmi.n	8000a42 <__swhatbuf_r+0x3e>
 8000a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a24:	e00e      	b.n	8000a44 <__swhatbuf_r+0x40>
 8000a26:	466a      	mov	r2, sp
 8000a28:	f000 f96e 	bl	8000d08 <_fstat_r>
 8000a2c:	2800      	cmp	r0, #0
 8000a2e:	dbf2      	blt.n	8000a16 <__swhatbuf_r+0x12>
 8000a30:	9a01      	ldr	r2, [sp, #4]
 8000a32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000a36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000a3a:	425a      	negs	r2, r3
 8000a3c:	415a      	adcs	r2, r3
 8000a3e:	602a      	str	r2, [r5, #0]
 8000a40:	e7ee      	b.n	8000a20 <__swhatbuf_r+0x1c>
 8000a42:	2340      	movs	r3, #64	; 0x40
 8000a44:	2000      	movs	r0, #0
 8000a46:	6023      	str	r3, [r4, #0]
 8000a48:	b016      	add	sp, #88	; 0x58
 8000a4a:	bd70      	pop	{r4, r5, r6, pc}

08000a4c <__smakebuf_r>:
 8000a4c:	898b      	ldrh	r3, [r1, #12]
 8000a4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000a50:	079d      	lsls	r5, r3, #30
 8000a52:	4606      	mov	r6, r0
 8000a54:	460c      	mov	r4, r1
 8000a56:	d507      	bpl.n	8000a68 <__smakebuf_r+0x1c>
 8000a58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000a5c:	6023      	str	r3, [r4, #0]
 8000a5e:	6123      	str	r3, [r4, #16]
 8000a60:	2301      	movs	r3, #1
 8000a62:	6163      	str	r3, [r4, #20]
 8000a64:	b002      	add	sp, #8
 8000a66:	bd70      	pop	{r4, r5, r6, pc}
 8000a68:	ab01      	add	r3, sp, #4
 8000a6a:	466a      	mov	r2, sp
 8000a6c:	f7ff ffca 	bl	8000a04 <__swhatbuf_r>
 8000a70:	9900      	ldr	r1, [sp, #0]
 8000a72:	4605      	mov	r5, r0
 8000a74:	4630      	mov	r0, r6
 8000a76:	f000 f877 	bl	8000b68 <_malloc_r>
 8000a7a:	b948      	cbnz	r0, 8000a90 <__smakebuf_r+0x44>
 8000a7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a80:	059a      	lsls	r2, r3, #22
 8000a82:	d4ef      	bmi.n	8000a64 <__smakebuf_r+0x18>
 8000a84:	f023 0303 	bic.w	r3, r3, #3
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	81a3      	strh	r3, [r4, #12]
 8000a8e:	e7e3      	b.n	8000a58 <__smakebuf_r+0xc>
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <__smakebuf_r+0x7c>)
 8000a92:	62b3      	str	r3, [r6, #40]	; 0x28
 8000a94:	89a3      	ldrh	r3, [r4, #12]
 8000a96:	6020      	str	r0, [r4, #0]
 8000a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a9c:	81a3      	strh	r3, [r4, #12]
 8000a9e:	9b00      	ldr	r3, [sp, #0]
 8000aa0:	6163      	str	r3, [r4, #20]
 8000aa2:	9b01      	ldr	r3, [sp, #4]
 8000aa4:	6120      	str	r0, [r4, #16]
 8000aa6:	b15b      	cbz	r3, 8000ac0 <__smakebuf_r+0x74>
 8000aa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000aac:	4630      	mov	r0, r6
 8000aae:	f000 f93d 	bl	8000d2c <_isatty_r>
 8000ab2:	b128      	cbz	r0, 8000ac0 <__smakebuf_r+0x74>
 8000ab4:	89a3      	ldrh	r3, [r4, #12]
 8000ab6:	f023 0303 	bic.w	r3, r3, #3
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	81a3      	strh	r3, [r4, #12]
 8000ac0:	89a3      	ldrh	r3, [r4, #12]
 8000ac2:	431d      	orrs	r5, r3
 8000ac4:	81a5      	strh	r5, [r4, #12]
 8000ac6:	e7cd      	b.n	8000a64 <__smakebuf_r+0x18>
 8000ac8:	080008b9 	.word	0x080008b9

08000acc <_free_r>:
 8000acc:	b538      	push	{r3, r4, r5, lr}
 8000ace:	4605      	mov	r5, r0
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	d045      	beq.n	8000b60 <_free_r+0x94>
 8000ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ad8:	1f0c      	subs	r4, r1, #4
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	bfb8      	it	lt
 8000ade:	18e4      	addlt	r4, r4, r3
 8000ae0:	f000 f946 	bl	8000d70 <__malloc_lock>
 8000ae4:	4a1f      	ldr	r2, [pc, #124]	; (8000b64 <_free_r+0x98>)
 8000ae6:	6813      	ldr	r3, [r2, #0]
 8000ae8:	4610      	mov	r0, r2
 8000aea:	b933      	cbnz	r3, 8000afa <_free_r+0x2e>
 8000aec:	6063      	str	r3, [r4, #4]
 8000aee:	6014      	str	r4, [r2, #0]
 8000af0:	4628      	mov	r0, r5
 8000af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000af6:	f000 b93c 	b.w	8000d72 <__malloc_unlock>
 8000afa:	42a3      	cmp	r3, r4
 8000afc:	d90c      	bls.n	8000b18 <_free_r+0x4c>
 8000afe:	6821      	ldr	r1, [r4, #0]
 8000b00:	1862      	adds	r2, r4, r1
 8000b02:	4293      	cmp	r3, r2
 8000b04:	bf04      	itt	eq
 8000b06:	681a      	ldreq	r2, [r3, #0]
 8000b08:	685b      	ldreq	r3, [r3, #4]
 8000b0a:	6063      	str	r3, [r4, #4]
 8000b0c:	bf04      	itt	eq
 8000b0e:	1852      	addeq	r2, r2, r1
 8000b10:	6022      	streq	r2, [r4, #0]
 8000b12:	6004      	str	r4, [r0, #0]
 8000b14:	e7ec      	b.n	8000af0 <_free_r+0x24>
 8000b16:	4613      	mov	r3, r2
 8000b18:	685a      	ldr	r2, [r3, #4]
 8000b1a:	b10a      	cbz	r2, 8000b20 <_free_r+0x54>
 8000b1c:	42a2      	cmp	r2, r4
 8000b1e:	d9fa      	bls.n	8000b16 <_free_r+0x4a>
 8000b20:	6819      	ldr	r1, [r3, #0]
 8000b22:	1858      	adds	r0, r3, r1
 8000b24:	42a0      	cmp	r0, r4
 8000b26:	d10b      	bne.n	8000b40 <_free_r+0x74>
 8000b28:	6820      	ldr	r0, [r4, #0]
 8000b2a:	4401      	add	r1, r0
 8000b2c:	1858      	adds	r0, r3, r1
 8000b2e:	4282      	cmp	r2, r0
 8000b30:	6019      	str	r1, [r3, #0]
 8000b32:	d1dd      	bne.n	8000af0 <_free_r+0x24>
 8000b34:	6810      	ldr	r0, [r2, #0]
 8000b36:	6852      	ldr	r2, [r2, #4]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	4401      	add	r1, r0
 8000b3c:	6019      	str	r1, [r3, #0]
 8000b3e:	e7d7      	b.n	8000af0 <_free_r+0x24>
 8000b40:	d902      	bls.n	8000b48 <_free_r+0x7c>
 8000b42:	230c      	movs	r3, #12
 8000b44:	602b      	str	r3, [r5, #0]
 8000b46:	e7d3      	b.n	8000af0 <_free_r+0x24>
 8000b48:	6820      	ldr	r0, [r4, #0]
 8000b4a:	1821      	adds	r1, r4, r0
 8000b4c:	428a      	cmp	r2, r1
 8000b4e:	bf04      	itt	eq
 8000b50:	6811      	ldreq	r1, [r2, #0]
 8000b52:	6852      	ldreq	r2, [r2, #4]
 8000b54:	6062      	str	r2, [r4, #4]
 8000b56:	bf04      	itt	eq
 8000b58:	1809      	addeq	r1, r1, r0
 8000b5a:	6021      	streq	r1, [r4, #0]
 8000b5c:	605c      	str	r4, [r3, #4]
 8000b5e:	e7c7      	b.n	8000af0 <_free_r+0x24>
 8000b60:	bd38      	pop	{r3, r4, r5, pc}
 8000b62:	bf00      	nop
 8000b64:	20000084 	.word	0x20000084

08000b68 <_malloc_r>:
 8000b68:	b570      	push	{r4, r5, r6, lr}
 8000b6a:	1ccd      	adds	r5, r1, #3
 8000b6c:	f025 0503 	bic.w	r5, r5, #3
 8000b70:	3508      	adds	r5, #8
 8000b72:	2d0c      	cmp	r5, #12
 8000b74:	bf38      	it	cc
 8000b76:	250c      	movcc	r5, #12
 8000b78:	2d00      	cmp	r5, #0
 8000b7a:	4606      	mov	r6, r0
 8000b7c:	db01      	blt.n	8000b82 <_malloc_r+0x1a>
 8000b7e:	42a9      	cmp	r1, r5
 8000b80:	d903      	bls.n	8000b8a <_malloc_r+0x22>
 8000b82:	230c      	movs	r3, #12
 8000b84:	6033      	str	r3, [r6, #0]
 8000b86:	2000      	movs	r0, #0
 8000b88:	bd70      	pop	{r4, r5, r6, pc}
 8000b8a:	f000 f8f1 	bl	8000d70 <__malloc_lock>
 8000b8e:	4a21      	ldr	r2, [pc, #132]	; (8000c14 <_malloc_r+0xac>)
 8000b90:	6814      	ldr	r4, [r2, #0]
 8000b92:	4621      	mov	r1, r4
 8000b94:	b991      	cbnz	r1, 8000bbc <_malloc_r+0x54>
 8000b96:	4c20      	ldr	r4, [pc, #128]	; (8000c18 <_malloc_r+0xb0>)
 8000b98:	6823      	ldr	r3, [r4, #0]
 8000b9a:	b91b      	cbnz	r3, 8000ba4 <_malloc_r+0x3c>
 8000b9c:	4630      	mov	r0, r6
 8000b9e:	f000 f83d 	bl	8000c1c <_sbrk_r>
 8000ba2:	6020      	str	r0, [r4, #0]
 8000ba4:	4629      	mov	r1, r5
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	f000 f838 	bl	8000c1c <_sbrk_r>
 8000bac:	1c43      	adds	r3, r0, #1
 8000bae:	d124      	bne.n	8000bfa <_malloc_r+0x92>
 8000bb0:	230c      	movs	r3, #12
 8000bb2:	6033      	str	r3, [r6, #0]
 8000bb4:	4630      	mov	r0, r6
 8000bb6:	f000 f8dc 	bl	8000d72 <__malloc_unlock>
 8000bba:	e7e4      	b.n	8000b86 <_malloc_r+0x1e>
 8000bbc:	680b      	ldr	r3, [r1, #0]
 8000bbe:	1b5b      	subs	r3, r3, r5
 8000bc0:	d418      	bmi.n	8000bf4 <_malloc_r+0x8c>
 8000bc2:	2b0b      	cmp	r3, #11
 8000bc4:	d90f      	bls.n	8000be6 <_malloc_r+0x7e>
 8000bc6:	600b      	str	r3, [r1, #0]
 8000bc8:	50cd      	str	r5, [r1, r3]
 8000bca:	18cc      	adds	r4, r1, r3
 8000bcc:	4630      	mov	r0, r6
 8000bce:	f000 f8d0 	bl	8000d72 <__malloc_unlock>
 8000bd2:	f104 000b 	add.w	r0, r4, #11
 8000bd6:	1d23      	adds	r3, r4, #4
 8000bd8:	f020 0007 	bic.w	r0, r0, #7
 8000bdc:	1ac3      	subs	r3, r0, r3
 8000bde:	d0d3      	beq.n	8000b88 <_malloc_r+0x20>
 8000be0:	425a      	negs	r2, r3
 8000be2:	50e2      	str	r2, [r4, r3]
 8000be4:	e7d0      	b.n	8000b88 <_malloc_r+0x20>
 8000be6:	428c      	cmp	r4, r1
 8000be8:	684b      	ldr	r3, [r1, #4]
 8000bea:	bf16      	itet	ne
 8000bec:	6063      	strne	r3, [r4, #4]
 8000bee:	6013      	streq	r3, [r2, #0]
 8000bf0:	460c      	movne	r4, r1
 8000bf2:	e7eb      	b.n	8000bcc <_malloc_r+0x64>
 8000bf4:	460c      	mov	r4, r1
 8000bf6:	6849      	ldr	r1, [r1, #4]
 8000bf8:	e7cc      	b.n	8000b94 <_malloc_r+0x2c>
 8000bfa:	1cc4      	adds	r4, r0, #3
 8000bfc:	f024 0403 	bic.w	r4, r4, #3
 8000c00:	42a0      	cmp	r0, r4
 8000c02:	d005      	beq.n	8000c10 <_malloc_r+0xa8>
 8000c04:	1a21      	subs	r1, r4, r0
 8000c06:	4630      	mov	r0, r6
 8000c08:	f000 f808 	bl	8000c1c <_sbrk_r>
 8000c0c:	3001      	adds	r0, #1
 8000c0e:	d0cf      	beq.n	8000bb0 <_malloc_r+0x48>
 8000c10:	6025      	str	r5, [r4, #0]
 8000c12:	e7db      	b.n	8000bcc <_malloc_r+0x64>
 8000c14:	20000084 	.word	0x20000084
 8000c18:	20000088 	.word	0x20000088

08000c1c <_sbrk_r>:
 8000c1c:	b538      	push	{r3, r4, r5, lr}
 8000c1e:	4c06      	ldr	r4, [pc, #24]	; (8000c38 <_sbrk_r+0x1c>)
 8000c20:	2300      	movs	r3, #0
 8000c22:	4605      	mov	r5, r0
 8000c24:	4608      	mov	r0, r1
 8000c26:	6023      	str	r3, [r4, #0]
 8000c28:	f7ff fbc6 	bl	80003b8 <_sbrk>
 8000c2c:	1c43      	adds	r3, r0, #1
 8000c2e:	d102      	bne.n	8000c36 <_sbrk_r+0x1a>
 8000c30:	6823      	ldr	r3, [r4, #0]
 8000c32:	b103      	cbz	r3, 8000c36 <_sbrk_r+0x1a>
 8000c34:	602b      	str	r3, [r5, #0]
 8000c36:	bd38      	pop	{r3, r4, r5, pc}
 8000c38:	2000008c 	.word	0x2000008c

08000c3c <__sread>:
 8000c3c:	b510      	push	{r4, lr}
 8000c3e:	460c      	mov	r4, r1
 8000c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c44:	f000 f896 	bl	8000d74 <_read_r>
 8000c48:	2800      	cmp	r0, #0
 8000c4a:	bfab      	itete	ge
 8000c4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000c4e:	89a3      	ldrhlt	r3, [r4, #12]
 8000c50:	181b      	addge	r3, r3, r0
 8000c52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000c56:	bfac      	ite	ge
 8000c58:	6563      	strge	r3, [r4, #84]	; 0x54
 8000c5a:	81a3      	strhlt	r3, [r4, #12]
 8000c5c:	bd10      	pop	{r4, pc}

08000c5e <__swrite>:
 8000c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c62:	461f      	mov	r7, r3
 8000c64:	898b      	ldrh	r3, [r1, #12]
 8000c66:	05db      	lsls	r3, r3, #23
 8000c68:	4605      	mov	r5, r0
 8000c6a:	460c      	mov	r4, r1
 8000c6c:	4616      	mov	r6, r2
 8000c6e:	d505      	bpl.n	8000c7c <__swrite+0x1e>
 8000c70:	2302      	movs	r3, #2
 8000c72:	2200      	movs	r2, #0
 8000c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c78:	f000 f868 	bl	8000d4c <_lseek_r>
 8000c7c:	89a3      	ldrh	r3, [r4, #12]
 8000c7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c86:	81a3      	strh	r3, [r4, #12]
 8000c88:	4632      	mov	r2, r6
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	4628      	mov	r0, r5
 8000c8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000c92:	f000 b817 	b.w	8000cc4 <_write_r>

08000c96 <__sseek>:
 8000c96:	b510      	push	{r4, lr}
 8000c98:	460c      	mov	r4, r1
 8000c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c9e:	f000 f855 	bl	8000d4c <_lseek_r>
 8000ca2:	1c43      	adds	r3, r0, #1
 8000ca4:	89a3      	ldrh	r3, [r4, #12]
 8000ca6:	bf15      	itete	ne
 8000ca8:	6560      	strne	r0, [r4, #84]	; 0x54
 8000caa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000cae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000cb2:	81a3      	strheq	r3, [r4, #12]
 8000cb4:	bf18      	it	ne
 8000cb6:	81a3      	strhne	r3, [r4, #12]
 8000cb8:	bd10      	pop	{r4, pc}

08000cba <__sclose>:
 8000cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cbe:	f000 b813 	b.w	8000ce8 <_close_r>
	...

08000cc4 <_write_r>:
 8000cc4:	b538      	push	{r3, r4, r5, lr}
 8000cc6:	4c07      	ldr	r4, [pc, #28]	; (8000ce4 <_write_r+0x20>)
 8000cc8:	4605      	mov	r5, r0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	4611      	mov	r1, r2
 8000cce:	2200      	movs	r2, #0
 8000cd0:	6022      	str	r2, [r4, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	f7ff fb23 	bl	800031e <_write>
 8000cd8:	1c43      	adds	r3, r0, #1
 8000cda:	d102      	bne.n	8000ce2 <_write_r+0x1e>
 8000cdc:	6823      	ldr	r3, [r4, #0]
 8000cde:	b103      	cbz	r3, 8000ce2 <_write_r+0x1e>
 8000ce0:	602b      	str	r3, [r5, #0]
 8000ce2:	bd38      	pop	{r3, r4, r5, pc}
 8000ce4:	2000008c 	.word	0x2000008c

08000ce8 <_close_r>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	4c06      	ldr	r4, [pc, #24]	; (8000d04 <_close_r+0x1c>)
 8000cec:	2300      	movs	r3, #0
 8000cee:	4605      	mov	r5, r0
 8000cf0:	4608      	mov	r0, r1
 8000cf2:	6023      	str	r3, [r4, #0]
 8000cf4:	f7ff fb2f 	bl	8000356 <_close>
 8000cf8:	1c43      	adds	r3, r0, #1
 8000cfa:	d102      	bne.n	8000d02 <_close_r+0x1a>
 8000cfc:	6823      	ldr	r3, [r4, #0]
 8000cfe:	b103      	cbz	r3, 8000d02 <_close_r+0x1a>
 8000d00:	602b      	str	r3, [r5, #0]
 8000d02:	bd38      	pop	{r3, r4, r5, pc}
 8000d04:	2000008c 	.word	0x2000008c

08000d08 <_fstat_r>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	4c07      	ldr	r4, [pc, #28]	; (8000d28 <_fstat_r+0x20>)
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4605      	mov	r5, r0
 8000d10:	4608      	mov	r0, r1
 8000d12:	4611      	mov	r1, r2
 8000d14:	6023      	str	r3, [r4, #0]
 8000d16:	f7ff fb29 	bl	800036c <_fstat>
 8000d1a:	1c43      	adds	r3, r0, #1
 8000d1c:	d102      	bne.n	8000d24 <_fstat_r+0x1c>
 8000d1e:	6823      	ldr	r3, [r4, #0]
 8000d20:	b103      	cbz	r3, 8000d24 <_fstat_r+0x1c>
 8000d22:	602b      	str	r3, [r5, #0]
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop
 8000d28:	2000008c 	.word	0x2000008c

08000d2c <_isatty_r>:
 8000d2c:	b538      	push	{r3, r4, r5, lr}
 8000d2e:	4c06      	ldr	r4, [pc, #24]	; (8000d48 <_isatty_r+0x1c>)
 8000d30:	2300      	movs	r3, #0
 8000d32:	4605      	mov	r5, r0
 8000d34:	4608      	mov	r0, r1
 8000d36:	6023      	str	r3, [r4, #0]
 8000d38:	f7ff fb27 	bl	800038a <_isatty>
 8000d3c:	1c43      	adds	r3, r0, #1
 8000d3e:	d102      	bne.n	8000d46 <_isatty_r+0x1a>
 8000d40:	6823      	ldr	r3, [r4, #0]
 8000d42:	b103      	cbz	r3, 8000d46 <_isatty_r+0x1a>
 8000d44:	602b      	str	r3, [r5, #0]
 8000d46:	bd38      	pop	{r3, r4, r5, pc}
 8000d48:	2000008c 	.word	0x2000008c

08000d4c <_lseek_r>:
 8000d4c:	b538      	push	{r3, r4, r5, lr}
 8000d4e:	4c07      	ldr	r4, [pc, #28]	; (8000d6c <_lseek_r+0x20>)
 8000d50:	4605      	mov	r5, r0
 8000d52:	4608      	mov	r0, r1
 8000d54:	4611      	mov	r1, r2
 8000d56:	2200      	movs	r2, #0
 8000d58:	6022      	str	r2, [r4, #0]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	f7ff fb1f 	bl	800039e <_lseek>
 8000d60:	1c43      	adds	r3, r0, #1
 8000d62:	d102      	bne.n	8000d6a <_lseek_r+0x1e>
 8000d64:	6823      	ldr	r3, [r4, #0]
 8000d66:	b103      	cbz	r3, 8000d6a <_lseek_r+0x1e>
 8000d68:	602b      	str	r3, [r5, #0]
 8000d6a:	bd38      	pop	{r3, r4, r5, pc}
 8000d6c:	2000008c 	.word	0x2000008c

08000d70 <__malloc_lock>:
 8000d70:	4770      	bx	lr

08000d72 <__malloc_unlock>:
 8000d72:	4770      	bx	lr

08000d74 <_read_r>:
 8000d74:	b538      	push	{r3, r4, r5, lr}
 8000d76:	4c07      	ldr	r4, [pc, #28]	; (8000d94 <_read_r+0x20>)
 8000d78:	4605      	mov	r5, r0
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	2200      	movs	r2, #0
 8000d80:	6022      	str	r2, [r4, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	f7ff faae 	bl	80002e4 <_read>
 8000d88:	1c43      	adds	r3, r0, #1
 8000d8a:	d102      	bne.n	8000d92 <_read_r+0x1e>
 8000d8c:	6823      	ldr	r3, [r4, #0]
 8000d8e:	b103      	cbz	r3, 8000d92 <_read_r+0x1e>
 8000d90:	602b      	str	r3, [r5, #0]
 8000d92:	bd38      	pop	{r3, r4, r5, pc}
 8000d94:	2000008c 	.word	0x2000008c

08000d98 <_init>:
 8000d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d9a:	bf00      	nop
 8000d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d9e:	bc08      	pop	{r3}
 8000da0:	469e      	mov	lr, r3
 8000da2:	4770      	bx	lr

08000da4 <_fini>:
 8000da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000da6:	bf00      	nop
 8000da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000daa:	bc08      	pop	{r3}
 8000dac:	469e      	mov	lr, r3
 8000dae:	4770      	bx	lr
