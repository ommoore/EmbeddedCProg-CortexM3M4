
Section13_FaultHandling_and_Analysis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000140c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  080015dc  080015dc  000115dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800179c  0800179c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800179c  0800179c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800179c  0800179c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800179c  0800179c  0001179c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017a0  080017a0  000117a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080017a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000064  08001808  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08001808  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000023cb  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006ac  00000000  00000000  00022459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000140  00000000  00000000  00022b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000108  00000000  00000000  00022c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b79  00000000  00000000  00022d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000147f  00000000  00000000  000258c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000097cd  00000000  00000000  00026d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00030515  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c04  00000000  00000000  00030568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080015c4 	.word	0x080015c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	080015c4 	.word	0x080015c4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <main>:
#include <stdint.h>

void UsageFaultHandler_c(uint32_t *pMSP);

int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
	//1. Enable all configurable exceptions like usage fault, mem manage fault, and bus fault
		//search system control block in cortex m4 user guide
		//look for system handler control and state register (SHCRS **typo in manual)
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 80002b6:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <main+0x44>)
 80002b8:	60fb      	str	r3, [r7, #12]

	*pSHCSR |= (1 << 16); //mem manage
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17); //bus fault
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 18); //usage fault
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	601a      	str	r2, [r3, #0]



	//3. lets force the processor to execute some undefined instructions
	uint32_t *pSRAM = (uint32_t*)0x20010000; //random memory location of SRAM
 80002de:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <main+0x48>)
 80002e0:	60bb      	str	r3, [r7, #8]
	*pSRAM = 0xFFFFFFFF; 		 //invalid OPCODE
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	f04f 32ff 	mov.w	r2, #4294967295
 80002e8:	601a      	str	r2, [r3, #0]

	void (*some_address) (void); //function pointer variable

	//some_address = (void*)pSRAM; 						 //initialize function pointer to address (actually incorrect to do this)
	some_address = (void*) 0x20010001;  				 //address of a function should ALWAYS be odd (t-bit needs to be 1 to keep it in THUMB state and not ARM state).
 80002ea:	4b04      	ldr	r3, [pc, #16]	; (80002fc <main+0x4c>)
 80002ec:	607b      	str	r3, [r7, #4]
	//some_address = (void*)( (uint32_t)pSRAM) + 1 );    //or you can typecast and add 1 to the address
	some_address(); 			 //dereference function pointer (how to jump to location in memory) or make PC loaded with that address
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	4798      	blx	r3

	//4. analyze the faults

	for(;;);
 80002f2:	e7fe      	b.n	80002f2 <main+0x42>
 80002f4:	e000ed24 	.word	0xe000ed24
 80002f8:	20010000 	.word	0x20010000
 80002fc:	20010001 	.word	0x20010001

08000300 <HardFault_Handler>:
}


//2. implement the fault handlers
void HardFault_Handler(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	printf("Exception : HardFault\n");
 8000304:	4801      	ldr	r0, [pc, #4]	; (800030c <HardFault_Handler+0xc>)
 8000306:	f000 fa1b 	bl	8000740 <puts>
	while(1);
 800030a:	e7fe      	b.n	800030a <HardFault_Handler+0xa>
 800030c:	080015dc 	.word	0x080015dc

08000310 <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 8000314:	4801      	ldr	r0, [pc, #4]	; (800031c <MemManage_Handler+0xc>)
 8000316:	f000 fa13 	bl	8000740 <puts>
	while(1);
 800031a:	e7fe      	b.n	800031a <MemManage_Handler+0xa>
 800031c:	080015f4 	.word	0x080015f4

08000320 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 8000324:	4801      	ldr	r0, [pc, #4]	; (800032c <BusFault_Handler+0xc>)
 8000326:	f000 fa0b 	bl	8000740 <puts>
	while(1);
 800032a:	e7fe      	b.n	800032a <BusFault_Handler+0xa>
 800032c:	0800160c 	.word	0x0800160c

08000330 <UsageFault_Handler>:

//caller
__attribute__((naked)) void UsageFault_Handler(void){
	//here we extracted the value of MSP which happens to be the base address
	//of the stack frame which got saved during the exception entry from thread mode to handler mode.
	__asm ("MRS r0, MSP");
 8000330:	f3ef 8008 	mrs	r0, MSP
	__asm ("B UsageFault_Handler_c"); //branch to c function
 8000334:	f000 b802 	b.w	800033c <UsageFault_Handler_c>
}
 8000338:	bf00      	nop
	...

0800033c <UsageFault_Handler_c>:

//callee (value of r0 from caller becomes argument 1 in callee function)
void UsageFault_Handler_c(uint32_t *pBaseStackFrame)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	// moved these instructions to the naked function above (diff way to do it)
	//__asm ("MRS r0, MSP");
	//register uint32_t msp_value __asm("r0");
	//uint32_t *pMSP = (uint32_t*)msp_value;

	uint32_t *pUFSR = (uint32_t*)0xE000ED2A;
 8000344:	4b23      	ldr	r3, [pc, #140]	; (80003d4 <UsageFault_Handler_c+0x98>)
 8000346:	60fb      	str	r3, [r7, #12]
	printf("Exception : UsageFault\n");
 8000348:	4823      	ldr	r0, [pc, #140]	; (80003d8 <UsageFault_Handler_c+0x9c>)
 800034a:	f000 f9f9 	bl	8000740 <puts>
	printf("UFSR = %lx\n", (*pUFSR) & 0xFFFF); //read first 16 bits of UFSR register
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	b29b      	uxth	r3, r3
 8000354:	4619      	mov	r1, r3
 8000356:	4821      	ldr	r0, [pc, #132]	; (80003dc <UsageFault_Handler_c+0xa0>)
 8000358:	f000 f96c 	bl	8000634 <iprintf>
	//printf("MSP = %p\n", pMSP); //read MSP register

	//print contents of stack frame
	printf("pBaseStackFrame = %p\n", pBaseStackFrame); //read Base of Stack Frame
 800035c:	6879      	ldr	r1, [r7, #4]
 800035e:	4820      	ldr	r0, [pc, #128]	; (80003e0 <UsageFault_Handler_c+0xa4>)
 8000360:	f000 f968 	bl	8000634 <iprintf>
	printf("Value of R0 = %lx\n", pBaseStackFrame[0]); //read R0 register
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4619      	mov	r1, r3
 800036a:	481e      	ldr	r0, [pc, #120]	; (80003e4 <UsageFault_Handler_c+0xa8>)
 800036c:	f000 f962 	bl	8000634 <iprintf>
	printf("Value of R1 = %lx\n", pBaseStackFrame[1]); //read R1 register
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	3304      	adds	r3, #4
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4619      	mov	r1, r3
 8000378:	481b      	ldr	r0, [pc, #108]	; (80003e8 <UsageFault_Handler_c+0xac>)
 800037a:	f000 f95b 	bl	8000634 <iprintf>
	printf("Value of R2 = %lx\n", pBaseStackFrame[2]); //read R2 register
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	3308      	adds	r3, #8
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4619      	mov	r1, r3
 8000386:	4819      	ldr	r0, [pc, #100]	; (80003ec <UsageFault_Handler_c+0xb0>)
 8000388:	f000 f954 	bl	8000634 <iprintf>
	printf("Value of R3 = %lx\n", pBaseStackFrame[3]); //read R3 register
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	330c      	adds	r3, #12
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	4619      	mov	r1, r3
 8000394:	4816      	ldr	r0, [pc, #88]	; (80003f0 <UsageFault_Handler_c+0xb4>)
 8000396:	f000 f94d 	bl	8000634 <iprintf>
	printf("Value of R12 = %lx\n", pBaseStackFrame[4]); //read R12 register
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	3310      	adds	r3, #16
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4619      	mov	r1, r3
 80003a2:	4814      	ldr	r0, [pc, #80]	; (80003f4 <UsageFault_Handler_c+0xb8>)
 80003a4:	f000 f946 	bl	8000634 <iprintf>
	printf("Value of LR = %lx\n", pBaseStackFrame[5]); //read LR register
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	3314      	adds	r3, #20
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4619      	mov	r1, r3
 80003b0:	4811      	ldr	r0, [pc, #68]	; (80003f8 <UsageFault_Handler_c+0xbc>)
 80003b2:	f000 f93f 	bl	8000634 <iprintf>
	printf("Value of PC = %lx\n", pBaseStackFrame[6]); //read PC register
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	3318      	adds	r3, #24
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4619      	mov	r1, r3
 80003be:	480f      	ldr	r0, [pc, #60]	; (80003fc <UsageFault_Handler_c+0xc0>)
 80003c0:	f000 f938 	bl	8000634 <iprintf>
	printf("Value of XPSR = %lx\n", pBaseStackFrame[7]); //read XPSR register
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	331c      	adds	r3, #28
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4619      	mov	r1, r3
 80003cc:	480c      	ldr	r0, [pc, #48]	; (8000400 <UsageFault_Handler_c+0xc4>)
 80003ce:	f000 f931 	bl	8000634 <iprintf>
	while(1);
 80003d2:	e7fe      	b.n	80003d2 <UsageFault_Handler_c+0x96>
 80003d4:	e000ed2a 	.word	0xe000ed2a
 80003d8:	08001624 	.word	0x08001624
 80003dc:	0800163c 	.word	0x0800163c
 80003e0:	08001648 	.word	0x08001648
 80003e4:	08001660 	.word	0x08001660
 80003e8:	08001674 	.word	0x08001674
 80003ec:	08001688 	.word	0x08001688
 80003f0:	0800169c 	.word	0x0800169c
 80003f4:	080016b0 	.word	0x080016b0
 80003f8:	080016c4 	.word	0x080016c4
 80003fc:	080016d8 	.word	0x080016d8
 8000400:	080016ec 	.word	0x080016ec

08000404 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800040e:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <ITM_SendChar+0x44>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a0d      	ldr	r2, [pc, #52]	; (8000448 <ITM_SendChar+0x44>)
 8000414:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000418:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800041a:	4b0c      	ldr	r3, [pc, #48]	; (800044c <ITM_SendChar+0x48>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a0b      	ldr	r2, [pc, #44]	; (800044c <ITM_SendChar+0x48>)
 8000420:	f043 0301 	orr.w	r3, r3, #1
 8000424:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000426:	bf00      	nop
 8000428:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	2b00      	cmp	r3, #0
 8000434:	d0f8      	beq.n	8000428 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000436:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	6013      	str	r3, [r2, #0]
}
 800043e:	bf00      	nop
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr
 8000448:	e000edfc 	.word	0xe000edfc
 800044c:	e0000e00 	.word	0xe0000e00

08000450 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b086      	sub	sp, #24
 8000454:	af00      	add	r7, sp, #0
 8000456:	60f8      	str	r0, [r7, #12]
 8000458:	60b9      	str	r1, [r7, #8]
 800045a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800045c:	2300      	movs	r3, #0
 800045e:	617b      	str	r3, [r7, #20]
 8000460:	e00a      	b.n	8000478 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000462:	f3af 8000 	nop.w
 8000466:	4601      	mov	r1, r0
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	1c5a      	adds	r2, r3, #1
 800046c:	60ba      	str	r2, [r7, #8]
 800046e:	b2ca      	uxtb	r2, r1
 8000470:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000472:	697b      	ldr	r3, [r7, #20]
 8000474:	3301      	adds	r3, #1
 8000476:	617b      	str	r3, [r7, #20]
 8000478:	697a      	ldr	r2, [r7, #20]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	429a      	cmp	r2, r3
 800047e:	dbf0      	blt.n	8000462 <_read+0x12>
	}

return len;
 8000480:	687b      	ldr	r3, [r7, #4]
}
 8000482:	4618      	mov	r0, r3
 8000484:	3718      	adds	r7, #24
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}

0800048a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800048a:	b580      	push	{r7, lr}
 800048c:	b086      	sub	sp, #24
 800048e:	af00      	add	r7, sp, #0
 8000490:	60f8      	str	r0, [r7, #12]
 8000492:	60b9      	str	r1, [r7, #8]
 8000494:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000496:	2300      	movs	r3, #0
 8000498:	617b      	str	r3, [r7, #20]
 800049a:	e009      	b.n	80004b0 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	1c5a      	adds	r2, r3, #1
 80004a0:	60ba      	str	r2, [r7, #8]
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f7ff ffad 	bl	8000404 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	3301      	adds	r3, #1
 80004ae:	617b      	str	r3, [r7, #20]
 80004b0:	697a      	ldr	r2, [r7, #20]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	429a      	cmp	r2, r3
 80004b6:	dbf1      	blt.n	800049c <_write+0x12>
	}
	return len;
 80004b8:	687b      	ldr	r3, [r7, #4]
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	3718      	adds	r7, #24
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <_close>:

int _close(int file)
{
 80004c2:	b480      	push	{r7}
 80004c4:	b083      	sub	sp, #12
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
	return -1;
 80004ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004e8:	605a      	str	r2, [r3, #4]
	return 0;
 80004ea:	2300      	movs	r3, #0
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bc80      	pop	{r7}
 80004f4:	4770      	bx	lr

080004f6 <_isatty>:

int _isatty(int file)
{
 80004f6:	b480      	push	{r7}
 80004f8:	b083      	sub	sp, #12
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
	return 1;
 80004fe:	2301      	movs	r3, #1
}
 8000500:	4618      	mov	r0, r3
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	bc80      	pop	{r7}
 8000508:	4770      	bx	lr

0800050a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800050a:	b480      	push	{r7}
 800050c:	b085      	sub	sp, #20
 800050e:	af00      	add	r7, sp, #0
 8000510:	60f8      	str	r0, [r7, #12]
 8000512:	60b9      	str	r1, [r7, #8]
 8000514:	607a      	str	r2, [r7, #4]
	return 0;
 8000516:	2300      	movs	r3, #0
}
 8000518:	4618      	mov	r0, r3
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr
	...

08000524 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800052c:	4b11      	ldr	r3, [pc, #68]	; (8000574 <_sbrk+0x50>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d102      	bne.n	800053a <_sbrk+0x16>
		heap_end = &end;
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <_sbrk+0x50>)
 8000536:	4a10      	ldr	r2, [pc, #64]	; (8000578 <_sbrk+0x54>)
 8000538:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <_sbrk+0x50>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <_sbrk+0x50>)
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4413      	add	r3, r2
 8000548:	466a      	mov	r2, sp
 800054a:	4293      	cmp	r3, r2
 800054c:	d907      	bls.n	800055e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800054e:	f000 f83f 	bl	80005d0 <__errno>
 8000552:	4603      	mov	r3, r0
 8000554:	220c      	movs	r2, #12
 8000556:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000558:	f04f 33ff 	mov.w	r3, #4294967295
 800055c:	e006      	b.n	800056c <_sbrk+0x48>
	}

	heap_end += incr;
 800055e:	4b05      	ldr	r3, [pc, #20]	; (8000574 <_sbrk+0x50>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4413      	add	r3, r2
 8000566:	4a03      	ldr	r2, [pc, #12]	; (8000574 <_sbrk+0x50>)
 8000568:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800056a:	68fb      	ldr	r3, [r7, #12]
}
 800056c:	4618      	mov	r0, r3
 800056e:	3710      	adds	r7, #16
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000080 	.word	0x20000080
 8000578:	200000a0 	.word	0x200000a0

0800057c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800057c:	480d      	ldr	r0, [pc, #52]	; (80005b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800057e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000580:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000584:	480c      	ldr	r0, [pc, #48]	; (80005b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000586:	490d      	ldr	r1, [pc, #52]	; (80005bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <LoopForever+0xe>)
  movs r3, #0
 800058a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800058c:	e002      	b.n	8000594 <LoopCopyDataInit>

0800058e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800058e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000592:	3304      	adds	r3, #4

08000594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000598:	d3f9      	bcc.n	800058e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800059a:	4a0a      	ldr	r2, [pc, #40]	; (80005c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800059c:	4c0a      	ldr	r4, [pc, #40]	; (80005c8 <LoopForever+0x16>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a0:	e001      	b.n	80005a6 <LoopFillZerobss>

080005a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a4:	3204      	adds	r2, #4

080005a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a8:	d3fb      	bcc.n	80005a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005aa:	f000 f817 	bl	80005dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ae:	f7ff fe7f 	bl	80002b0 <main>

080005b2 <LoopForever>:

LoopForever:
    b LoopForever
 80005b2:	e7fe      	b.n	80005b2 <LoopForever>
  ldr   r0, =_estack
 80005b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005bc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80005c0:	080017a4 	.word	0x080017a4
  ldr r2, =_sbss
 80005c4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80005c8:	2000009c 	.word	0x2000009c

080005cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005cc:	e7fe      	b.n	80005cc <ADC_IRQHandler>
	...

080005d0 <__errno>:
 80005d0:	4b01      	ldr	r3, [pc, #4]	; (80005d8 <__errno+0x8>)
 80005d2:	6818      	ldr	r0, [r3, #0]
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000000 	.word	0x20000000

080005dc <__libc_init_array>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	4d0d      	ldr	r5, [pc, #52]	; (8000614 <__libc_init_array+0x38>)
 80005e0:	4c0d      	ldr	r4, [pc, #52]	; (8000618 <__libc_init_array+0x3c>)
 80005e2:	1b64      	subs	r4, r4, r5
 80005e4:	10a4      	asrs	r4, r4, #2
 80005e6:	2600      	movs	r6, #0
 80005e8:	42a6      	cmp	r6, r4
 80005ea:	d109      	bne.n	8000600 <__libc_init_array+0x24>
 80005ec:	4d0b      	ldr	r5, [pc, #44]	; (800061c <__libc_init_array+0x40>)
 80005ee:	4c0c      	ldr	r4, [pc, #48]	; (8000620 <__libc_init_array+0x44>)
 80005f0:	f000 ffe8 	bl	80015c4 <_init>
 80005f4:	1b64      	subs	r4, r4, r5
 80005f6:	10a4      	asrs	r4, r4, #2
 80005f8:	2600      	movs	r6, #0
 80005fa:	42a6      	cmp	r6, r4
 80005fc:	d105      	bne.n	800060a <__libc_init_array+0x2e>
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f855 3b04 	ldr.w	r3, [r5], #4
 8000604:	4798      	blx	r3
 8000606:	3601      	adds	r6, #1
 8000608:	e7ee      	b.n	80005e8 <__libc_init_array+0xc>
 800060a:	f855 3b04 	ldr.w	r3, [r5], #4
 800060e:	4798      	blx	r3
 8000610:	3601      	adds	r6, #1
 8000612:	e7f2      	b.n	80005fa <__libc_init_array+0x1e>
 8000614:	0800179c 	.word	0x0800179c
 8000618:	0800179c 	.word	0x0800179c
 800061c:	0800179c 	.word	0x0800179c
 8000620:	080017a0 	.word	0x080017a0

08000624 <memset>:
 8000624:	4402      	add	r2, r0
 8000626:	4603      	mov	r3, r0
 8000628:	4293      	cmp	r3, r2
 800062a:	d100      	bne.n	800062e <memset+0xa>
 800062c:	4770      	bx	lr
 800062e:	f803 1b01 	strb.w	r1, [r3], #1
 8000632:	e7f9      	b.n	8000628 <memset+0x4>

08000634 <iprintf>:
 8000634:	b40f      	push	{r0, r1, r2, r3}
 8000636:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <iprintf+0x2c>)
 8000638:	b513      	push	{r0, r1, r4, lr}
 800063a:	681c      	ldr	r4, [r3, #0]
 800063c:	b124      	cbz	r4, 8000648 <iprintf+0x14>
 800063e:	69a3      	ldr	r3, [r4, #24]
 8000640:	b913      	cbnz	r3, 8000648 <iprintf+0x14>
 8000642:	4620      	mov	r0, r4
 8000644:	f000 fa5e 	bl	8000b04 <__sinit>
 8000648:	ab05      	add	r3, sp, #20
 800064a:	9a04      	ldr	r2, [sp, #16]
 800064c:	68a1      	ldr	r1, [r4, #8]
 800064e:	9301      	str	r3, [sp, #4]
 8000650:	4620      	mov	r0, r4
 8000652:	f000 fc2b 	bl	8000eac <_vfiprintf_r>
 8000656:	b002      	add	sp, #8
 8000658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800065c:	b004      	add	sp, #16
 800065e:	4770      	bx	lr
 8000660:	20000000 	.word	0x20000000

08000664 <_puts_r>:
 8000664:	b570      	push	{r4, r5, r6, lr}
 8000666:	460e      	mov	r6, r1
 8000668:	4605      	mov	r5, r0
 800066a:	b118      	cbz	r0, 8000674 <_puts_r+0x10>
 800066c:	6983      	ldr	r3, [r0, #24]
 800066e:	b90b      	cbnz	r3, 8000674 <_puts_r+0x10>
 8000670:	f000 fa48 	bl	8000b04 <__sinit>
 8000674:	69ab      	ldr	r3, [r5, #24]
 8000676:	68ac      	ldr	r4, [r5, #8]
 8000678:	b913      	cbnz	r3, 8000680 <_puts_r+0x1c>
 800067a:	4628      	mov	r0, r5
 800067c:	f000 fa42 	bl	8000b04 <__sinit>
 8000680:	4b2c      	ldr	r3, [pc, #176]	; (8000734 <_puts_r+0xd0>)
 8000682:	429c      	cmp	r4, r3
 8000684:	d120      	bne.n	80006c8 <_puts_r+0x64>
 8000686:	686c      	ldr	r4, [r5, #4]
 8000688:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800068a:	07db      	lsls	r3, r3, #31
 800068c:	d405      	bmi.n	800069a <_puts_r+0x36>
 800068e:	89a3      	ldrh	r3, [r4, #12]
 8000690:	0598      	lsls	r0, r3, #22
 8000692:	d402      	bmi.n	800069a <_puts_r+0x36>
 8000694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000696:	f000 fad3 	bl	8000c40 <__retarget_lock_acquire_recursive>
 800069a:	89a3      	ldrh	r3, [r4, #12]
 800069c:	0719      	lsls	r1, r3, #28
 800069e:	d51d      	bpl.n	80006dc <_puts_r+0x78>
 80006a0:	6923      	ldr	r3, [r4, #16]
 80006a2:	b1db      	cbz	r3, 80006dc <_puts_r+0x78>
 80006a4:	3e01      	subs	r6, #1
 80006a6:	68a3      	ldr	r3, [r4, #8]
 80006a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80006ac:	3b01      	subs	r3, #1
 80006ae:	60a3      	str	r3, [r4, #8]
 80006b0:	bb39      	cbnz	r1, 8000702 <_puts_r+0x9e>
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	da38      	bge.n	8000728 <_puts_r+0xc4>
 80006b6:	4622      	mov	r2, r4
 80006b8:	210a      	movs	r1, #10
 80006ba:	4628      	mov	r0, r5
 80006bc:	f000 f848 	bl	8000750 <__swbuf_r>
 80006c0:	3001      	adds	r0, #1
 80006c2:	d011      	beq.n	80006e8 <_puts_r+0x84>
 80006c4:	250a      	movs	r5, #10
 80006c6:	e011      	b.n	80006ec <_puts_r+0x88>
 80006c8:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <_puts_r+0xd4>)
 80006ca:	429c      	cmp	r4, r3
 80006cc:	d101      	bne.n	80006d2 <_puts_r+0x6e>
 80006ce:	68ac      	ldr	r4, [r5, #8]
 80006d0:	e7da      	b.n	8000688 <_puts_r+0x24>
 80006d2:	4b1a      	ldr	r3, [pc, #104]	; (800073c <_puts_r+0xd8>)
 80006d4:	429c      	cmp	r4, r3
 80006d6:	bf08      	it	eq
 80006d8:	68ec      	ldreq	r4, [r5, #12]
 80006da:	e7d5      	b.n	8000688 <_puts_r+0x24>
 80006dc:	4621      	mov	r1, r4
 80006de:	4628      	mov	r0, r5
 80006e0:	f000 f888 	bl	80007f4 <__swsetup_r>
 80006e4:	2800      	cmp	r0, #0
 80006e6:	d0dd      	beq.n	80006a4 <_puts_r+0x40>
 80006e8:	f04f 35ff 	mov.w	r5, #4294967295
 80006ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80006ee:	07da      	lsls	r2, r3, #31
 80006f0:	d405      	bmi.n	80006fe <_puts_r+0x9a>
 80006f2:	89a3      	ldrh	r3, [r4, #12]
 80006f4:	059b      	lsls	r3, r3, #22
 80006f6:	d402      	bmi.n	80006fe <_puts_r+0x9a>
 80006f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80006fa:	f000 faa2 	bl	8000c42 <__retarget_lock_release_recursive>
 80006fe:	4628      	mov	r0, r5
 8000700:	bd70      	pop	{r4, r5, r6, pc}
 8000702:	2b00      	cmp	r3, #0
 8000704:	da04      	bge.n	8000710 <_puts_r+0xac>
 8000706:	69a2      	ldr	r2, [r4, #24]
 8000708:	429a      	cmp	r2, r3
 800070a:	dc06      	bgt.n	800071a <_puts_r+0xb6>
 800070c:	290a      	cmp	r1, #10
 800070e:	d004      	beq.n	800071a <_puts_r+0xb6>
 8000710:	6823      	ldr	r3, [r4, #0]
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	6022      	str	r2, [r4, #0]
 8000716:	7019      	strb	r1, [r3, #0]
 8000718:	e7c5      	b.n	80006a6 <_puts_r+0x42>
 800071a:	4622      	mov	r2, r4
 800071c:	4628      	mov	r0, r5
 800071e:	f000 f817 	bl	8000750 <__swbuf_r>
 8000722:	3001      	adds	r0, #1
 8000724:	d1bf      	bne.n	80006a6 <_puts_r+0x42>
 8000726:	e7df      	b.n	80006e8 <_puts_r+0x84>
 8000728:	6823      	ldr	r3, [r4, #0]
 800072a:	250a      	movs	r5, #10
 800072c:	1c5a      	adds	r2, r3, #1
 800072e:	6022      	str	r2, [r4, #0]
 8000730:	701d      	strb	r5, [r3, #0]
 8000732:	e7db      	b.n	80006ec <_puts_r+0x88>
 8000734:	08001728 	.word	0x08001728
 8000738:	08001748 	.word	0x08001748
 800073c:	08001708 	.word	0x08001708

08000740 <puts>:
 8000740:	4b02      	ldr	r3, [pc, #8]	; (800074c <puts+0xc>)
 8000742:	4601      	mov	r1, r0
 8000744:	6818      	ldr	r0, [r3, #0]
 8000746:	f7ff bf8d 	b.w	8000664 <_puts_r>
 800074a:	bf00      	nop
 800074c:	20000000 	.word	0x20000000

08000750 <__swbuf_r>:
 8000750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000752:	460e      	mov	r6, r1
 8000754:	4614      	mov	r4, r2
 8000756:	4605      	mov	r5, r0
 8000758:	b118      	cbz	r0, 8000762 <__swbuf_r+0x12>
 800075a:	6983      	ldr	r3, [r0, #24]
 800075c:	b90b      	cbnz	r3, 8000762 <__swbuf_r+0x12>
 800075e:	f000 f9d1 	bl	8000b04 <__sinit>
 8000762:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <__swbuf_r+0x98>)
 8000764:	429c      	cmp	r4, r3
 8000766:	d12b      	bne.n	80007c0 <__swbuf_r+0x70>
 8000768:	686c      	ldr	r4, [r5, #4]
 800076a:	69a3      	ldr	r3, [r4, #24]
 800076c:	60a3      	str	r3, [r4, #8]
 800076e:	89a3      	ldrh	r3, [r4, #12]
 8000770:	071a      	lsls	r2, r3, #28
 8000772:	d52f      	bpl.n	80007d4 <__swbuf_r+0x84>
 8000774:	6923      	ldr	r3, [r4, #16]
 8000776:	b36b      	cbz	r3, 80007d4 <__swbuf_r+0x84>
 8000778:	6923      	ldr	r3, [r4, #16]
 800077a:	6820      	ldr	r0, [r4, #0]
 800077c:	1ac0      	subs	r0, r0, r3
 800077e:	6963      	ldr	r3, [r4, #20]
 8000780:	b2f6      	uxtb	r6, r6
 8000782:	4283      	cmp	r3, r0
 8000784:	4637      	mov	r7, r6
 8000786:	dc04      	bgt.n	8000792 <__swbuf_r+0x42>
 8000788:	4621      	mov	r1, r4
 800078a:	4628      	mov	r0, r5
 800078c:	f000 f926 	bl	80009dc <_fflush_r>
 8000790:	bb30      	cbnz	r0, 80007e0 <__swbuf_r+0x90>
 8000792:	68a3      	ldr	r3, [r4, #8]
 8000794:	3b01      	subs	r3, #1
 8000796:	60a3      	str	r3, [r4, #8]
 8000798:	6823      	ldr	r3, [r4, #0]
 800079a:	1c5a      	adds	r2, r3, #1
 800079c:	6022      	str	r2, [r4, #0]
 800079e:	701e      	strb	r6, [r3, #0]
 80007a0:	6963      	ldr	r3, [r4, #20]
 80007a2:	3001      	adds	r0, #1
 80007a4:	4283      	cmp	r3, r0
 80007a6:	d004      	beq.n	80007b2 <__swbuf_r+0x62>
 80007a8:	89a3      	ldrh	r3, [r4, #12]
 80007aa:	07db      	lsls	r3, r3, #31
 80007ac:	d506      	bpl.n	80007bc <__swbuf_r+0x6c>
 80007ae:	2e0a      	cmp	r6, #10
 80007b0:	d104      	bne.n	80007bc <__swbuf_r+0x6c>
 80007b2:	4621      	mov	r1, r4
 80007b4:	4628      	mov	r0, r5
 80007b6:	f000 f911 	bl	80009dc <_fflush_r>
 80007ba:	b988      	cbnz	r0, 80007e0 <__swbuf_r+0x90>
 80007bc:	4638      	mov	r0, r7
 80007be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <__swbuf_r+0x9c>)
 80007c2:	429c      	cmp	r4, r3
 80007c4:	d101      	bne.n	80007ca <__swbuf_r+0x7a>
 80007c6:	68ac      	ldr	r4, [r5, #8]
 80007c8:	e7cf      	b.n	800076a <__swbuf_r+0x1a>
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <__swbuf_r+0xa0>)
 80007cc:	429c      	cmp	r4, r3
 80007ce:	bf08      	it	eq
 80007d0:	68ec      	ldreq	r4, [r5, #12]
 80007d2:	e7ca      	b.n	800076a <__swbuf_r+0x1a>
 80007d4:	4621      	mov	r1, r4
 80007d6:	4628      	mov	r0, r5
 80007d8:	f000 f80c 	bl	80007f4 <__swsetup_r>
 80007dc:	2800      	cmp	r0, #0
 80007de:	d0cb      	beq.n	8000778 <__swbuf_r+0x28>
 80007e0:	f04f 37ff 	mov.w	r7, #4294967295
 80007e4:	e7ea      	b.n	80007bc <__swbuf_r+0x6c>
 80007e6:	bf00      	nop
 80007e8:	08001728 	.word	0x08001728
 80007ec:	08001748 	.word	0x08001748
 80007f0:	08001708 	.word	0x08001708

080007f4 <__swsetup_r>:
 80007f4:	4b32      	ldr	r3, [pc, #200]	; (80008c0 <__swsetup_r+0xcc>)
 80007f6:	b570      	push	{r4, r5, r6, lr}
 80007f8:	681d      	ldr	r5, [r3, #0]
 80007fa:	4606      	mov	r6, r0
 80007fc:	460c      	mov	r4, r1
 80007fe:	b125      	cbz	r5, 800080a <__swsetup_r+0x16>
 8000800:	69ab      	ldr	r3, [r5, #24]
 8000802:	b913      	cbnz	r3, 800080a <__swsetup_r+0x16>
 8000804:	4628      	mov	r0, r5
 8000806:	f000 f97d 	bl	8000b04 <__sinit>
 800080a:	4b2e      	ldr	r3, [pc, #184]	; (80008c4 <__swsetup_r+0xd0>)
 800080c:	429c      	cmp	r4, r3
 800080e:	d10f      	bne.n	8000830 <__swsetup_r+0x3c>
 8000810:	686c      	ldr	r4, [r5, #4]
 8000812:	89a3      	ldrh	r3, [r4, #12]
 8000814:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000818:	0719      	lsls	r1, r3, #28
 800081a:	d42c      	bmi.n	8000876 <__swsetup_r+0x82>
 800081c:	06dd      	lsls	r5, r3, #27
 800081e:	d411      	bmi.n	8000844 <__swsetup_r+0x50>
 8000820:	2309      	movs	r3, #9
 8000822:	6033      	str	r3, [r6, #0]
 8000824:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000828:	81a3      	strh	r3, [r4, #12]
 800082a:	f04f 30ff 	mov.w	r0, #4294967295
 800082e:	e03e      	b.n	80008ae <__swsetup_r+0xba>
 8000830:	4b25      	ldr	r3, [pc, #148]	; (80008c8 <__swsetup_r+0xd4>)
 8000832:	429c      	cmp	r4, r3
 8000834:	d101      	bne.n	800083a <__swsetup_r+0x46>
 8000836:	68ac      	ldr	r4, [r5, #8]
 8000838:	e7eb      	b.n	8000812 <__swsetup_r+0x1e>
 800083a:	4b24      	ldr	r3, [pc, #144]	; (80008cc <__swsetup_r+0xd8>)
 800083c:	429c      	cmp	r4, r3
 800083e:	bf08      	it	eq
 8000840:	68ec      	ldreq	r4, [r5, #12]
 8000842:	e7e6      	b.n	8000812 <__swsetup_r+0x1e>
 8000844:	0758      	lsls	r0, r3, #29
 8000846:	d512      	bpl.n	800086e <__swsetup_r+0x7a>
 8000848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800084a:	b141      	cbz	r1, 800085e <__swsetup_r+0x6a>
 800084c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000850:	4299      	cmp	r1, r3
 8000852:	d002      	beq.n	800085a <__swsetup_r+0x66>
 8000854:	4630      	mov	r0, r6
 8000856:	f000 fa59 	bl	8000d0c <_free_r>
 800085a:	2300      	movs	r3, #0
 800085c:	6363      	str	r3, [r4, #52]	; 0x34
 800085e:	89a3      	ldrh	r3, [r4, #12]
 8000860:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000864:	81a3      	strh	r3, [r4, #12]
 8000866:	2300      	movs	r3, #0
 8000868:	6063      	str	r3, [r4, #4]
 800086a:	6923      	ldr	r3, [r4, #16]
 800086c:	6023      	str	r3, [r4, #0]
 800086e:	89a3      	ldrh	r3, [r4, #12]
 8000870:	f043 0308 	orr.w	r3, r3, #8
 8000874:	81a3      	strh	r3, [r4, #12]
 8000876:	6923      	ldr	r3, [r4, #16]
 8000878:	b94b      	cbnz	r3, 800088e <__swsetup_r+0x9a>
 800087a:	89a3      	ldrh	r3, [r4, #12]
 800087c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000884:	d003      	beq.n	800088e <__swsetup_r+0x9a>
 8000886:	4621      	mov	r1, r4
 8000888:	4630      	mov	r0, r6
 800088a:	f000 f9ff 	bl	8000c8c <__smakebuf_r>
 800088e:	89a0      	ldrh	r0, [r4, #12]
 8000890:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000894:	f010 0301 	ands.w	r3, r0, #1
 8000898:	d00a      	beq.n	80008b0 <__swsetup_r+0xbc>
 800089a:	2300      	movs	r3, #0
 800089c:	60a3      	str	r3, [r4, #8]
 800089e:	6963      	ldr	r3, [r4, #20]
 80008a0:	425b      	negs	r3, r3
 80008a2:	61a3      	str	r3, [r4, #24]
 80008a4:	6923      	ldr	r3, [r4, #16]
 80008a6:	b943      	cbnz	r3, 80008ba <__swsetup_r+0xc6>
 80008a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80008ac:	d1ba      	bne.n	8000824 <__swsetup_r+0x30>
 80008ae:	bd70      	pop	{r4, r5, r6, pc}
 80008b0:	0781      	lsls	r1, r0, #30
 80008b2:	bf58      	it	pl
 80008b4:	6963      	ldrpl	r3, [r4, #20]
 80008b6:	60a3      	str	r3, [r4, #8]
 80008b8:	e7f4      	b.n	80008a4 <__swsetup_r+0xb0>
 80008ba:	2000      	movs	r0, #0
 80008bc:	e7f7      	b.n	80008ae <__swsetup_r+0xba>
 80008be:	bf00      	nop
 80008c0:	20000000 	.word	0x20000000
 80008c4:	08001728 	.word	0x08001728
 80008c8:	08001748 	.word	0x08001748
 80008cc:	08001708 	.word	0x08001708

080008d0 <__sflush_r>:
 80008d0:	898a      	ldrh	r2, [r1, #12]
 80008d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008d6:	4605      	mov	r5, r0
 80008d8:	0710      	lsls	r0, r2, #28
 80008da:	460c      	mov	r4, r1
 80008dc:	d458      	bmi.n	8000990 <__sflush_r+0xc0>
 80008de:	684b      	ldr	r3, [r1, #4]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	dc05      	bgt.n	80008f0 <__sflush_r+0x20>
 80008e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	dc02      	bgt.n	80008f0 <__sflush_r+0x20>
 80008ea:	2000      	movs	r0, #0
 80008ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d0f9      	beq.n	80008ea <__sflush_r+0x1a>
 80008f6:	2300      	movs	r3, #0
 80008f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80008fc:	682f      	ldr	r7, [r5, #0]
 80008fe:	602b      	str	r3, [r5, #0]
 8000900:	d032      	beq.n	8000968 <__sflush_r+0x98>
 8000902:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000904:	89a3      	ldrh	r3, [r4, #12]
 8000906:	075a      	lsls	r2, r3, #29
 8000908:	d505      	bpl.n	8000916 <__sflush_r+0x46>
 800090a:	6863      	ldr	r3, [r4, #4]
 800090c:	1ac0      	subs	r0, r0, r3
 800090e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000910:	b10b      	cbz	r3, 8000916 <__sflush_r+0x46>
 8000912:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000914:	1ac0      	subs	r0, r0, r3
 8000916:	2300      	movs	r3, #0
 8000918:	4602      	mov	r2, r0
 800091a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800091c:	6a21      	ldr	r1, [r4, #32]
 800091e:	4628      	mov	r0, r5
 8000920:	47b0      	blx	r6
 8000922:	1c43      	adds	r3, r0, #1
 8000924:	89a3      	ldrh	r3, [r4, #12]
 8000926:	d106      	bne.n	8000936 <__sflush_r+0x66>
 8000928:	6829      	ldr	r1, [r5, #0]
 800092a:	291d      	cmp	r1, #29
 800092c:	d82c      	bhi.n	8000988 <__sflush_r+0xb8>
 800092e:	4a2a      	ldr	r2, [pc, #168]	; (80009d8 <__sflush_r+0x108>)
 8000930:	40ca      	lsrs	r2, r1
 8000932:	07d6      	lsls	r6, r2, #31
 8000934:	d528      	bpl.n	8000988 <__sflush_r+0xb8>
 8000936:	2200      	movs	r2, #0
 8000938:	6062      	str	r2, [r4, #4]
 800093a:	04d9      	lsls	r1, r3, #19
 800093c:	6922      	ldr	r2, [r4, #16]
 800093e:	6022      	str	r2, [r4, #0]
 8000940:	d504      	bpl.n	800094c <__sflush_r+0x7c>
 8000942:	1c42      	adds	r2, r0, #1
 8000944:	d101      	bne.n	800094a <__sflush_r+0x7a>
 8000946:	682b      	ldr	r3, [r5, #0]
 8000948:	b903      	cbnz	r3, 800094c <__sflush_r+0x7c>
 800094a:	6560      	str	r0, [r4, #84]	; 0x54
 800094c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800094e:	602f      	str	r7, [r5, #0]
 8000950:	2900      	cmp	r1, #0
 8000952:	d0ca      	beq.n	80008ea <__sflush_r+0x1a>
 8000954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000958:	4299      	cmp	r1, r3
 800095a:	d002      	beq.n	8000962 <__sflush_r+0x92>
 800095c:	4628      	mov	r0, r5
 800095e:	f000 f9d5 	bl	8000d0c <_free_r>
 8000962:	2000      	movs	r0, #0
 8000964:	6360      	str	r0, [r4, #52]	; 0x34
 8000966:	e7c1      	b.n	80008ec <__sflush_r+0x1c>
 8000968:	6a21      	ldr	r1, [r4, #32]
 800096a:	2301      	movs	r3, #1
 800096c:	4628      	mov	r0, r5
 800096e:	47b0      	blx	r6
 8000970:	1c41      	adds	r1, r0, #1
 8000972:	d1c7      	bne.n	8000904 <__sflush_r+0x34>
 8000974:	682b      	ldr	r3, [r5, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d0c4      	beq.n	8000904 <__sflush_r+0x34>
 800097a:	2b1d      	cmp	r3, #29
 800097c:	d001      	beq.n	8000982 <__sflush_r+0xb2>
 800097e:	2b16      	cmp	r3, #22
 8000980:	d101      	bne.n	8000986 <__sflush_r+0xb6>
 8000982:	602f      	str	r7, [r5, #0]
 8000984:	e7b1      	b.n	80008ea <__sflush_r+0x1a>
 8000986:	89a3      	ldrh	r3, [r4, #12]
 8000988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800098c:	81a3      	strh	r3, [r4, #12]
 800098e:	e7ad      	b.n	80008ec <__sflush_r+0x1c>
 8000990:	690f      	ldr	r7, [r1, #16]
 8000992:	2f00      	cmp	r7, #0
 8000994:	d0a9      	beq.n	80008ea <__sflush_r+0x1a>
 8000996:	0793      	lsls	r3, r2, #30
 8000998:	680e      	ldr	r6, [r1, #0]
 800099a:	bf08      	it	eq
 800099c:	694b      	ldreq	r3, [r1, #20]
 800099e:	600f      	str	r7, [r1, #0]
 80009a0:	bf18      	it	ne
 80009a2:	2300      	movne	r3, #0
 80009a4:	eba6 0807 	sub.w	r8, r6, r7
 80009a8:	608b      	str	r3, [r1, #8]
 80009aa:	f1b8 0f00 	cmp.w	r8, #0
 80009ae:	dd9c      	ble.n	80008ea <__sflush_r+0x1a>
 80009b0:	6a21      	ldr	r1, [r4, #32]
 80009b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80009b4:	4643      	mov	r3, r8
 80009b6:	463a      	mov	r2, r7
 80009b8:	4628      	mov	r0, r5
 80009ba:	47b0      	blx	r6
 80009bc:	2800      	cmp	r0, #0
 80009be:	dc06      	bgt.n	80009ce <__sflush_r+0xfe>
 80009c0:	89a3      	ldrh	r3, [r4, #12]
 80009c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c6:	81a3      	strh	r3, [r4, #12]
 80009c8:	f04f 30ff 	mov.w	r0, #4294967295
 80009cc:	e78e      	b.n	80008ec <__sflush_r+0x1c>
 80009ce:	4407      	add	r7, r0
 80009d0:	eba8 0800 	sub.w	r8, r8, r0
 80009d4:	e7e9      	b.n	80009aa <__sflush_r+0xda>
 80009d6:	bf00      	nop
 80009d8:	20400001 	.word	0x20400001

080009dc <_fflush_r>:
 80009dc:	b538      	push	{r3, r4, r5, lr}
 80009de:	690b      	ldr	r3, [r1, #16]
 80009e0:	4605      	mov	r5, r0
 80009e2:	460c      	mov	r4, r1
 80009e4:	b913      	cbnz	r3, 80009ec <_fflush_r+0x10>
 80009e6:	2500      	movs	r5, #0
 80009e8:	4628      	mov	r0, r5
 80009ea:	bd38      	pop	{r3, r4, r5, pc}
 80009ec:	b118      	cbz	r0, 80009f6 <_fflush_r+0x1a>
 80009ee:	6983      	ldr	r3, [r0, #24]
 80009f0:	b90b      	cbnz	r3, 80009f6 <_fflush_r+0x1a>
 80009f2:	f000 f887 	bl	8000b04 <__sinit>
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <_fflush_r+0x6c>)
 80009f8:	429c      	cmp	r4, r3
 80009fa:	d11b      	bne.n	8000a34 <_fflush_r+0x58>
 80009fc:	686c      	ldr	r4, [r5, #4]
 80009fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d0ef      	beq.n	80009e6 <_fflush_r+0xa>
 8000a06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000a08:	07d0      	lsls	r0, r2, #31
 8000a0a:	d404      	bmi.n	8000a16 <_fflush_r+0x3a>
 8000a0c:	0599      	lsls	r1, r3, #22
 8000a0e:	d402      	bmi.n	8000a16 <_fflush_r+0x3a>
 8000a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a12:	f000 f915 	bl	8000c40 <__retarget_lock_acquire_recursive>
 8000a16:	4628      	mov	r0, r5
 8000a18:	4621      	mov	r1, r4
 8000a1a:	f7ff ff59 	bl	80008d0 <__sflush_r>
 8000a1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a20:	07da      	lsls	r2, r3, #31
 8000a22:	4605      	mov	r5, r0
 8000a24:	d4e0      	bmi.n	80009e8 <_fflush_r+0xc>
 8000a26:	89a3      	ldrh	r3, [r4, #12]
 8000a28:	059b      	lsls	r3, r3, #22
 8000a2a:	d4dd      	bmi.n	80009e8 <_fflush_r+0xc>
 8000a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a2e:	f000 f908 	bl	8000c42 <__retarget_lock_release_recursive>
 8000a32:	e7d9      	b.n	80009e8 <_fflush_r+0xc>
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <_fflush_r+0x70>)
 8000a36:	429c      	cmp	r4, r3
 8000a38:	d101      	bne.n	8000a3e <_fflush_r+0x62>
 8000a3a:	68ac      	ldr	r4, [r5, #8]
 8000a3c:	e7df      	b.n	80009fe <_fflush_r+0x22>
 8000a3e:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <_fflush_r+0x74>)
 8000a40:	429c      	cmp	r4, r3
 8000a42:	bf08      	it	eq
 8000a44:	68ec      	ldreq	r4, [r5, #12]
 8000a46:	e7da      	b.n	80009fe <_fflush_r+0x22>
 8000a48:	08001728 	.word	0x08001728
 8000a4c:	08001748 	.word	0x08001748
 8000a50:	08001708 	.word	0x08001708

08000a54 <std>:
 8000a54:	2300      	movs	r3, #0
 8000a56:	b510      	push	{r4, lr}
 8000a58:	4604      	mov	r4, r0
 8000a5a:	e9c0 3300 	strd	r3, r3, [r0]
 8000a5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a62:	6083      	str	r3, [r0, #8]
 8000a64:	8181      	strh	r1, [r0, #12]
 8000a66:	6643      	str	r3, [r0, #100]	; 0x64
 8000a68:	81c2      	strh	r2, [r0, #14]
 8000a6a:	6183      	str	r3, [r0, #24]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	2208      	movs	r2, #8
 8000a70:	305c      	adds	r0, #92	; 0x5c
 8000a72:	f7ff fdd7 	bl	8000624 <memset>
 8000a76:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <std+0x38>)
 8000a78:	6263      	str	r3, [r4, #36]	; 0x24
 8000a7a:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <std+0x3c>)
 8000a7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000a7e:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <std+0x40>)
 8000a80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a82:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <std+0x44>)
 8000a84:	6224      	str	r4, [r4, #32]
 8000a86:	6323      	str	r3, [r4, #48]	; 0x30
 8000a88:	bd10      	pop	{r4, pc}
 8000a8a:	bf00      	nop
 8000a8c:	08001455 	.word	0x08001455
 8000a90:	08001477 	.word	0x08001477
 8000a94:	080014af 	.word	0x080014af
 8000a98:	080014d3 	.word	0x080014d3

08000a9c <_cleanup_r>:
 8000a9c:	4901      	ldr	r1, [pc, #4]	; (8000aa4 <_cleanup_r+0x8>)
 8000a9e:	f000 b8af 	b.w	8000c00 <_fwalk_reent>
 8000aa2:	bf00      	nop
 8000aa4:	080009dd 	.word	0x080009dd

08000aa8 <__sfmoreglue>:
 8000aa8:	b570      	push	{r4, r5, r6, lr}
 8000aaa:	1e4a      	subs	r2, r1, #1
 8000aac:	2568      	movs	r5, #104	; 0x68
 8000aae:	4355      	muls	r5, r2
 8000ab0:	460e      	mov	r6, r1
 8000ab2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000ab6:	f000 f977 	bl	8000da8 <_malloc_r>
 8000aba:	4604      	mov	r4, r0
 8000abc:	b140      	cbz	r0, 8000ad0 <__sfmoreglue+0x28>
 8000abe:	2100      	movs	r1, #0
 8000ac0:	e9c0 1600 	strd	r1, r6, [r0]
 8000ac4:	300c      	adds	r0, #12
 8000ac6:	60a0      	str	r0, [r4, #8]
 8000ac8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000acc:	f7ff fdaa 	bl	8000624 <memset>
 8000ad0:	4620      	mov	r0, r4
 8000ad2:	bd70      	pop	{r4, r5, r6, pc}

08000ad4 <__sfp_lock_acquire>:
 8000ad4:	4801      	ldr	r0, [pc, #4]	; (8000adc <__sfp_lock_acquire+0x8>)
 8000ad6:	f000 b8b3 	b.w	8000c40 <__retarget_lock_acquire_recursive>
 8000ada:	bf00      	nop
 8000adc:	20000094 	.word	0x20000094

08000ae0 <__sfp_lock_release>:
 8000ae0:	4801      	ldr	r0, [pc, #4]	; (8000ae8 <__sfp_lock_release+0x8>)
 8000ae2:	f000 b8ae 	b.w	8000c42 <__retarget_lock_release_recursive>
 8000ae6:	bf00      	nop
 8000ae8:	20000094 	.word	0x20000094

08000aec <__sinit_lock_acquire>:
 8000aec:	4801      	ldr	r0, [pc, #4]	; (8000af4 <__sinit_lock_acquire+0x8>)
 8000aee:	f000 b8a7 	b.w	8000c40 <__retarget_lock_acquire_recursive>
 8000af2:	bf00      	nop
 8000af4:	2000008f 	.word	0x2000008f

08000af8 <__sinit_lock_release>:
 8000af8:	4801      	ldr	r0, [pc, #4]	; (8000b00 <__sinit_lock_release+0x8>)
 8000afa:	f000 b8a2 	b.w	8000c42 <__retarget_lock_release_recursive>
 8000afe:	bf00      	nop
 8000b00:	2000008f 	.word	0x2000008f

08000b04 <__sinit>:
 8000b04:	b510      	push	{r4, lr}
 8000b06:	4604      	mov	r4, r0
 8000b08:	f7ff fff0 	bl	8000aec <__sinit_lock_acquire>
 8000b0c:	69a3      	ldr	r3, [r4, #24]
 8000b0e:	b11b      	cbz	r3, 8000b18 <__sinit+0x14>
 8000b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b14:	f7ff bff0 	b.w	8000af8 <__sinit_lock_release>
 8000b18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000b1c:	6523      	str	r3, [r4, #80]	; 0x50
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <__sinit+0x68>)
 8000b20:	4a13      	ldr	r2, [pc, #76]	; (8000b70 <__sinit+0x6c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	62a2      	str	r2, [r4, #40]	; 0x28
 8000b26:	42a3      	cmp	r3, r4
 8000b28:	bf04      	itt	eq
 8000b2a:	2301      	moveq	r3, #1
 8000b2c:	61a3      	streq	r3, [r4, #24]
 8000b2e:	4620      	mov	r0, r4
 8000b30:	f000 f820 	bl	8000b74 <__sfp>
 8000b34:	6060      	str	r0, [r4, #4]
 8000b36:	4620      	mov	r0, r4
 8000b38:	f000 f81c 	bl	8000b74 <__sfp>
 8000b3c:	60a0      	str	r0, [r4, #8]
 8000b3e:	4620      	mov	r0, r4
 8000b40:	f000 f818 	bl	8000b74 <__sfp>
 8000b44:	2200      	movs	r2, #0
 8000b46:	60e0      	str	r0, [r4, #12]
 8000b48:	2104      	movs	r1, #4
 8000b4a:	6860      	ldr	r0, [r4, #4]
 8000b4c:	f7ff ff82 	bl	8000a54 <std>
 8000b50:	68a0      	ldr	r0, [r4, #8]
 8000b52:	2201      	movs	r2, #1
 8000b54:	2109      	movs	r1, #9
 8000b56:	f7ff ff7d 	bl	8000a54 <std>
 8000b5a:	68e0      	ldr	r0, [r4, #12]
 8000b5c:	2202      	movs	r2, #2
 8000b5e:	2112      	movs	r1, #18
 8000b60:	f7ff ff78 	bl	8000a54 <std>
 8000b64:	2301      	movs	r3, #1
 8000b66:	61a3      	str	r3, [r4, #24]
 8000b68:	e7d2      	b.n	8000b10 <__sinit+0xc>
 8000b6a:	bf00      	nop
 8000b6c:	08001704 	.word	0x08001704
 8000b70:	08000a9d 	.word	0x08000a9d

08000b74 <__sfp>:
 8000b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b76:	4607      	mov	r7, r0
 8000b78:	f7ff ffac 	bl	8000ad4 <__sfp_lock_acquire>
 8000b7c:	4b1e      	ldr	r3, [pc, #120]	; (8000bf8 <__sfp+0x84>)
 8000b7e:	681e      	ldr	r6, [r3, #0]
 8000b80:	69b3      	ldr	r3, [r6, #24]
 8000b82:	b913      	cbnz	r3, 8000b8a <__sfp+0x16>
 8000b84:	4630      	mov	r0, r6
 8000b86:	f7ff ffbd 	bl	8000b04 <__sinit>
 8000b8a:	3648      	adds	r6, #72	; 0x48
 8000b8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	d503      	bpl.n	8000b9c <__sfp+0x28>
 8000b94:	6833      	ldr	r3, [r6, #0]
 8000b96:	b30b      	cbz	r3, 8000bdc <__sfp+0x68>
 8000b98:	6836      	ldr	r6, [r6, #0]
 8000b9a:	e7f7      	b.n	8000b8c <__sfp+0x18>
 8000b9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000ba0:	b9d5      	cbnz	r5, 8000bd8 <__sfp+0x64>
 8000ba2:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <__sfp+0x88>)
 8000ba4:	60e3      	str	r3, [r4, #12]
 8000ba6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000baa:	6665      	str	r5, [r4, #100]	; 0x64
 8000bac:	f000 f847 	bl	8000c3e <__retarget_lock_init_recursive>
 8000bb0:	f7ff ff96 	bl	8000ae0 <__sfp_lock_release>
 8000bb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000bb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000bbc:	6025      	str	r5, [r4, #0]
 8000bbe:	61a5      	str	r5, [r4, #24]
 8000bc0:	2208      	movs	r2, #8
 8000bc2:	4629      	mov	r1, r5
 8000bc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000bc8:	f7ff fd2c 	bl	8000624 <memset>
 8000bcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000bd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000bd4:	4620      	mov	r0, r4
 8000bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bd8:	3468      	adds	r4, #104	; 0x68
 8000bda:	e7d9      	b.n	8000b90 <__sfp+0x1c>
 8000bdc:	2104      	movs	r1, #4
 8000bde:	4638      	mov	r0, r7
 8000be0:	f7ff ff62 	bl	8000aa8 <__sfmoreglue>
 8000be4:	4604      	mov	r4, r0
 8000be6:	6030      	str	r0, [r6, #0]
 8000be8:	2800      	cmp	r0, #0
 8000bea:	d1d5      	bne.n	8000b98 <__sfp+0x24>
 8000bec:	f7ff ff78 	bl	8000ae0 <__sfp_lock_release>
 8000bf0:	230c      	movs	r3, #12
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	e7ee      	b.n	8000bd4 <__sfp+0x60>
 8000bf6:	bf00      	nop
 8000bf8:	08001704 	.word	0x08001704
 8000bfc:	ffff0001 	.word	0xffff0001

08000c00 <_fwalk_reent>:
 8000c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c04:	4606      	mov	r6, r0
 8000c06:	4688      	mov	r8, r1
 8000c08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000c0c:	2700      	movs	r7, #0
 8000c0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c12:	f1b9 0901 	subs.w	r9, r9, #1
 8000c16:	d505      	bpl.n	8000c24 <_fwalk_reent+0x24>
 8000c18:	6824      	ldr	r4, [r4, #0]
 8000c1a:	2c00      	cmp	r4, #0
 8000c1c:	d1f7      	bne.n	8000c0e <_fwalk_reent+0xe>
 8000c1e:	4638      	mov	r0, r7
 8000c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c24:	89ab      	ldrh	r3, [r5, #12]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d907      	bls.n	8000c3a <_fwalk_reent+0x3a>
 8000c2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	d003      	beq.n	8000c3a <_fwalk_reent+0x3a>
 8000c32:	4629      	mov	r1, r5
 8000c34:	4630      	mov	r0, r6
 8000c36:	47c0      	blx	r8
 8000c38:	4307      	orrs	r7, r0
 8000c3a:	3568      	adds	r5, #104	; 0x68
 8000c3c:	e7e9      	b.n	8000c12 <_fwalk_reent+0x12>

08000c3e <__retarget_lock_init_recursive>:
 8000c3e:	4770      	bx	lr

08000c40 <__retarget_lock_acquire_recursive>:
 8000c40:	4770      	bx	lr

08000c42 <__retarget_lock_release_recursive>:
 8000c42:	4770      	bx	lr

08000c44 <__swhatbuf_r>:
 8000c44:	b570      	push	{r4, r5, r6, lr}
 8000c46:	460e      	mov	r6, r1
 8000c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	b096      	sub	sp, #88	; 0x58
 8000c50:	4614      	mov	r4, r2
 8000c52:	461d      	mov	r5, r3
 8000c54:	da07      	bge.n	8000c66 <__swhatbuf_r+0x22>
 8000c56:	2300      	movs	r3, #0
 8000c58:	602b      	str	r3, [r5, #0]
 8000c5a:	89b3      	ldrh	r3, [r6, #12]
 8000c5c:	061a      	lsls	r2, r3, #24
 8000c5e:	d410      	bmi.n	8000c82 <__swhatbuf_r+0x3e>
 8000c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c64:	e00e      	b.n	8000c84 <__swhatbuf_r+0x40>
 8000c66:	466a      	mov	r2, sp
 8000c68:	f000 fc5a 	bl	8001520 <_fstat_r>
 8000c6c:	2800      	cmp	r0, #0
 8000c6e:	dbf2      	blt.n	8000c56 <__swhatbuf_r+0x12>
 8000c70:	9a01      	ldr	r2, [sp, #4]
 8000c72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000c76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000c7a:	425a      	negs	r2, r3
 8000c7c:	415a      	adcs	r2, r3
 8000c7e:	602a      	str	r2, [r5, #0]
 8000c80:	e7ee      	b.n	8000c60 <__swhatbuf_r+0x1c>
 8000c82:	2340      	movs	r3, #64	; 0x40
 8000c84:	2000      	movs	r0, #0
 8000c86:	6023      	str	r3, [r4, #0]
 8000c88:	b016      	add	sp, #88	; 0x58
 8000c8a:	bd70      	pop	{r4, r5, r6, pc}

08000c8c <__smakebuf_r>:
 8000c8c:	898b      	ldrh	r3, [r1, #12]
 8000c8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000c90:	079d      	lsls	r5, r3, #30
 8000c92:	4606      	mov	r6, r0
 8000c94:	460c      	mov	r4, r1
 8000c96:	d507      	bpl.n	8000ca8 <__smakebuf_r+0x1c>
 8000c98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000c9c:	6023      	str	r3, [r4, #0]
 8000c9e:	6123      	str	r3, [r4, #16]
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	6163      	str	r3, [r4, #20]
 8000ca4:	b002      	add	sp, #8
 8000ca6:	bd70      	pop	{r4, r5, r6, pc}
 8000ca8:	ab01      	add	r3, sp, #4
 8000caa:	466a      	mov	r2, sp
 8000cac:	f7ff ffca 	bl	8000c44 <__swhatbuf_r>
 8000cb0:	9900      	ldr	r1, [sp, #0]
 8000cb2:	4605      	mov	r5, r0
 8000cb4:	4630      	mov	r0, r6
 8000cb6:	f000 f877 	bl	8000da8 <_malloc_r>
 8000cba:	b948      	cbnz	r0, 8000cd0 <__smakebuf_r+0x44>
 8000cbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cc0:	059a      	lsls	r2, r3, #22
 8000cc2:	d4ef      	bmi.n	8000ca4 <__smakebuf_r+0x18>
 8000cc4:	f023 0303 	bic.w	r3, r3, #3
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	81a3      	strh	r3, [r4, #12]
 8000cce:	e7e3      	b.n	8000c98 <__smakebuf_r+0xc>
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <__smakebuf_r+0x7c>)
 8000cd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8000cd4:	89a3      	ldrh	r3, [r4, #12]
 8000cd6:	6020      	str	r0, [r4, #0]
 8000cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cdc:	81a3      	strh	r3, [r4, #12]
 8000cde:	9b00      	ldr	r3, [sp, #0]
 8000ce0:	6163      	str	r3, [r4, #20]
 8000ce2:	9b01      	ldr	r3, [sp, #4]
 8000ce4:	6120      	str	r0, [r4, #16]
 8000ce6:	b15b      	cbz	r3, 8000d00 <__smakebuf_r+0x74>
 8000ce8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000cec:	4630      	mov	r0, r6
 8000cee:	f000 fc29 	bl	8001544 <_isatty_r>
 8000cf2:	b128      	cbz	r0, 8000d00 <__smakebuf_r+0x74>
 8000cf4:	89a3      	ldrh	r3, [r4, #12]
 8000cf6:	f023 0303 	bic.w	r3, r3, #3
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	81a3      	strh	r3, [r4, #12]
 8000d00:	89a0      	ldrh	r0, [r4, #12]
 8000d02:	4305      	orrs	r5, r0
 8000d04:	81a5      	strh	r5, [r4, #12]
 8000d06:	e7cd      	b.n	8000ca4 <__smakebuf_r+0x18>
 8000d08:	08000a9d 	.word	0x08000a9d

08000d0c <_free_r>:
 8000d0c:	b538      	push	{r3, r4, r5, lr}
 8000d0e:	4605      	mov	r5, r0
 8000d10:	2900      	cmp	r1, #0
 8000d12:	d045      	beq.n	8000da0 <_free_r+0x94>
 8000d14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d18:	1f0c      	subs	r4, r1, #4
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	bfb8      	it	lt
 8000d1e:	18e4      	addlt	r4, r4, r3
 8000d20:	f000 fc32 	bl	8001588 <__malloc_lock>
 8000d24:	4a1f      	ldr	r2, [pc, #124]	; (8000da4 <_free_r+0x98>)
 8000d26:	6813      	ldr	r3, [r2, #0]
 8000d28:	4610      	mov	r0, r2
 8000d2a:	b933      	cbnz	r3, 8000d3a <_free_r+0x2e>
 8000d2c:	6063      	str	r3, [r4, #4]
 8000d2e:	6014      	str	r4, [r2, #0]
 8000d30:	4628      	mov	r0, r5
 8000d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d36:	f000 bc2d 	b.w	8001594 <__malloc_unlock>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d90b      	bls.n	8000d56 <_free_r+0x4a>
 8000d3e:	6821      	ldr	r1, [r4, #0]
 8000d40:	1862      	adds	r2, r4, r1
 8000d42:	4293      	cmp	r3, r2
 8000d44:	bf04      	itt	eq
 8000d46:	681a      	ldreq	r2, [r3, #0]
 8000d48:	685b      	ldreq	r3, [r3, #4]
 8000d4a:	6063      	str	r3, [r4, #4]
 8000d4c:	bf04      	itt	eq
 8000d4e:	1852      	addeq	r2, r2, r1
 8000d50:	6022      	streq	r2, [r4, #0]
 8000d52:	6004      	str	r4, [r0, #0]
 8000d54:	e7ec      	b.n	8000d30 <_free_r+0x24>
 8000d56:	461a      	mov	r2, r3
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	b10b      	cbz	r3, 8000d60 <_free_r+0x54>
 8000d5c:	42a3      	cmp	r3, r4
 8000d5e:	d9fa      	bls.n	8000d56 <_free_r+0x4a>
 8000d60:	6811      	ldr	r1, [r2, #0]
 8000d62:	1850      	adds	r0, r2, r1
 8000d64:	42a0      	cmp	r0, r4
 8000d66:	d10b      	bne.n	8000d80 <_free_r+0x74>
 8000d68:	6820      	ldr	r0, [r4, #0]
 8000d6a:	4401      	add	r1, r0
 8000d6c:	1850      	adds	r0, r2, r1
 8000d6e:	4283      	cmp	r3, r0
 8000d70:	6011      	str	r1, [r2, #0]
 8000d72:	d1dd      	bne.n	8000d30 <_free_r+0x24>
 8000d74:	6818      	ldr	r0, [r3, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	6053      	str	r3, [r2, #4]
 8000d7a:	4401      	add	r1, r0
 8000d7c:	6011      	str	r1, [r2, #0]
 8000d7e:	e7d7      	b.n	8000d30 <_free_r+0x24>
 8000d80:	d902      	bls.n	8000d88 <_free_r+0x7c>
 8000d82:	230c      	movs	r3, #12
 8000d84:	602b      	str	r3, [r5, #0]
 8000d86:	e7d3      	b.n	8000d30 <_free_r+0x24>
 8000d88:	6820      	ldr	r0, [r4, #0]
 8000d8a:	1821      	adds	r1, r4, r0
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	bf04      	itt	eq
 8000d90:	6819      	ldreq	r1, [r3, #0]
 8000d92:	685b      	ldreq	r3, [r3, #4]
 8000d94:	6063      	str	r3, [r4, #4]
 8000d96:	bf04      	itt	eq
 8000d98:	1809      	addeq	r1, r1, r0
 8000d9a:	6021      	streq	r1, [r4, #0]
 8000d9c:	6054      	str	r4, [r2, #4]
 8000d9e:	e7c7      	b.n	8000d30 <_free_r+0x24>
 8000da0:	bd38      	pop	{r3, r4, r5, pc}
 8000da2:	bf00      	nop
 8000da4:	20000084 	.word	0x20000084

08000da8 <_malloc_r>:
 8000da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000daa:	1ccd      	adds	r5, r1, #3
 8000dac:	f025 0503 	bic.w	r5, r5, #3
 8000db0:	3508      	adds	r5, #8
 8000db2:	2d0c      	cmp	r5, #12
 8000db4:	bf38      	it	cc
 8000db6:	250c      	movcc	r5, #12
 8000db8:	2d00      	cmp	r5, #0
 8000dba:	4606      	mov	r6, r0
 8000dbc:	db01      	blt.n	8000dc2 <_malloc_r+0x1a>
 8000dbe:	42a9      	cmp	r1, r5
 8000dc0:	d903      	bls.n	8000dca <_malloc_r+0x22>
 8000dc2:	230c      	movs	r3, #12
 8000dc4:	6033      	str	r3, [r6, #0]
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dca:	f000 fbdd 	bl	8001588 <__malloc_lock>
 8000dce:	4921      	ldr	r1, [pc, #132]	; (8000e54 <_malloc_r+0xac>)
 8000dd0:	680a      	ldr	r2, [r1, #0]
 8000dd2:	4614      	mov	r4, r2
 8000dd4:	b99c      	cbnz	r4, 8000dfe <_malloc_r+0x56>
 8000dd6:	4f20      	ldr	r7, [pc, #128]	; (8000e58 <_malloc_r+0xb0>)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	b923      	cbnz	r3, 8000de6 <_malloc_r+0x3e>
 8000ddc:	4621      	mov	r1, r4
 8000dde:	4630      	mov	r0, r6
 8000de0:	f000 fb28 	bl	8001434 <_sbrk_r>
 8000de4:	6038      	str	r0, [r7, #0]
 8000de6:	4629      	mov	r1, r5
 8000de8:	4630      	mov	r0, r6
 8000dea:	f000 fb23 	bl	8001434 <_sbrk_r>
 8000dee:	1c43      	adds	r3, r0, #1
 8000df0:	d123      	bne.n	8000e3a <_malloc_r+0x92>
 8000df2:	230c      	movs	r3, #12
 8000df4:	6033      	str	r3, [r6, #0]
 8000df6:	4630      	mov	r0, r6
 8000df8:	f000 fbcc 	bl	8001594 <__malloc_unlock>
 8000dfc:	e7e3      	b.n	8000dc6 <_malloc_r+0x1e>
 8000dfe:	6823      	ldr	r3, [r4, #0]
 8000e00:	1b5b      	subs	r3, r3, r5
 8000e02:	d417      	bmi.n	8000e34 <_malloc_r+0x8c>
 8000e04:	2b0b      	cmp	r3, #11
 8000e06:	d903      	bls.n	8000e10 <_malloc_r+0x68>
 8000e08:	6023      	str	r3, [r4, #0]
 8000e0a:	441c      	add	r4, r3
 8000e0c:	6025      	str	r5, [r4, #0]
 8000e0e:	e004      	b.n	8000e1a <_malloc_r+0x72>
 8000e10:	6863      	ldr	r3, [r4, #4]
 8000e12:	42a2      	cmp	r2, r4
 8000e14:	bf0c      	ite	eq
 8000e16:	600b      	streq	r3, [r1, #0]
 8000e18:	6053      	strne	r3, [r2, #4]
 8000e1a:	4630      	mov	r0, r6
 8000e1c:	f000 fbba 	bl	8001594 <__malloc_unlock>
 8000e20:	f104 000b 	add.w	r0, r4, #11
 8000e24:	1d23      	adds	r3, r4, #4
 8000e26:	f020 0007 	bic.w	r0, r0, #7
 8000e2a:	1ac2      	subs	r2, r0, r3
 8000e2c:	d0cc      	beq.n	8000dc8 <_malloc_r+0x20>
 8000e2e:	1a1b      	subs	r3, r3, r0
 8000e30:	50a3      	str	r3, [r4, r2]
 8000e32:	e7c9      	b.n	8000dc8 <_malloc_r+0x20>
 8000e34:	4622      	mov	r2, r4
 8000e36:	6864      	ldr	r4, [r4, #4]
 8000e38:	e7cc      	b.n	8000dd4 <_malloc_r+0x2c>
 8000e3a:	1cc4      	adds	r4, r0, #3
 8000e3c:	f024 0403 	bic.w	r4, r4, #3
 8000e40:	42a0      	cmp	r0, r4
 8000e42:	d0e3      	beq.n	8000e0c <_malloc_r+0x64>
 8000e44:	1a21      	subs	r1, r4, r0
 8000e46:	4630      	mov	r0, r6
 8000e48:	f000 faf4 	bl	8001434 <_sbrk_r>
 8000e4c:	3001      	adds	r0, #1
 8000e4e:	d1dd      	bne.n	8000e0c <_malloc_r+0x64>
 8000e50:	e7cf      	b.n	8000df2 <_malloc_r+0x4a>
 8000e52:	bf00      	nop
 8000e54:	20000084 	.word	0x20000084
 8000e58:	20000088 	.word	0x20000088

08000e5c <__sfputc_r>:
 8000e5c:	6893      	ldr	r3, [r2, #8]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	b410      	push	{r4}
 8000e64:	6093      	str	r3, [r2, #8]
 8000e66:	da07      	bge.n	8000e78 <__sfputc_r+0x1c>
 8000e68:	6994      	ldr	r4, [r2, #24]
 8000e6a:	42a3      	cmp	r3, r4
 8000e6c:	db01      	blt.n	8000e72 <__sfputc_r+0x16>
 8000e6e:	290a      	cmp	r1, #10
 8000e70:	d102      	bne.n	8000e78 <__sfputc_r+0x1c>
 8000e72:	bc10      	pop	{r4}
 8000e74:	f7ff bc6c 	b.w	8000750 <__swbuf_r>
 8000e78:	6813      	ldr	r3, [r2, #0]
 8000e7a:	1c58      	adds	r0, r3, #1
 8000e7c:	6010      	str	r0, [r2, #0]
 8000e7e:	7019      	strb	r1, [r3, #0]
 8000e80:	4608      	mov	r0, r1
 8000e82:	bc10      	pop	{r4}
 8000e84:	4770      	bx	lr

08000e86 <__sfputs_r>:
 8000e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e88:	4606      	mov	r6, r0
 8000e8a:	460f      	mov	r7, r1
 8000e8c:	4614      	mov	r4, r2
 8000e8e:	18d5      	adds	r5, r2, r3
 8000e90:	42ac      	cmp	r4, r5
 8000e92:	d101      	bne.n	8000e98 <__sfputs_r+0x12>
 8000e94:	2000      	movs	r0, #0
 8000e96:	e007      	b.n	8000ea8 <__sfputs_r+0x22>
 8000e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e9c:	463a      	mov	r2, r7
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	f7ff ffdc 	bl	8000e5c <__sfputc_r>
 8000ea4:	1c43      	adds	r3, r0, #1
 8000ea6:	d1f3      	bne.n	8000e90 <__sfputs_r+0xa>
 8000ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000eac <_vfiprintf_r>:
 8000eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000eb0:	460d      	mov	r5, r1
 8000eb2:	b09d      	sub	sp, #116	; 0x74
 8000eb4:	4614      	mov	r4, r2
 8000eb6:	4698      	mov	r8, r3
 8000eb8:	4606      	mov	r6, r0
 8000eba:	b118      	cbz	r0, 8000ec4 <_vfiprintf_r+0x18>
 8000ebc:	6983      	ldr	r3, [r0, #24]
 8000ebe:	b90b      	cbnz	r3, 8000ec4 <_vfiprintf_r+0x18>
 8000ec0:	f7ff fe20 	bl	8000b04 <__sinit>
 8000ec4:	4b89      	ldr	r3, [pc, #548]	; (80010ec <_vfiprintf_r+0x240>)
 8000ec6:	429d      	cmp	r5, r3
 8000ec8:	d11b      	bne.n	8000f02 <_vfiprintf_r+0x56>
 8000eca:	6875      	ldr	r5, [r6, #4]
 8000ecc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ece:	07d9      	lsls	r1, r3, #31
 8000ed0:	d405      	bmi.n	8000ede <_vfiprintf_r+0x32>
 8000ed2:	89ab      	ldrh	r3, [r5, #12]
 8000ed4:	059a      	lsls	r2, r3, #22
 8000ed6:	d402      	bmi.n	8000ede <_vfiprintf_r+0x32>
 8000ed8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000eda:	f7ff feb1 	bl	8000c40 <__retarget_lock_acquire_recursive>
 8000ede:	89ab      	ldrh	r3, [r5, #12]
 8000ee0:	071b      	lsls	r3, r3, #28
 8000ee2:	d501      	bpl.n	8000ee8 <_vfiprintf_r+0x3c>
 8000ee4:	692b      	ldr	r3, [r5, #16]
 8000ee6:	b9eb      	cbnz	r3, 8000f24 <_vfiprintf_r+0x78>
 8000ee8:	4629      	mov	r1, r5
 8000eea:	4630      	mov	r0, r6
 8000eec:	f7ff fc82 	bl	80007f4 <__swsetup_r>
 8000ef0:	b1c0      	cbz	r0, 8000f24 <_vfiprintf_r+0x78>
 8000ef2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ef4:	07dc      	lsls	r4, r3, #31
 8000ef6:	d50e      	bpl.n	8000f16 <_vfiprintf_r+0x6a>
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	b01d      	add	sp, #116	; 0x74
 8000efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f02:	4b7b      	ldr	r3, [pc, #492]	; (80010f0 <_vfiprintf_r+0x244>)
 8000f04:	429d      	cmp	r5, r3
 8000f06:	d101      	bne.n	8000f0c <_vfiprintf_r+0x60>
 8000f08:	68b5      	ldr	r5, [r6, #8]
 8000f0a:	e7df      	b.n	8000ecc <_vfiprintf_r+0x20>
 8000f0c:	4b79      	ldr	r3, [pc, #484]	; (80010f4 <_vfiprintf_r+0x248>)
 8000f0e:	429d      	cmp	r5, r3
 8000f10:	bf08      	it	eq
 8000f12:	68f5      	ldreq	r5, [r6, #12]
 8000f14:	e7da      	b.n	8000ecc <_vfiprintf_r+0x20>
 8000f16:	89ab      	ldrh	r3, [r5, #12]
 8000f18:	0598      	lsls	r0, r3, #22
 8000f1a:	d4ed      	bmi.n	8000ef8 <_vfiprintf_r+0x4c>
 8000f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f1e:	f7ff fe90 	bl	8000c42 <__retarget_lock_release_recursive>
 8000f22:	e7e9      	b.n	8000ef8 <_vfiprintf_r+0x4c>
 8000f24:	2300      	movs	r3, #0
 8000f26:	9309      	str	r3, [sp, #36]	; 0x24
 8000f28:	2320      	movs	r3, #32
 8000f2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000f2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000f32:	2330      	movs	r3, #48	; 0x30
 8000f34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80010f8 <_vfiprintf_r+0x24c>
 8000f38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000f3c:	f04f 0901 	mov.w	r9, #1
 8000f40:	4623      	mov	r3, r4
 8000f42:	469a      	mov	sl, r3
 8000f44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000f48:	b10a      	cbz	r2, 8000f4e <_vfiprintf_r+0xa2>
 8000f4a:	2a25      	cmp	r2, #37	; 0x25
 8000f4c:	d1f9      	bne.n	8000f42 <_vfiprintf_r+0x96>
 8000f4e:	ebba 0b04 	subs.w	fp, sl, r4
 8000f52:	d00b      	beq.n	8000f6c <_vfiprintf_r+0xc0>
 8000f54:	465b      	mov	r3, fp
 8000f56:	4622      	mov	r2, r4
 8000f58:	4629      	mov	r1, r5
 8000f5a:	4630      	mov	r0, r6
 8000f5c:	f7ff ff93 	bl	8000e86 <__sfputs_r>
 8000f60:	3001      	adds	r0, #1
 8000f62:	f000 80aa 	beq.w	80010ba <_vfiprintf_r+0x20e>
 8000f66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000f68:	445a      	add	r2, fp
 8000f6a:	9209      	str	r2, [sp, #36]	; 0x24
 8000f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f000 80a2 	beq.w	80010ba <_vfiprintf_r+0x20e>
 8000f76:	2300      	movs	r3, #0
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000f80:	f10a 0a01 	add.w	sl, sl, #1
 8000f84:	9304      	str	r3, [sp, #16]
 8000f86:	9307      	str	r3, [sp, #28]
 8000f88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000f8c:	931a      	str	r3, [sp, #104]	; 0x68
 8000f8e:	4654      	mov	r4, sl
 8000f90:	2205      	movs	r2, #5
 8000f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f96:	4858      	ldr	r0, [pc, #352]	; (80010f8 <_vfiprintf_r+0x24c>)
 8000f98:	f7ff f93a 	bl	8000210 <memchr>
 8000f9c:	9a04      	ldr	r2, [sp, #16]
 8000f9e:	b9d8      	cbnz	r0, 8000fd8 <_vfiprintf_r+0x12c>
 8000fa0:	06d1      	lsls	r1, r2, #27
 8000fa2:	bf44      	itt	mi
 8000fa4:	2320      	movmi	r3, #32
 8000fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000faa:	0713      	lsls	r3, r2, #28
 8000fac:	bf44      	itt	mi
 8000fae:	232b      	movmi	r3, #43	; 0x2b
 8000fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8000fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8000fba:	d015      	beq.n	8000fe8 <_vfiprintf_r+0x13c>
 8000fbc:	9a07      	ldr	r2, [sp, #28]
 8000fbe:	4654      	mov	r4, sl
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f04f 0c0a 	mov.w	ip, #10
 8000fc6:	4621      	mov	r1, r4
 8000fc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000fcc:	3b30      	subs	r3, #48	; 0x30
 8000fce:	2b09      	cmp	r3, #9
 8000fd0:	d94e      	bls.n	8001070 <_vfiprintf_r+0x1c4>
 8000fd2:	b1b0      	cbz	r0, 8001002 <_vfiprintf_r+0x156>
 8000fd4:	9207      	str	r2, [sp, #28]
 8000fd6:	e014      	b.n	8001002 <_vfiprintf_r+0x156>
 8000fd8:	eba0 0308 	sub.w	r3, r0, r8
 8000fdc:	fa09 f303 	lsl.w	r3, r9, r3
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	9304      	str	r3, [sp, #16]
 8000fe4:	46a2      	mov	sl, r4
 8000fe6:	e7d2      	b.n	8000f8e <_vfiprintf_r+0xe2>
 8000fe8:	9b03      	ldr	r3, [sp, #12]
 8000fea:	1d19      	adds	r1, r3, #4
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	9103      	str	r1, [sp, #12]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	bfbb      	ittet	lt
 8000ff4:	425b      	neglt	r3, r3
 8000ff6:	f042 0202 	orrlt.w	r2, r2, #2
 8000ffa:	9307      	strge	r3, [sp, #28]
 8000ffc:	9307      	strlt	r3, [sp, #28]
 8000ffe:	bfb8      	it	lt
 8001000:	9204      	strlt	r2, [sp, #16]
 8001002:	7823      	ldrb	r3, [r4, #0]
 8001004:	2b2e      	cmp	r3, #46	; 0x2e
 8001006:	d10c      	bne.n	8001022 <_vfiprintf_r+0x176>
 8001008:	7863      	ldrb	r3, [r4, #1]
 800100a:	2b2a      	cmp	r3, #42	; 0x2a
 800100c:	d135      	bne.n	800107a <_vfiprintf_r+0x1ce>
 800100e:	9b03      	ldr	r3, [sp, #12]
 8001010:	1d1a      	adds	r2, r3, #4
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	9203      	str	r2, [sp, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	bfb8      	it	lt
 800101a:	f04f 33ff 	movlt.w	r3, #4294967295
 800101e:	3402      	adds	r4, #2
 8001020:	9305      	str	r3, [sp, #20]
 8001022:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001108 <_vfiprintf_r+0x25c>
 8001026:	7821      	ldrb	r1, [r4, #0]
 8001028:	2203      	movs	r2, #3
 800102a:	4650      	mov	r0, sl
 800102c:	f7ff f8f0 	bl	8000210 <memchr>
 8001030:	b140      	cbz	r0, 8001044 <_vfiprintf_r+0x198>
 8001032:	2340      	movs	r3, #64	; 0x40
 8001034:	eba0 000a 	sub.w	r0, r0, sl
 8001038:	fa03 f000 	lsl.w	r0, r3, r0
 800103c:	9b04      	ldr	r3, [sp, #16]
 800103e:	4303      	orrs	r3, r0
 8001040:	3401      	adds	r4, #1
 8001042:	9304      	str	r3, [sp, #16]
 8001044:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001048:	482c      	ldr	r0, [pc, #176]	; (80010fc <_vfiprintf_r+0x250>)
 800104a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800104e:	2206      	movs	r2, #6
 8001050:	f7ff f8de 	bl	8000210 <memchr>
 8001054:	2800      	cmp	r0, #0
 8001056:	d03f      	beq.n	80010d8 <_vfiprintf_r+0x22c>
 8001058:	4b29      	ldr	r3, [pc, #164]	; (8001100 <_vfiprintf_r+0x254>)
 800105a:	bb1b      	cbnz	r3, 80010a4 <_vfiprintf_r+0x1f8>
 800105c:	9b03      	ldr	r3, [sp, #12]
 800105e:	3307      	adds	r3, #7
 8001060:	f023 0307 	bic.w	r3, r3, #7
 8001064:	3308      	adds	r3, #8
 8001066:	9303      	str	r3, [sp, #12]
 8001068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800106a:	443b      	add	r3, r7
 800106c:	9309      	str	r3, [sp, #36]	; 0x24
 800106e:	e767      	b.n	8000f40 <_vfiprintf_r+0x94>
 8001070:	fb0c 3202 	mla	r2, ip, r2, r3
 8001074:	460c      	mov	r4, r1
 8001076:	2001      	movs	r0, #1
 8001078:	e7a5      	b.n	8000fc6 <_vfiprintf_r+0x11a>
 800107a:	2300      	movs	r3, #0
 800107c:	3401      	adds	r4, #1
 800107e:	9305      	str	r3, [sp, #20]
 8001080:	4619      	mov	r1, r3
 8001082:	f04f 0c0a 	mov.w	ip, #10
 8001086:	4620      	mov	r0, r4
 8001088:	f810 2b01 	ldrb.w	r2, [r0], #1
 800108c:	3a30      	subs	r2, #48	; 0x30
 800108e:	2a09      	cmp	r2, #9
 8001090:	d903      	bls.n	800109a <_vfiprintf_r+0x1ee>
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0c5      	beq.n	8001022 <_vfiprintf_r+0x176>
 8001096:	9105      	str	r1, [sp, #20]
 8001098:	e7c3      	b.n	8001022 <_vfiprintf_r+0x176>
 800109a:	fb0c 2101 	mla	r1, ip, r1, r2
 800109e:	4604      	mov	r4, r0
 80010a0:	2301      	movs	r3, #1
 80010a2:	e7f0      	b.n	8001086 <_vfiprintf_r+0x1da>
 80010a4:	ab03      	add	r3, sp, #12
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	462a      	mov	r2, r5
 80010aa:	4b16      	ldr	r3, [pc, #88]	; (8001104 <_vfiprintf_r+0x258>)
 80010ac:	a904      	add	r1, sp, #16
 80010ae:	4630      	mov	r0, r6
 80010b0:	f3af 8000 	nop.w
 80010b4:	4607      	mov	r7, r0
 80010b6:	1c78      	adds	r0, r7, #1
 80010b8:	d1d6      	bne.n	8001068 <_vfiprintf_r+0x1bc>
 80010ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80010bc:	07d9      	lsls	r1, r3, #31
 80010be:	d405      	bmi.n	80010cc <_vfiprintf_r+0x220>
 80010c0:	89ab      	ldrh	r3, [r5, #12]
 80010c2:	059a      	lsls	r2, r3, #22
 80010c4:	d402      	bmi.n	80010cc <_vfiprintf_r+0x220>
 80010c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80010c8:	f7ff fdbb 	bl	8000c42 <__retarget_lock_release_recursive>
 80010cc:	89ab      	ldrh	r3, [r5, #12]
 80010ce:	065b      	lsls	r3, r3, #25
 80010d0:	f53f af12 	bmi.w	8000ef8 <_vfiprintf_r+0x4c>
 80010d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80010d6:	e711      	b.n	8000efc <_vfiprintf_r+0x50>
 80010d8:	ab03      	add	r3, sp, #12
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	462a      	mov	r2, r5
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <_vfiprintf_r+0x258>)
 80010e0:	a904      	add	r1, sp, #16
 80010e2:	4630      	mov	r0, r6
 80010e4:	f000 f880 	bl	80011e8 <_printf_i>
 80010e8:	e7e4      	b.n	80010b4 <_vfiprintf_r+0x208>
 80010ea:	bf00      	nop
 80010ec:	08001728 	.word	0x08001728
 80010f0:	08001748 	.word	0x08001748
 80010f4:	08001708 	.word	0x08001708
 80010f8:	08001768 	.word	0x08001768
 80010fc:	08001772 	.word	0x08001772
 8001100:	00000000 	.word	0x00000000
 8001104:	08000e87 	.word	0x08000e87
 8001108:	0800176e 	.word	0x0800176e

0800110c <_printf_common>:
 800110c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001110:	4616      	mov	r6, r2
 8001112:	4699      	mov	r9, r3
 8001114:	688a      	ldr	r2, [r1, #8]
 8001116:	690b      	ldr	r3, [r1, #16]
 8001118:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800111c:	4293      	cmp	r3, r2
 800111e:	bfb8      	it	lt
 8001120:	4613      	movlt	r3, r2
 8001122:	6033      	str	r3, [r6, #0]
 8001124:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001128:	4607      	mov	r7, r0
 800112a:	460c      	mov	r4, r1
 800112c:	b10a      	cbz	r2, 8001132 <_printf_common+0x26>
 800112e:	3301      	adds	r3, #1
 8001130:	6033      	str	r3, [r6, #0]
 8001132:	6823      	ldr	r3, [r4, #0]
 8001134:	0699      	lsls	r1, r3, #26
 8001136:	bf42      	ittt	mi
 8001138:	6833      	ldrmi	r3, [r6, #0]
 800113a:	3302      	addmi	r3, #2
 800113c:	6033      	strmi	r3, [r6, #0]
 800113e:	6825      	ldr	r5, [r4, #0]
 8001140:	f015 0506 	ands.w	r5, r5, #6
 8001144:	d106      	bne.n	8001154 <_printf_common+0x48>
 8001146:	f104 0a19 	add.w	sl, r4, #25
 800114a:	68e3      	ldr	r3, [r4, #12]
 800114c:	6832      	ldr	r2, [r6, #0]
 800114e:	1a9b      	subs	r3, r3, r2
 8001150:	42ab      	cmp	r3, r5
 8001152:	dc26      	bgt.n	80011a2 <_printf_common+0x96>
 8001154:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001158:	1e13      	subs	r3, r2, #0
 800115a:	6822      	ldr	r2, [r4, #0]
 800115c:	bf18      	it	ne
 800115e:	2301      	movne	r3, #1
 8001160:	0692      	lsls	r2, r2, #26
 8001162:	d42b      	bmi.n	80011bc <_printf_common+0xb0>
 8001164:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001168:	4649      	mov	r1, r9
 800116a:	4638      	mov	r0, r7
 800116c:	47c0      	blx	r8
 800116e:	3001      	adds	r0, #1
 8001170:	d01e      	beq.n	80011b0 <_printf_common+0xa4>
 8001172:	6823      	ldr	r3, [r4, #0]
 8001174:	68e5      	ldr	r5, [r4, #12]
 8001176:	6832      	ldr	r2, [r6, #0]
 8001178:	f003 0306 	and.w	r3, r3, #6
 800117c:	2b04      	cmp	r3, #4
 800117e:	bf08      	it	eq
 8001180:	1aad      	subeq	r5, r5, r2
 8001182:	68a3      	ldr	r3, [r4, #8]
 8001184:	6922      	ldr	r2, [r4, #16]
 8001186:	bf0c      	ite	eq
 8001188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800118c:	2500      	movne	r5, #0
 800118e:	4293      	cmp	r3, r2
 8001190:	bfc4      	itt	gt
 8001192:	1a9b      	subgt	r3, r3, r2
 8001194:	18ed      	addgt	r5, r5, r3
 8001196:	2600      	movs	r6, #0
 8001198:	341a      	adds	r4, #26
 800119a:	42b5      	cmp	r5, r6
 800119c:	d11a      	bne.n	80011d4 <_printf_common+0xc8>
 800119e:	2000      	movs	r0, #0
 80011a0:	e008      	b.n	80011b4 <_printf_common+0xa8>
 80011a2:	2301      	movs	r3, #1
 80011a4:	4652      	mov	r2, sl
 80011a6:	4649      	mov	r1, r9
 80011a8:	4638      	mov	r0, r7
 80011aa:	47c0      	blx	r8
 80011ac:	3001      	adds	r0, #1
 80011ae:	d103      	bne.n	80011b8 <_printf_common+0xac>
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011b8:	3501      	adds	r5, #1
 80011ba:	e7c6      	b.n	800114a <_printf_common+0x3e>
 80011bc:	18e1      	adds	r1, r4, r3
 80011be:	1c5a      	adds	r2, r3, #1
 80011c0:	2030      	movs	r0, #48	; 0x30
 80011c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80011c6:	4422      	add	r2, r4
 80011c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80011cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80011d0:	3302      	adds	r3, #2
 80011d2:	e7c7      	b.n	8001164 <_printf_common+0x58>
 80011d4:	2301      	movs	r3, #1
 80011d6:	4622      	mov	r2, r4
 80011d8:	4649      	mov	r1, r9
 80011da:	4638      	mov	r0, r7
 80011dc:	47c0      	blx	r8
 80011de:	3001      	adds	r0, #1
 80011e0:	d0e6      	beq.n	80011b0 <_printf_common+0xa4>
 80011e2:	3601      	adds	r6, #1
 80011e4:	e7d9      	b.n	800119a <_printf_common+0x8e>
	...

080011e8 <_printf_i>:
 80011e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80011ec:	460c      	mov	r4, r1
 80011ee:	4691      	mov	r9, r2
 80011f0:	7e27      	ldrb	r7, [r4, #24]
 80011f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80011f4:	2f78      	cmp	r7, #120	; 0x78
 80011f6:	4680      	mov	r8, r0
 80011f8:	469a      	mov	sl, r3
 80011fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80011fe:	d807      	bhi.n	8001210 <_printf_i+0x28>
 8001200:	2f62      	cmp	r7, #98	; 0x62
 8001202:	d80a      	bhi.n	800121a <_printf_i+0x32>
 8001204:	2f00      	cmp	r7, #0
 8001206:	f000 80d8 	beq.w	80013ba <_printf_i+0x1d2>
 800120a:	2f58      	cmp	r7, #88	; 0x58
 800120c:	f000 80a3 	beq.w	8001356 <_printf_i+0x16e>
 8001210:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001214:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001218:	e03a      	b.n	8001290 <_printf_i+0xa8>
 800121a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800121e:	2b15      	cmp	r3, #21
 8001220:	d8f6      	bhi.n	8001210 <_printf_i+0x28>
 8001222:	a001      	add	r0, pc, #4	; (adr r0, 8001228 <_printf_i+0x40>)
 8001224:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001228:	08001281 	.word	0x08001281
 800122c:	08001295 	.word	0x08001295
 8001230:	08001211 	.word	0x08001211
 8001234:	08001211 	.word	0x08001211
 8001238:	08001211 	.word	0x08001211
 800123c:	08001211 	.word	0x08001211
 8001240:	08001295 	.word	0x08001295
 8001244:	08001211 	.word	0x08001211
 8001248:	08001211 	.word	0x08001211
 800124c:	08001211 	.word	0x08001211
 8001250:	08001211 	.word	0x08001211
 8001254:	080013a1 	.word	0x080013a1
 8001258:	080012c5 	.word	0x080012c5
 800125c:	08001383 	.word	0x08001383
 8001260:	08001211 	.word	0x08001211
 8001264:	08001211 	.word	0x08001211
 8001268:	080013c3 	.word	0x080013c3
 800126c:	08001211 	.word	0x08001211
 8001270:	080012c5 	.word	0x080012c5
 8001274:	08001211 	.word	0x08001211
 8001278:	08001211 	.word	0x08001211
 800127c:	0800138b 	.word	0x0800138b
 8001280:	680b      	ldr	r3, [r1, #0]
 8001282:	1d1a      	adds	r2, r3, #4
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	600a      	str	r2, [r1, #0]
 8001288:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800128c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001290:	2301      	movs	r3, #1
 8001292:	e0a3      	b.n	80013dc <_printf_i+0x1f4>
 8001294:	6825      	ldr	r5, [r4, #0]
 8001296:	6808      	ldr	r0, [r1, #0]
 8001298:	062e      	lsls	r6, r5, #24
 800129a:	f100 0304 	add.w	r3, r0, #4
 800129e:	d50a      	bpl.n	80012b6 <_printf_i+0xce>
 80012a0:	6805      	ldr	r5, [r0, #0]
 80012a2:	600b      	str	r3, [r1, #0]
 80012a4:	2d00      	cmp	r5, #0
 80012a6:	da03      	bge.n	80012b0 <_printf_i+0xc8>
 80012a8:	232d      	movs	r3, #45	; 0x2d
 80012aa:	426d      	negs	r5, r5
 80012ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80012b0:	485e      	ldr	r0, [pc, #376]	; (800142c <_printf_i+0x244>)
 80012b2:	230a      	movs	r3, #10
 80012b4:	e019      	b.n	80012ea <_printf_i+0x102>
 80012b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80012ba:	6805      	ldr	r5, [r0, #0]
 80012bc:	600b      	str	r3, [r1, #0]
 80012be:	bf18      	it	ne
 80012c0:	b22d      	sxthne	r5, r5
 80012c2:	e7ef      	b.n	80012a4 <_printf_i+0xbc>
 80012c4:	680b      	ldr	r3, [r1, #0]
 80012c6:	6825      	ldr	r5, [r4, #0]
 80012c8:	1d18      	adds	r0, r3, #4
 80012ca:	6008      	str	r0, [r1, #0]
 80012cc:	0628      	lsls	r0, r5, #24
 80012ce:	d501      	bpl.n	80012d4 <_printf_i+0xec>
 80012d0:	681d      	ldr	r5, [r3, #0]
 80012d2:	e002      	b.n	80012da <_printf_i+0xf2>
 80012d4:	0669      	lsls	r1, r5, #25
 80012d6:	d5fb      	bpl.n	80012d0 <_printf_i+0xe8>
 80012d8:	881d      	ldrh	r5, [r3, #0]
 80012da:	4854      	ldr	r0, [pc, #336]	; (800142c <_printf_i+0x244>)
 80012dc:	2f6f      	cmp	r7, #111	; 0x6f
 80012de:	bf0c      	ite	eq
 80012e0:	2308      	moveq	r3, #8
 80012e2:	230a      	movne	r3, #10
 80012e4:	2100      	movs	r1, #0
 80012e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80012ea:	6866      	ldr	r6, [r4, #4]
 80012ec:	60a6      	str	r6, [r4, #8]
 80012ee:	2e00      	cmp	r6, #0
 80012f0:	bfa2      	ittt	ge
 80012f2:	6821      	ldrge	r1, [r4, #0]
 80012f4:	f021 0104 	bicge.w	r1, r1, #4
 80012f8:	6021      	strge	r1, [r4, #0]
 80012fa:	b90d      	cbnz	r5, 8001300 <_printf_i+0x118>
 80012fc:	2e00      	cmp	r6, #0
 80012fe:	d04d      	beq.n	800139c <_printf_i+0x1b4>
 8001300:	4616      	mov	r6, r2
 8001302:	fbb5 f1f3 	udiv	r1, r5, r3
 8001306:	fb03 5711 	mls	r7, r3, r1, r5
 800130a:	5dc7      	ldrb	r7, [r0, r7]
 800130c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001310:	462f      	mov	r7, r5
 8001312:	42bb      	cmp	r3, r7
 8001314:	460d      	mov	r5, r1
 8001316:	d9f4      	bls.n	8001302 <_printf_i+0x11a>
 8001318:	2b08      	cmp	r3, #8
 800131a:	d10b      	bne.n	8001334 <_printf_i+0x14c>
 800131c:	6823      	ldr	r3, [r4, #0]
 800131e:	07df      	lsls	r7, r3, #31
 8001320:	d508      	bpl.n	8001334 <_printf_i+0x14c>
 8001322:	6923      	ldr	r3, [r4, #16]
 8001324:	6861      	ldr	r1, [r4, #4]
 8001326:	4299      	cmp	r1, r3
 8001328:	bfde      	ittt	le
 800132a:	2330      	movle	r3, #48	; 0x30
 800132c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001330:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001334:	1b92      	subs	r2, r2, r6
 8001336:	6122      	str	r2, [r4, #16]
 8001338:	f8cd a000 	str.w	sl, [sp]
 800133c:	464b      	mov	r3, r9
 800133e:	aa03      	add	r2, sp, #12
 8001340:	4621      	mov	r1, r4
 8001342:	4640      	mov	r0, r8
 8001344:	f7ff fee2 	bl	800110c <_printf_common>
 8001348:	3001      	adds	r0, #1
 800134a:	d14c      	bne.n	80013e6 <_printf_i+0x1fe>
 800134c:	f04f 30ff 	mov.w	r0, #4294967295
 8001350:	b004      	add	sp, #16
 8001352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001356:	4835      	ldr	r0, [pc, #212]	; (800142c <_printf_i+0x244>)
 8001358:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800135c:	6823      	ldr	r3, [r4, #0]
 800135e:	680e      	ldr	r6, [r1, #0]
 8001360:	061f      	lsls	r7, r3, #24
 8001362:	f856 5b04 	ldr.w	r5, [r6], #4
 8001366:	600e      	str	r6, [r1, #0]
 8001368:	d514      	bpl.n	8001394 <_printf_i+0x1ac>
 800136a:	07d9      	lsls	r1, r3, #31
 800136c:	bf44      	itt	mi
 800136e:	f043 0320 	orrmi.w	r3, r3, #32
 8001372:	6023      	strmi	r3, [r4, #0]
 8001374:	b91d      	cbnz	r5, 800137e <_printf_i+0x196>
 8001376:	6823      	ldr	r3, [r4, #0]
 8001378:	f023 0320 	bic.w	r3, r3, #32
 800137c:	6023      	str	r3, [r4, #0]
 800137e:	2310      	movs	r3, #16
 8001380:	e7b0      	b.n	80012e4 <_printf_i+0xfc>
 8001382:	6823      	ldr	r3, [r4, #0]
 8001384:	f043 0320 	orr.w	r3, r3, #32
 8001388:	6023      	str	r3, [r4, #0]
 800138a:	2378      	movs	r3, #120	; 0x78
 800138c:	4828      	ldr	r0, [pc, #160]	; (8001430 <_printf_i+0x248>)
 800138e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001392:	e7e3      	b.n	800135c <_printf_i+0x174>
 8001394:	065e      	lsls	r6, r3, #25
 8001396:	bf48      	it	mi
 8001398:	b2ad      	uxthmi	r5, r5
 800139a:	e7e6      	b.n	800136a <_printf_i+0x182>
 800139c:	4616      	mov	r6, r2
 800139e:	e7bb      	b.n	8001318 <_printf_i+0x130>
 80013a0:	680b      	ldr	r3, [r1, #0]
 80013a2:	6826      	ldr	r6, [r4, #0]
 80013a4:	6960      	ldr	r0, [r4, #20]
 80013a6:	1d1d      	adds	r5, r3, #4
 80013a8:	600d      	str	r5, [r1, #0]
 80013aa:	0635      	lsls	r5, r6, #24
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	d501      	bpl.n	80013b4 <_printf_i+0x1cc>
 80013b0:	6018      	str	r0, [r3, #0]
 80013b2:	e002      	b.n	80013ba <_printf_i+0x1d2>
 80013b4:	0671      	lsls	r1, r6, #25
 80013b6:	d5fb      	bpl.n	80013b0 <_printf_i+0x1c8>
 80013b8:	8018      	strh	r0, [r3, #0]
 80013ba:	2300      	movs	r3, #0
 80013bc:	6123      	str	r3, [r4, #16]
 80013be:	4616      	mov	r6, r2
 80013c0:	e7ba      	b.n	8001338 <_printf_i+0x150>
 80013c2:	680b      	ldr	r3, [r1, #0]
 80013c4:	1d1a      	adds	r2, r3, #4
 80013c6:	600a      	str	r2, [r1, #0]
 80013c8:	681e      	ldr	r6, [r3, #0]
 80013ca:	6862      	ldr	r2, [r4, #4]
 80013cc:	2100      	movs	r1, #0
 80013ce:	4630      	mov	r0, r6
 80013d0:	f7fe ff1e 	bl	8000210 <memchr>
 80013d4:	b108      	cbz	r0, 80013da <_printf_i+0x1f2>
 80013d6:	1b80      	subs	r0, r0, r6
 80013d8:	6060      	str	r0, [r4, #4]
 80013da:	6863      	ldr	r3, [r4, #4]
 80013dc:	6123      	str	r3, [r4, #16]
 80013de:	2300      	movs	r3, #0
 80013e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80013e4:	e7a8      	b.n	8001338 <_printf_i+0x150>
 80013e6:	6923      	ldr	r3, [r4, #16]
 80013e8:	4632      	mov	r2, r6
 80013ea:	4649      	mov	r1, r9
 80013ec:	4640      	mov	r0, r8
 80013ee:	47d0      	blx	sl
 80013f0:	3001      	adds	r0, #1
 80013f2:	d0ab      	beq.n	800134c <_printf_i+0x164>
 80013f4:	6823      	ldr	r3, [r4, #0]
 80013f6:	079b      	lsls	r3, r3, #30
 80013f8:	d413      	bmi.n	8001422 <_printf_i+0x23a>
 80013fa:	68e0      	ldr	r0, [r4, #12]
 80013fc:	9b03      	ldr	r3, [sp, #12]
 80013fe:	4298      	cmp	r0, r3
 8001400:	bfb8      	it	lt
 8001402:	4618      	movlt	r0, r3
 8001404:	e7a4      	b.n	8001350 <_printf_i+0x168>
 8001406:	2301      	movs	r3, #1
 8001408:	4632      	mov	r2, r6
 800140a:	4649      	mov	r1, r9
 800140c:	4640      	mov	r0, r8
 800140e:	47d0      	blx	sl
 8001410:	3001      	adds	r0, #1
 8001412:	d09b      	beq.n	800134c <_printf_i+0x164>
 8001414:	3501      	adds	r5, #1
 8001416:	68e3      	ldr	r3, [r4, #12]
 8001418:	9903      	ldr	r1, [sp, #12]
 800141a:	1a5b      	subs	r3, r3, r1
 800141c:	42ab      	cmp	r3, r5
 800141e:	dcf2      	bgt.n	8001406 <_printf_i+0x21e>
 8001420:	e7eb      	b.n	80013fa <_printf_i+0x212>
 8001422:	2500      	movs	r5, #0
 8001424:	f104 0619 	add.w	r6, r4, #25
 8001428:	e7f5      	b.n	8001416 <_printf_i+0x22e>
 800142a:	bf00      	nop
 800142c:	08001779 	.word	0x08001779
 8001430:	0800178a 	.word	0x0800178a

08001434 <_sbrk_r>:
 8001434:	b538      	push	{r3, r4, r5, lr}
 8001436:	4d06      	ldr	r5, [pc, #24]	; (8001450 <_sbrk_r+0x1c>)
 8001438:	2300      	movs	r3, #0
 800143a:	4604      	mov	r4, r0
 800143c:	4608      	mov	r0, r1
 800143e:	602b      	str	r3, [r5, #0]
 8001440:	f7ff f870 	bl	8000524 <_sbrk>
 8001444:	1c43      	adds	r3, r0, #1
 8001446:	d102      	bne.n	800144e <_sbrk_r+0x1a>
 8001448:	682b      	ldr	r3, [r5, #0]
 800144a:	b103      	cbz	r3, 800144e <_sbrk_r+0x1a>
 800144c:	6023      	str	r3, [r4, #0]
 800144e:	bd38      	pop	{r3, r4, r5, pc}
 8001450:	20000098 	.word	0x20000098

08001454 <__sread>:
 8001454:	b510      	push	{r4, lr}
 8001456:	460c      	mov	r4, r1
 8001458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800145c:	f000 f8a0 	bl	80015a0 <_read_r>
 8001460:	2800      	cmp	r0, #0
 8001462:	bfab      	itete	ge
 8001464:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001466:	89a3      	ldrhlt	r3, [r4, #12]
 8001468:	181b      	addge	r3, r3, r0
 800146a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800146e:	bfac      	ite	ge
 8001470:	6563      	strge	r3, [r4, #84]	; 0x54
 8001472:	81a3      	strhlt	r3, [r4, #12]
 8001474:	bd10      	pop	{r4, pc}

08001476 <__swrite>:
 8001476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800147a:	461f      	mov	r7, r3
 800147c:	898b      	ldrh	r3, [r1, #12]
 800147e:	05db      	lsls	r3, r3, #23
 8001480:	4605      	mov	r5, r0
 8001482:	460c      	mov	r4, r1
 8001484:	4616      	mov	r6, r2
 8001486:	d505      	bpl.n	8001494 <__swrite+0x1e>
 8001488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800148c:	2302      	movs	r3, #2
 800148e:	2200      	movs	r2, #0
 8001490:	f000 f868 	bl	8001564 <_lseek_r>
 8001494:	89a3      	ldrh	r3, [r4, #12]
 8001496:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800149a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800149e:	81a3      	strh	r3, [r4, #12]
 80014a0:	4632      	mov	r2, r6
 80014a2:	463b      	mov	r3, r7
 80014a4:	4628      	mov	r0, r5
 80014a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80014aa:	f000 b817 	b.w	80014dc <_write_r>

080014ae <__sseek>:
 80014ae:	b510      	push	{r4, lr}
 80014b0:	460c      	mov	r4, r1
 80014b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014b6:	f000 f855 	bl	8001564 <_lseek_r>
 80014ba:	1c43      	adds	r3, r0, #1
 80014bc:	89a3      	ldrh	r3, [r4, #12]
 80014be:	bf15      	itete	ne
 80014c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80014c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80014c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80014ca:	81a3      	strheq	r3, [r4, #12]
 80014cc:	bf18      	it	ne
 80014ce:	81a3      	strhne	r3, [r4, #12]
 80014d0:	bd10      	pop	{r4, pc}

080014d2 <__sclose>:
 80014d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014d6:	f000 b813 	b.w	8001500 <_close_r>
	...

080014dc <_write_r>:
 80014dc:	b538      	push	{r3, r4, r5, lr}
 80014de:	4d07      	ldr	r5, [pc, #28]	; (80014fc <_write_r+0x20>)
 80014e0:	4604      	mov	r4, r0
 80014e2:	4608      	mov	r0, r1
 80014e4:	4611      	mov	r1, r2
 80014e6:	2200      	movs	r2, #0
 80014e8:	602a      	str	r2, [r5, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	f7fe ffcd 	bl	800048a <_write>
 80014f0:	1c43      	adds	r3, r0, #1
 80014f2:	d102      	bne.n	80014fa <_write_r+0x1e>
 80014f4:	682b      	ldr	r3, [r5, #0]
 80014f6:	b103      	cbz	r3, 80014fa <_write_r+0x1e>
 80014f8:	6023      	str	r3, [r4, #0]
 80014fa:	bd38      	pop	{r3, r4, r5, pc}
 80014fc:	20000098 	.word	0x20000098

08001500 <_close_r>:
 8001500:	b538      	push	{r3, r4, r5, lr}
 8001502:	4d06      	ldr	r5, [pc, #24]	; (800151c <_close_r+0x1c>)
 8001504:	2300      	movs	r3, #0
 8001506:	4604      	mov	r4, r0
 8001508:	4608      	mov	r0, r1
 800150a:	602b      	str	r3, [r5, #0]
 800150c:	f7fe ffd9 	bl	80004c2 <_close>
 8001510:	1c43      	adds	r3, r0, #1
 8001512:	d102      	bne.n	800151a <_close_r+0x1a>
 8001514:	682b      	ldr	r3, [r5, #0]
 8001516:	b103      	cbz	r3, 800151a <_close_r+0x1a>
 8001518:	6023      	str	r3, [r4, #0]
 800151a:	bd38      	pop	{r3, r4, r5, pc}
 800151c:	20000098 	.word	0x20000098

08001520 <_fstat_r>:
 8001520:	b538      	push	{r3, r4, r5, lr}
 8001522:	4d07      	ldr	r5, [pc, #28]	; (8001540 <_fstat_r+0x20>)
 8001524:	2300      	movs	r3, #0
 8001526:	4604      	mov	r4, r0
 8001528:	4608      	mov	r0, r1
 800152a:	4611      	mov	r1, r2
 800152c:	602b      	str	r3, [r5, #0]
 800152e:	f7fe ffd3 	bl	80004d8 <_fstat>
 8001532:	1c43      	adds	r3, r0, #1
 8001534:	d102      	bne.n	800153c <_fstat_r+0x1c>
 8001536:	682b      	ldr	r3, [r5, #0]
 8001538:	b103      	cbz	r3, 800153c <_fstat_r+0x1c>
 800153a:	6023      	str	r3, [r4, #0]
 800153c:	bd38      	pop	{r3, r4, r5, pc}
 800153e:	bf00      	nop
 8001540:	20000098 	.word	0x20000098

08001544 <_isatty_r>:
 8001544:	b538      	push	{r3, r4, r5, lr}
 8001546:	4d06      	ldr	r5, [pc, #24]	; (8001560 <_isatty_r+0x1c>)
 8001548:	2300      	movs	r3, #0
 800154a:	4604      	mov	r4, r0
 800154c:	4608      	mov	r0, r1
 800154e:	602b      	str	r3, [r5, #0]
 8001550:	f7fe ffd1 	bl	80004f6 <_isatty>
 8001554:	1c43      	adds	r3, r0, #1
 8001556:	d102      	bne.n	800155e <_isatty_r+0x1a>
 8001558:	682b      	ldr	r3, [r5, #0]
 800155a:	b103      	cbz	r3, 800155e <_isatty_r+0x1a>
 800155c:	6023      	str	r3, [r4, #0]
 800155e:	bd38      	pop	{r3, r4, r5, pc}
 8001560:	20000098 	.word	0x20000098

08001564 <_lseek_r>:
 8001564:	b538      	push	{r3, r4, r5, lr}
 8001566:	4d07      	ldr	r5, [pc, #28]	; (8001584 <_lseek_r+0x20>)
 8001568:	4604      	mov	r4, r0
 800156a:	4608      	mov	r0, r1
 800156c:	4611      	mov	r1, r2
 800156e:	2200      	movs	r2, #0
 8001570:	602a      	str	r2, [r5, #0]
 8001572:	461a      	mov	r2, r3
 8001574:	f7fe ffc9 	bl	800050a <_lseek>
 8001578:	1c43      	adds	r3, r0, #1
 800157a:	d102      	bne.n	8001582 <_lseek_r+0x1e>
 800157c:	682b      	ldr	r3, [r5, #0]
 800157e:	b103      	cbz	r3, 8001582 <_lseek_r+0x1e>
 8001580:	6023      	str	r3, [r4, #0]
 8001582:	bd38      	pop	{r3, r4, r5, pc}
 8001584:	20000098 	.word	0x20000098

08001588 <__malloc_lock>:
 8001588:	4801      	ldr	r0, [pc, #4]	; (8001590 <__malloc_lock+0x8>)
 800158a:	f7ff bb59 	b.w	8000c40 <__retarget_lock_acquire_recursive>
 800158e:	bf00      	nop
 8001590:	20000090 	.word	0x20000090

08001594 <__malloc_unlock>:
 8001594:	4801      	ldr	r0, [pc, #4]	; (800159c <__malloc_unlock+0x8>)
 8001596:	f7ff bb54 	b.w	8000c42 <__retarget_lock_release_recursive>
 800159a:	bf00      	nop
 800159c:	20000090 	.word	0x20000090

080015a0 <_read_r>:
 80015a0:	b538      	push	{r3, r4, r5, lr}
 80015a2:	4d07      	ldr	r5, [pc, #28]	; (80015c0 <_read_r+0x20>)
 80015a4:	4604      	mov	r4, r0
 80015a6:	4608      	mov	r0, r1
 80015a8:	4611      	mov	r1, r2
 80015aa:	2200      	movs	r2, #0
 80015ac:	602a      	str	r2, [r5, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	f7fe ff4e 	bl	8000450 <_read>
 80015b4:	1c43      	adds	r3, r0, #1
 80015b6:	d102      	bne.n	80015be <_read_r+0x1e>
 80015b8:	682b      	ldr	r3, [r5, #0]
 80015ba:	b103      	cbz	r3, 80015be <_read_r+0x1e>
 80015bc:	6023      	str	r3, [r4, #0]
 80015be:	bd38      	pop	{r3, r4, r5, pc}
 80015c0:	20000098 	.word	0x20000098

080015c4 <_init>:
 80015c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015c6:	bf00      	nop
 80015c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015ca:	bc08      	pop	{r3}
 80015cc:	469e      	mov	lr, r3
 80015ce:	4770      	bx	lr

080015d0 <_fini>:
 80015d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015d2:	bf00      	nop
 80015d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015d6:	bc08      	pop	{r3}
 80015d8:	469e      	mov	lr, r3
 80015da:	4770      	bx	lr
