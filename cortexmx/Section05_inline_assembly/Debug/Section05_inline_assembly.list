
Section05_inline_assembly.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000138  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002fc  08000304  00010304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002fc  080002fc  00010304  2**0
                  CONTENTS
  4 .ARM          00000000  080002fc  080002fc  00010304  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002fc  08000304  00010304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002fc  080002fc  000102fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000300  08000300  00010300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000304  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000304  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010304  2**0
                  CONTENTS, READONLY
 12 .debug_info   000000c5  00000000  00000000  0001032e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000077  00000000  00000000  000103f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  00010470  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  000104b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000a77  00000000  00000000  000104e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000000d5  00000000  00000000  00010f5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00002d80  00000000  00000000  00011034  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00013db4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  00013e30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080002e4 	.word	0x080002e4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080002e4 	.word	0x080002e4

08000204 <main>:
#endif



int main(void)
{
 8000204:	b480      	push	{r7}
 8000206:	b087      	sub	sp, #28
 8000208:	af00      	add	r7, sp, #0
	__asm volatile("LDR R1,=#0x20001000");
 800020a:	490d      	ldr	r1, [pc, #52]	; (8000240 <main+0x3c>)
	__asm volatile("LDR R2,=#0x20001004");
 800020c:	4a0d      	ldr	r2, [pc, #52]	; (8000244 <main+0x40>)
	__asm volatile("LDR R0,[R1]");
 800020e:	6808      	ldr	r0, [r1, #0]
	__asm volatile("LDR R1,[R2]");
 8000210:	6811      	ldr	r1, [r2, #0]
	__asm volatile("ADD R0,R0,R1");
 8000212:	4408      	add	r0, r1
	__asm volatile("STR R0,[R2]");
 8000214:	6010      	str	r0, [r2, #0]

	//MOVE CONTENT OF 'C' VARIABLE 'VAL' TO ARM REGISTER R0
	// __asm volatile("assembly op, operand indexing using %# (%0 is 1st op, %1 is 2nd op)": output op (empty) : constraint string 0-n 'r' is constraint character, val is c variable)
	int val = 50;
 8000216:	2332      	movs	r3, #50	; 0x32
 8000218:	617b      	str	r3, [r7, #20]
	__asm volatile("MOV R0, %0": : "r"(val));
 800021a:	697b      	ldr	r3, [r7, #20]
 800021c:	4618      	mov	r0, r3
	//MSR move from register to special register (write to special reg)
	//CONTROL register is a special register

	int control_reg;
	//read CONTROL register to control_reg
	__asm volatile("MRS %0,CONTROL":"=r"(control_reg)::);
 800021e:	f3ef 8314 	mrs	r3, CONTROL
 8000222:	613b      	str	r3, [r7, #16]
	// "=r" "+r" "&r"
	// = write-only, used for all output operands
	// + read-write operand, must be listed as an output operand
	// & a register that should be used for output only

	int var1 = 10, var2;
 8000224:	230a      	movs	r3, #10
 8000226:	60fb      	str	r3, [r7, #12]

	__asm("MOV %0, %1": "=r"(var2): "r"(var1));
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	461b      	mov	r3, r3
 800022c:	60bb      	str	r3, [r7, #8]
	//         Dst Src       OUTPUT     INPUT

	//copy the contents of a pointer into another variable
	int p1, *p2;
	p2 = (int*)0x20000008;
 800022e:	4b03      	ldr	r3, [pc, #12]	; (800023c <main+0x38>)
 8000230:	607b      	str	r3, [r7, #4]
	__asm volatile("LDR %0,[%1]": "=r"(p1): "r"(p2)); //p1 = *p2
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	603b      	str	r3, [r7, #0]
	//                  Dst Src     OUTPUT    INPUT

	for(;;);
 8000238:	e7fe      	b.n	8000238 <main+0x34>
 800023a:	bf00      	nop
 800023c:	20000008 	.word	0x20000008
 8000240:	20001000 	.word	0x20001000
 8000244:	20001004 	.word	0x20001004

08000248 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000248:	480d      	ldr	r0, [pc, #52]	; (8000280 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800024a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800024c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000250:	480c      	ldr	r0, [pc, #48]	; (8000284 <LoopForever+0x6>)
  ldr r1, =_edata
 8000252:	490d      	ldr	r1, [pc, #52]	; (8000288 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000254:	4a0d      	ldr	r2, [pc, #52]	; (800028c <LoopForever+0xe>)
  movs r3, #0
 8000256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000258:	e002      	b.n	8000260 <LoopCopyDataInit>

0800025a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800025a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800025c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800025e:	3304      	adds	r3, #4

08000260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000264:	d3f9      	bcc.n	800025a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000266:	4a0a      	ldr	r2, [pc, #40]	; (8000290 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000268:	4c0a      	ldr	r4, [pc, #40]	; (8000294 <LoopForever+0x16>)
  movs r3, #0
 800026a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800026c:	e001      	b.n	8000272 <LoopFillZerobss>

0800026e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800026e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000270:	3204      	adds	r2, #4

08000272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000274:	d3fb      	bcc.n	800026e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000276:	f000 f811 	bl	800029c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800027a:	f7ff ffc3 	bl	8000204 <main>

0800027e <LoopForever>:

LoopForever:
    b LoopForever
 800027e:	e7fe      	b.n	800027e <LoopForever>
  ldr   r0, =_estack
 8000280:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000288:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800028c:	08000304 	.word	0x08000304
  ldr r2, =_sbss
 8000290:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000294:	2000001c 	.word	0x2000001c

08000298 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000298:	e7fe      	b.n	8000298 <ADC_IRQHandler>
	...

0800029c <__libc_init_array>:
 800029c:	b570      	push	{r4, r5, r6, lr}
 800029e:	4e0d      	ldr	r6, [pc, #52]	; (80002d4 <__libc_init_array+0x38>)
 80002a0:	4c0d      	ldr	r4, [pc, #52]	; (80002d8 <__libc_init_array+0x3c>)
 80002a2:	1ba4      	subs	r4, r4, r6
 80002a4:	10a4      	asrs	r4, r4, #2
 80002a6:	2500      	movs	r5, #0
 80002a8:	42a5      	cmp	r5, r4
 80002aa:	d109      	bne.n	80002c0 <__libc_init_array+0x24>
 80002ac:	4e0b      	ldr	r6, [pc, #44]	; (80002dc <__libc_init_array+0x40>)
 80002ae:	4c0c      	ldr	r4, [pc, #48]	; (80002e0 <__libc_init_array+0x44>)
 80002b0:	f000 f818 	bl	80002e4 <_init>
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	10a4      	asrs	r4, r4, #2
 80002b8:	2500      	movs	r5, #0
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	d105      	bne.n	80002ca <__libc_init_array+0x2e>
 80002be:	bd70      	pop	{r4, r5, r6, pc}
 80002c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002c4:	4798      	blx	r3
 80002c6:	3501      	adds	r5, #1
 80002c8:	e7ee      	b.n	80002a8 <__libc_init_array+0xc>
 80002ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002ce:	4798      	blx	r3
 80002d0:	3501      	adds	r5, #1
 80002d2:	e7f2      	b.n	80002ba <__libc_init_array+0x1e>
 80002d4:	080002fc 	.word	0x080002fc
 80002d8:	080002fc 	.word	0x080002fc
 80002dc:	080002fc 	.word	0x080002fc
 80002e0:	08000300 	.word	0x08000300

080002e4 <_init>:
 80002e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e6:	bf00      	nop
 80002e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ea:	bc08      	pop	{r3}
 80002ec:	469e      	mov	lr, r3
 80002ee:	4770      	bx	lr

080002f0 <_fini>:
 80002f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002f2:	bf00      	nop
 80002f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002f6:	bc08      	pop	{r3}
 80002f8:	469e      	mov	lr, r3
 80002fa:	4770      	bx	lr
