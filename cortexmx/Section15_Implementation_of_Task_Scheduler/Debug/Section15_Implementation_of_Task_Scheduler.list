
Section15_Implementation_of_Task_Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001120  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080012e4  080012e4  000112e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001390  08001390  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001390  08001390  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001390  08001390  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001390  08001390  00011390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001394  08001394  00011394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000068  08001400  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08001400  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000261f  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000074d  00000000  00000000  000226b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000208  00000000  00000000  00022e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001c0  00000000  00000000  00023008  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002cb5  00000000  00000000  000231c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001930  00000000  00000000  00025e7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000979d  00000000  00000000  000277ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00030f4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c9c  00000000  00000000  00030fc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080012cc 	.word	0x080012cc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	080012cc 	.word	0x080012cc

08000204 <led_init_all>:
  for(uint32_t i = 0 ; i < count ; i++);
}

// RED1 = PB5, GREEN = PB10, RED2 = PB9 , YELLOW = PB8
void led_init_all(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 800020a:	4b19      	ldr	r3, [pc, #100]	; (8000270 <led_init_all+0x6c>)
 800020c:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiobModeReg = (uint32_t*)0x40020400;
 800020e:	4b19      	ldr	r3, [pc, #100]	; (8000274 <led_init_all+0x70>)
 8000210:	603b      	str	r3, [r7, #0]
	 *	LCKR	0x1C
	 *	AFR[2]	0x20-0x24
	 *
	 */

	*pRccAhb1enr |= ( 1 << 1); //GPIOB enable
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f043 0202 	orr.w	r2, r3, #2
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	601a      	str	r2, [r3, #0]

	*pGpiobModeReg |= ( 1 << (2 * LED_RED1));
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	601a      	str	r2, [r3, #0]
	*pGpiobModeReg |= ( 1 << (2 * LED_GREEN));
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	601a      	str	r2, [r3, #0]
	*pGpiobModeReg |= ( 1 << (2 * LED_RED2));
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	601a      	str	r2, [r3, #0]
	*pGpiobModeReg |= ( 1 << (2 * LED_YELLOW));
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_GREEN));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED2));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_YELLOW));
#endif

    led_off(LED_RED1);
 800024e:	2005      	movs	r0, #5
 8000250:	f000 f82a 	bl	80002a8 <led_off>
    led_off(LED_GREEN);
 8000254:	200a      	movs	r0, #10
 8000256:	f000 f827 	bl	80002a8 <led_off>
    led_off(LED_RED2);
 800025a:	2009      	movs	r0, #9
 800025c:	f000 f824 	bl	80002a8 <led_off>
    led_off(LED_YELLOW);
 8000260:	2008      	movs	r0, #8
 8000262:	f000 f821 	bl	80002a8 <led_off>



}
 8000266:	bf00      	nop
 8000268:	3708      	adds	r7, #8
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40023830 	.word	0x40023830
 8000274:	40020400 	.word	0x40020400

08000278 <led_on>:

void led_on(uint8_t led_no)
{
 8000278:	b480      	push	{r7}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiobDataReg = (uint32_t*)0x40020414;
 8000282:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <led_on+0x2c>)
 8000284:	60fb      	str	r3, [r7, #12]
  *pGpiobDataReg |= ( 1 << led_no);
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	79fa      	ldrb	r2, [r7, #7]
 800028c:	2101      	movs	r1, #1
 800028e:	fa01 f202 	lsl.w	r2, r1, r2
 8000292:	431a      	orrs	r2, r3
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	601a      	str	r2, [r3, #0]

}
 8000298:	bf00      	nop
 800029a:	3714      	adds	r7, #20
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40020414 	.word	0x40020414

080002a8 <led_off>:

void led_off(uint8_t led_no)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiobDataReg = (uint32_t*)0x40020414;
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <led_off+0x2c>)
 80002b4:	60fb      	str	r3, [r7, #12]
	  *pGpiobDataReg &= ~( 1 << led_no);
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	79fa      	ldrb	r2, [r7, #7]
 80002bc:	2101      	movs	r1, #1
 80002be:	fa01 f202 	lsl.w	r2, r1, r2
 80002c2:	43d2      	mvns	r2, r2
 80002c4:	401a      	ands	r2, r3
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	601a      	str	r2, [r3, #0]

}
 80002ca:	bf00      	nop
 80002cc:	3714      	adds	r7, #20
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	40020414 	.word	0x40020414

080002d8 <NMI_Handler>:

//v this is shared data/memory area. there could be a chance of race condition between thread mode code and handler mode code.
TCB_t user_tasks[MAX_TASKS]; //global array accessed by bother user_tasks and the exception handlers

void NMI_Handler(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
	//here implement your real logic of handling NMI
}
 80002dc:	bf00      	nop
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr

080002e4 <main>:

int main(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	enable_processor_faults();
 80002e8:	f000 f91c 	bl	8000524 <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 80002ec:	4807      	ldr	r0, [pc, #28]	; (800030c <main+0x28>)
 80002ee:	f000 f887 	bl	8000400 <init_scheduler_stack>

	init_tasks_stack();
 80002f2:	f000 f88b 	bl	800040c <init_tasks_stack>

	led_init_all();
 80002f6:	f7ff ff85 	bl	8000204 <led_init_all>

	init_systick_timer(TICK_HZ);
 80002fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fe:	f000 f84b 	bl	8000398 <init_systick_timer>

	switch_sp_to_psp();
 8000302:	f000 f995 	bl	8000630 <switch_sp_to_psp>

	task1_handler();
 8000306:	f000 f806 	bl	8000316 <task1_handler>

	for(;;);
 800030a:	e7fe      	b.n	800030a <main+0x26>
 800030c:	2001ec00 	.word	0x2001ec00

08000310 <idle_task>:
}

//Tasks never return, they are executing always.
void idle_task(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	while(1);
 8000314:	e7fe      	b.n	8000314 <idle_task+0x4>

08000316 <task1_handler>:
}


void task1_handler(void)
{
 8000316:	b580      	push	{r7, lr}
 8000318:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_RED1);
 800031a:	2005      	movs	r0, #5
 800031c:	f7ff ffac 	bl	8000278 <led_on>
		task_delay(1000);
 8000320:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000324:	f000 f9a4 	bl	8000670 <task_delay>
		led_off(LED_RED1);
 8000328:	2005      	movs	r0, #5
 800032a:	f7ff ffbd 	bl	80002a8 <led_off>
		task_delay(1000);
 800032e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000332:	f000 f99d 	bl	8000670 <task_delay>
		led_on(LED_RED1);
 8000336:	e7f0      	b.n	800031a <task1_handler+0x4>

08000338 <task2_handler>:
	}
}

void task2_handler(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_GREEN);
 800033c:	200a      	movs	r0, #10
 800033e:	f7ff ff9b 	bl	8000278 <led_on>
		task_delay(500);
 8000342:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000346:	f000 f993 	bl	8000670 <task_delay>
		led_off(LED_GREEN);
 800034a:	200a      	movs	r0, #10
 800034c:	f7ff ffac 	bl	80002a8 <led_off>
		task_delay(500);
 8000350:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000354:	f000 f98c 	bl	8000670 <task_delay>
		led_on(LED_GREEN);
 8000358:	e7f0      	b.n	800033c <task2_handler+0x4>

0800035a <task3_handler>:
	}
}

void task3_handler(void)
{
 800035a:	b580      	push	{r7, lr}
 800035c:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_RED2);
 800035e:	2009      	movs	r0, #9
 8000360:	f7ff ff8a 	bl	8000278 <led_on>
		task_delay(250);
 8000364:	20fa      	movs	r0, #250	; 0xfa
 8000366:	f000 f983 	bl	8000670 <task_delay>
		led_off(LED_RED2);
 800036a:	2009      	movs	r0, #9
 800036c:	f7ff ff9c 	bl	80002a8 <led_off>
		task_delay(250);
 8000370:	20fa      	movs	r0, #250	; 0xfa
 8000372:	f000 f97d 	bl	8000670 <task_delay>
		led_on(LED_RED2);
 8000376:	e7f2      	b.n	800035e <task3_handler+0x4>

08000378 <task4_handler>:
	}
}

void task4_handler(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_YELLOW);
 800037c:	2008      	movs	r0, #8
 800037e:	f7ff ff7b 	bl	8000278 <led_on>
		task_delay(125);
 8000382:	207d      	movs	r0, #125	; 0x7d
 8000384:	f000 f974 	bl	8000670 <task_delay>
		led_off(LED_YELLOW);
 8000388:	2008      	movs	r0, #8
 800038a:	f7ff ff8d 	bl	80002a8 <led_off>
		task_delay(125);
 800038e:	207d      	movs	r0, #125	; 0x7d
 8000390:	f000 f96e 	bl	8000670 <task_delay>
		led_on(LED_YELLOW);
 8000394:	e7f2      	b.n	800037c <task4_handler+0x4>
	...

08000398 <init_systick_timer>:
	}
}

void init_systick_timer(uint32_t tick_hz)
{
 8000398:	b480      	push	{r7}
 800039a:	b087      	sub	sp, #28
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80003a0:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <init_systick_timer+0x5c>)
 80003a2:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80003a4:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <init_systick_timer+0x60>)
 80003a6:	613b      	str	r3, [r7, #16]

	//Calculation of reload value
	uint32_t count_value = ((SYSTICK_TIM_CLK / tick_hz) - 1);
 80003a8:	4a14      	ldr	r2, [pc, #80]	; (80003fc <init_systick_timer+0x64>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80003b0:	3b01      	subs	r3, #1
 80003b2:	60fb      	str	r3, [r7, #12]

	//Clear the value of SRVR (systick reload value register)
	*pSRVR &= ~(0x00FFFFFFFF);
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]

	//load the value in to SRVR
	*pSRVR |= count_value;
 80003ba:	697b      	ldr	r3, [r7, #20]
 80003bc:	681a      	ldr	r2, [r3, #0]
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	431a      	orrs	r2, r3
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	601a      	str	r2, [r3, #0]

	//do some settings
	*pSCSR |= (1 << 1); //enables SysTick exception request
 80003c6:	693b      	ldr	r3, [r7, #16]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f043 0202 	orr.w	r2, r3, #2
 80003ce:	693b      	ldr	r3, [r7, #16]
 80003d0:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2); //indicates the clock source (processor clock)
 80003d2:	693b      	ldr	r3, [r7, #16]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f043 0204 	orr.w	r2, r3, #4
 80003da:	693b      	ldr	r3, [r7, #16]
 80003dc:	601a      	str	r2, [r3, #0]

	//enable the systick
	*pSCSR |= (1 << 0); //enables the counter
 80003de:	693b      	ldr	r3, [r7, #16]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f043 0201 	orr.w	r2, r3, #1
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	601a      	str	r2, [r3, #0]
}
 80003ea:	bf00      	nop
 80003ec:	371c      	adds	r7, #28
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr
 80003f4:	e000e014 	.word	0xe000e014
 80003f8:	e000e010 	.word	0xe000e010
 80003fc:	00f42400 	.word	0x00f42400

08000400 <init_scheduler_stack>:

//naked function has no prologue/epilogue sequences
__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 8000400:	4603      	mov	r3, r0
	__asm volatile("MSR MSP, %0": : "r" (sched_top_of_stack) : );
 8000402:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 8000406:	4770      	bx	lr
}
 8000408:	bf00      	nop
	...

0800040c <init_tasks_stack>:

//initialize dummy task stacks
void init_tasks_stack(void)
{
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0
	user_tasks[0].current_state = TASK_READY_STATE;
 8000412:	4b39      	ldr	r3, [pc, #228]	; (80004f8 <init_tasks_stack+0xec>)
 8000414:	2200      	movs	r2, #0
 8000416:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 8000418:	4b37      	ldr	r3, [pc, #220]	; (80004f8 <init_tasks_stack+0xec>)
 800041a:	2200      	movs	r2, #0
 800041c:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 800041e:	4b36      	ldr	r3, [pc, #216]	; (80004f8 <init_tasks_stack+0xec>)
 8000420:	2200      	movs	r2, #0
 8000422:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 8000426:	4b34      	ldr	r3, [pc, #208]	; (80004f8 <init_tasks_stack+0xec>)
 8000428:	2200      	movs	r2, #0
 800042a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	user_tasks[4].current_state = TASK_READY_STATE;
 800042e:	4b32      	ldr	r3, [pc, #200]	; (80004f8 <init_tasks_stack+0xec>)
 8000430:	2200      	movs	r2, #0
 8000432:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	user_tasks[0].psp_value = IDLE_STACK_START;
 8000436:	4b30      	ldr	r3, [pc, #192]	; (80004f8 <init_tasks_stack+0xec>)
 8000438:	4a30      	ldr	r2, [pc, #192]	; (80004fc <init_tasks_stack+0xf0>)
 800043a:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 800043c:	4b2e      	ldr	r3, [pc, #184]	; (80004f8 <init_tasks_stack+0xec>)
 800043e:	4a30      	ldr	r2, [pc, #192]	; (8000500 <init_tasks_stack+0xf4>)
 8000440:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 8000442:	4b2d      	ldr	r3, [pc, #180]	; (80004f8 <init_tasks_stack+0xec>)
 8000444:	4a2f      	ldr	r2, [pc, #188]	; (8000504 <init_tasks_stack+0xf8>)
 8000446:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 8000448:	4b2b      	ldr	r3, [pc, #172]	; (80004f8 <init_tasks_stack+0xec>)
 800044a:	4a2f      	ldr	r2, [pc, #188]	; (8000508 <init_tasks_stack+0xfc>)
 800044c:	631a      	str	r2, [r3, #48]	; 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 800044e:	4b2a      	ldr	r3, [pc, #168]	; (80004f8 <init_tasks_stack+0xec>)
 8000450:	4a2e      	ldr	r2, [pc, #184]	; (800050c <init_tasks_stack+0x100>)
 8000452:	641a      	str	r2, [r3, #64]	; 0x40

	user_tasks[0].task_handler = idle_task;
 8000454:	4b28      	ldr	r3, [pc, #160]	; (80004f8 <init_tasks_stack+0xec>)
 8000456:	4a2e      	ldr	r2, [pc, #184]	; (8000510 <init_tasks_stack+0x104>)
 8000458:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 800045a:	4b27      	ldr	r3, [pc, #156]	; (80004f8 <init_tasks_stack+0xec>)
 800045c:	4a2d      	ldr	r2, [pc, #180]	; (8000514 <init_tasks_stack+0x108>)
 800045e:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 8000460:	4b25      	ldr	r3, [pc, #148]	; (80004f8 <init_tasks_stack+0xec>)
 8000462:	4a2d      	ldr	r2, [pc, #180]	; (8000518 <init_tasks_stack+0x10c>)
 8000464:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task3_handler;
 8000466:	4b24      	ldr	r3, [pc, #144]	; (80004f8 <init_tasks_stack+0xec>)
 8000468:	4a2c      	ldr	r2, [pc, #176]	; (800051c <init_tasks_stack+0x110>)
 800046a:	63da      	str	r2, [r3, #60]	; 0x3c
	user_tasks[4].task_handler = task4_handler;
 800046c:	4b22      	ldr	r3, [pc, #136]	; (80004f8 <init_tasks_stack+0xec>)
 800046e:	4a2c      	ldr	r2, [pc, #176]	; (8000520 <init_tasks_stack+0x114>)
 8000470:	64da      	str	r2, [r3, #76]	; 0x4c

	uint32_t *pPSP;

	for(int i = 0; i < MAX_TASKS; i++)
 8000472:	2300      	movs	r3, #0
 8000474:	60bb      	str	r3, [r7, #8]
 8000476:	e037      	b.n	80004e8 <init_tasks_stack+0xdc>
	{
		//place PSP starting at T[i]_TASK_START
		pPSP = (uint32_t*) user_tasks[i].psp_value;
 8000478:	4a1f      	ldr	r2, [pc, #124]	; (80004f8 <init_tasks_stack+0xec>)
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	011b      	lsls	r3, r3, #4
 800047e:	4413      	add	r3, r2
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	60fb      	str	r3, [r7, #12]

		pPSP--; //xPSR (Start of SF1)
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	3b04      	subs	r3, #4
 8000488:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; //0x01000000
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000490:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	3b04      	subs	r3, #4
 8000496:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t) user_tasks[i].task_handler;
 8000498:	4a17      	ldr	r2, [pc, #92]	; (80004f8 <init_tasks_stack+0xec>)
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	011b      	lsls	r3, r3, #4
 800049e:	4413      	add	r3, r2
 80004a0:	330c      	adds	r3, #12
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	461a      	mov	r2, r3
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	601a      	str	r2, [r3, #0]

		pPSP--; //LR
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	3b04      	subs	r3, #4
 80004ae:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD; //return to thread mode, FPU off, with PSP
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	f06f 0202 	mvn.w	r2, #2
 80004b6:	601a      	str	r2, [r3, #0]

		//allocate memory and initialize to 0 for R0-R13
		for(int j = 0; j < 13; j++)
 80004b8:	2300      	movs	r3, #0
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	e008      	b.n	80004d0 <init_tasks_stack+0xc4>
		{
			pPSP--;
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	3b04      	subs	r3, #4
 80004c2:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < 13; j++)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	3301      	adds	r3, #1
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2b0c      	cmp	r3, #12
 80004d4:	ddf3      	ble.n	80004be <init_tasks_stack+0xb2>
		}

		user_tasks[i].psp_value = (uint32_t)pPSP; //preserve value of PSP
 80004d6:	68fa      	ldr	r2, [r7, #12]
 80004d8:	4907      	ldr	r1, [pc, #28]	; (80004f8 <init_tasks_stack+0xec>)
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	011b      	lsls	r3, r3, #4
 80004de:	440b      	add	r3, r1
 80004e0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_TASKS; i++)
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	3301      	adds	r3, #1
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	2b04      	cmp	r3, #4
 80004ec:	ddc4      	ble.n	8000478 <init_tasks_stack+0x6c>
	}
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr
 80004f8:	20000094 	.word	0x20000094
 80004fc:	2001f000 	.word	0x2001f000
 8000500:	20020000 	.word	0x20020000
 8000504:	2001fc00 	.word	0x2001fc00
 8000508:	2001f800 	.word	0x2001f800
 800050c:	2001f400 	.word	0x2001f400
 8000510:	08000311 	.word	0x08000311
 8000514:	08000317 	.word	0x08000317
 8000518:	08000339 	.word	0x08000339
 800051c:	0800035b 	.word	0x0800035b
 8000520:	08000379 	.word	0x08000379

08000524 <enable_processor_faults>:

void enable_processor_faults(void)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <enable_processor_faults+0x38>)
 800052c:	607b      	str	r3, [r7, #4]

	*pSHCSR |= (1 << 16); //mem manage
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17); //bus fault
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 18); //usage fault (if disabled, divide by zero treated as HardFault)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	601a      	str	r2, [r3, #0]
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	e000ed24 	.word	0xe000ed24

08000560 <get_psp_value>:

uint32_t get_psp_value(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value;
 8000564:	4b04      	ldr	r3, [pc, #16]	; (8000578 <get_psp_value+0x18>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <get_psp_value+0x1c>)
 800056a:	011b      	lsls	r3, r3, #4
 800056c:	4413      	add	r3, r2
 800056e:	681b      	ldr	r3, [r3, #0]
}
 8000570:	4618      	mov	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	20000000 	.word	0x20000000
 800057c:	20000094 	.word	0x20000094

08000580 <save_psp_value>:

void save_psp_value(uint32_t current_psp_value)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <save_psp_value+0x20>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	4a05      	ldr	r2, [pc, #20]	; (80005a4 <save_psp_value+0x24>)
 800058e:	011b      	lsls	r3, r3, #4
 8000590:	4413      	add	r3, r2
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	601a      	str	r2, [r3, #0]
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	20000000 	.word	0x20000000
 80005a4:	20000094 	.word	0x20000094

080005a8 <update_next_task>:

void update_next_task(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKED_STATE;
 80005ae:	23ff      	movs	r3, #255	; 0xff
 80005b0:	607b      	str	r3, [r7, #4]

	for(int i = 0; i < (MAX_TASKS); i++)
 80005b2:	2300      	movs	r3, #0
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	e024      	b.n	8000602 <update_next_task+0x5a>
	{
		current_task++;
 80005b8:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <update_next_task+0x7c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	3301      	adds	r3, #1
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	4b18      	ldr	r3, [pc, #96]	; (8000624 <update_next_task+0x7c>)
 80005c2:	701a      	strb	r2, [r3, #0]
		current_task %= MAX_TASKS;
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <update_next_task+0x7c>)
 80005c6:	781a      	ldrb	r2, [r3, #0]
 80005c8:	4b17      	ldr	r3, [pc, #92]	; (8000628 <update_next_task+0x80>)
 80005ca:	fba3 1302 	umull	r1, r3, r3, r2
 80005ce:	0899      	lsrs	r1, r3, #2
 80005d0:	460b      	mov	r3, r1
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	440b      	add	r3, r1
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4b12      	ldr	r3, [pc, #72]	; (8000624 <update_next_task+0x7c>)
 80005dc:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_task].current_state;
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <update_next_task+0x7c>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	4a12      	ldr	r2, [pc, #72]	; (800062c <update_next_task+0x84>)
 80005e4:	011b      	lsls	r3, r3, #4
 80005e6:	4413      	add	r3, r2
 80005e8:	3308      	adds	r3, #8
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	607b      	str	r3, [r7, #4]
		if((state == TASK_READY_STATE) && (current_task != 0)) //idle task is always ready
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d103      	bne.n	80005fc <update_next_task+0x54>
 80005f4:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <update_next_task+0x7c>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d106      	bne.n	800060a <update_next_task+0x62>
	for(int i = 0; i < (MAX_TASKS); i++)
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	3301      	adds	r3, #1
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	2b04      	cmp	r3, #4
 8000606:	ddd7      	ble.n	80005b8 <update_next_task+0x10>
 8000608:	e000      	b.n	800060c <update_next_task+0x64>
			break;
 800060a:	bf00      	nop
	}

	if(state != TASK_READY_STATE) //all tasks blocked
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d002      	beq.n	8000618 <update_next_task+0x70>
		current_task = 0; //idle task
 8000612:	4b04      	ldr	r3, [pc, #16]	; (8000624 <update_next_task+0x7c>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000000 	.word	0x20000000
 8000628:	cccccccd 	.word	0xcccccccd
 800062c:	20000094 	.word	0x20000094

08000630 <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp(void)
{
	//1. initialize the PSP with TASK1 stack start address
	//get the value of psp of current_task (all of this uses MSP as SP)
	__asm volatile("PUSH {LR}"); //preserve LR which connects back to main() before changing its value when entering get_psp_value() function
 8000630:	b500      	push	{lr}
	__asm volatile("BL get_psp_value"); //BL = branch with link, so we can return to this function while storing PSP in R0
 8000632:	f7ff ff95 	bl	8000560 <get_psp_value>
	__asm volatile("MSR PSP, R0"); //initialize PSP
 8000636:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}"); //retrieve LR that connects back to main()
 800063a:	f85d eb04 	ldr.w	lr, [sp], #4

	//2. change SP to PSP using CONTROL register
	__asm volatile("MOV R0, #0x02");   //SPSEL set to PSP
 800063e:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL, R0");
 8000642:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR"); //return to main()
 8000646:	4770      	bx	lr
}
 8000648:	bf00      	nop
	...

0800064c <schedule>:

void schedule(void)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
	//pend the pendsv exception
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <schedule+0x20>)
 8000654:	607b      	str	r3, [r7, #4]
	*pICSR |= (1 << 28);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	e000ed04 	.word	0xe000ed04

08000670 <task_delay>:

void task_delay(uint32_t tick_count)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	//disable interrupt (avoid race condition)
	INTERRUPT_DISABLE();
 8000678:	f04f 0001 	mov.w	r0, #1
 800067c:	f380 8810 	msr	PRIMASK, r0

	if(current_task)
 8000680:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <task_delay+0x54>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d015      	beq.n	80006b4 <task_delay+0x44>
	{
		//global variable access shared between thread & handler mode code
		user_tasks[current_task].block_count = g_tick_count + tick_count;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <task_delay+0x58>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <task_delay+0x54>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4618      	mov	r0, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	441a      	add	r2, r3
 8000696:	490d      	ldr	r1, [pc, #52]	; (80006cc <task_delay+0x5c>)
 8000698:	0103      	lsls	r3, r0, #4
 800069a:	440b      	add	r3, r1
 800069c:	3304      	adds	r3, #4
 800069e:	601a      	str	r2, [r3, #0]
		user_tasks[current_task].current_state = TASK_BLOCKED_STATE;
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <task_delay+0x54>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	4a09      	ldr	r2, [pc, #36]	; (80006cc <task_delay+0x5c>)
 80006a6:	011b      	lsls	r3, r3, #4
 80006a8:	4413      	add	r3, r2
 80006aa:	3308      	adds	r3, #8
 80006ac:	22ff      	movs	r2, #255	; 0xff
 80006ae:	701a      	strb	r2, [r3, #0]
		schedule();
 80006b0:	f7ff ffcc 	bl	800064c <schedule>
	}

	//enable interrupt (avoid race condition)
	INTERRUPT_ENABLE();
 80006b4:	f04f 0000 	mov.w	r0, #0
 80006b8:	f380 8810 	msr	PRIMASK, r0
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000000 	.word	0x20000000
 80006c8:	20000084 	.word	0x20000084
 80006cc:	20000094 	.word	0x20000094

080006d0 <PendSV_Handler>:
//scheduler to be used for context switching
__attribute__((naked)) void PendSV_Handler(void)
{
	/* Save the context of current task */
	//1. Get current running task's PSP value
	__asm volatile("MRS R0, PSP");
 80006d0:	f3ef 8009 	mrs	r0, PSP

	//2. Using that PSP value store SF2(R4 to R11)
	//cant use PUSH because Handler mode always uses MSP
	__asm volatile("STMDB R0!, {R4-R11}"); //STMDB (store multiple registers, decrement before -- essentially PUSH operation)
 80006d4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("PUSH {LR}");
 80006d8:	b500      	push	{lr}

	//3. Save the current value of PSP
	//R0 already has updated PSP value from previous line, so when BL executes it will be passed into the function save_psp_value()
	__asm volatile("BL save_psp_value");
 80006da:	f7ff ff51 	bl	8000580 <save_psp_value>


	/* Retrieve the context of the next task */
	//1. Decide next task to run
	__asm volatile("BL update_next_task");
 80006de:	f7ff ff63 	bl	80005a8 <update_next_task>

	//2. get its past PSP value
	__asm volatile("BL get_psp_value");
 80006e2:	f7ff ff3d 	bl	8000560 <get_psp_value>

	//3. Using that PSP value retrieve SF2(R4 to R11)
	__asm volatile("LDMIA R0!, {R4-R11}"); //LDMIA (load multiple registers and increment after -- essentially POP operation)
 80006e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//4. update PSP and exit
	__asm volatile("MSR PSP, R0");
 80006ea:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 80006ee:	f85d eb04 	ldr.w	lr, [sp], #4

	//this step is required for naked functions as the compiler wont put prologue and epilogue sequences.
	__asm volatile("BX LR");
 80006f2:	4770      	bx	lr
}
 80006f4:	bf00      	nop
	...

080006f8 <update_global_tick_count>:

void update_global_tick_count(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
	g_tick_count++;
 80006fc:	4b04      	ldr	r3, [pc, #16]	; (8000710 <update_global_tick_count+0x18>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	3301      	adds	r3, #1
 8000702:	4a03      	ldr	r2, [pc, #12]	; (8000710 <update_global_tick_count+0x18>)
 8000704:	6013      	str	r3, [r2, #0]
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	20000084 	.word	0x20000084

08000714 <unblock_tasks>:

void unblock_tasks(void)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
	for(int i = 1; i < MAX_TASKS; i++) //no need to check i=0 because idle task is always running
 800071a:	2301      	movs	r3, #1
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	e01b      	b.n	8000758 <unblock_tasks+0x44>
	{
		if(user_tasks[i].current_state != TASK_READY_STATE)
 8000720:	4a11      	ldr	r2, [pc, #68]	; (8000768 <unblock_tasks+0x54>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	011b      	lsls	r3, r3, #4
 8000726:	4413      	add	r3, r2
 8000728:	3308      	adds	r3, #8
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d010      	beq.n	8000752 <unblock_tasks+0x3e>
		{
			if(user_tasks[i].block_count == g_tick_count)
 8000730:	4a0d      	ldr	r2, [pc, #52]	; (8000768 <unblock_tasks+0x54>)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	011b      	lsls	r3, r3, #4
 8000736:	4413      	add	r3, r2
 8000738:	3304      	adds	r3, #4
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <unblock_tasks+0x58>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	429a      	cmp	r2, r3
 8000742:	d106      	bne.n	8000752 <unblock_tasks+0x3e>
			{
				user_tasks[i].current_state = TASK_READY_STATE;
 8000744:	4a08      	ldr	r2, [pc, #32]	; (8000768 <unblock_tasks+0x54>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	011b      	lsls	r3, r3, #4
 800074a:	4413      	add	r3, r2
 800074c:	3308      	adds	r3, #8
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i < MAX_TASKS; i++) //no need to check i=0 because idle task is always running
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	3301      	adds	r3, #1
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b04      	cmp	r3, #4
 800075c:	dde0      	ble.n	8000720 <unblock_tasks+0xc>
			}
		}
	}
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr
 8000768:	20000094 	.word	0x20000094
 800076c:	20000084 	.word	0x20000084

08000770 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <SysTick_Handler+0x28>)
 8000778:	607b      	str	r3, [r7, #4]

	update_global_tick_count();
 800077a:	f7ff ffbd 	bl	80006f8 <update_global_tick_count>
	unblock_tasks();
 800077e:	f7ff ffc9 	bl	8000714 <unblock_tasks>

	//pend the pendsv exception
	*pICSR |= (1 << 28);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	601a      	str	r2, [r3, #0]

}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	e000ed04 	.word	0xe000ed04

0800079c <HardFault_Handler>:

//implement the fault handlers
void HardFault_Handler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	printf("Exception : HardFault\n");
 80007a0:	4801      	ldr	r0, [pc, #4]	; (80007a8 <HardFault_Handler+0xc>)
 80007a2:	f000 f987 	bl	8000ab4 <puts>
	while(1);
 80007a6:	e7fe      	b.n	80007a6 <HardFault_Handler+0xa>
 80007a8:	080012e4 	.word	0x080012e4

080007ac <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 80007b0:	4801      	ldr	r0, [pc, #4]	; (80007b8 <MemManage_Handler+0xc>)
 80007b2:	f000 f97f 	bl	8000ab4 <puts>
	while(1);
 80007b6:	e7fe      	b.n	80007b6 <MemManage_Handler+0xa>
 80007b8:	080012fc 	.word	0x080012fc

080007bc <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 80007c0:	4801      	ldr	r0, [pc, #4]	; (80007c8 <BusFault_Handler+0xc>)
 80007c2:	f000 f977 	bl	8000ab4 <puts>
	while(1);
 80007c6:	e7fe      	b.n	80007c6 <BusFault_Handler+0xa>
 80007c8:	08001314 	.word	0x08001314

080007cc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <ITM_SendChar+0x44>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a0d      	ldr	r2, [pc, #52]	; (8000810 <ITM_SendChar+0x44>)
 80007dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007e0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <ITM_SendChar+0x48>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a0b      	ldr	r2, [pc, #44]	; (8000814 <ITM_SendChar+0x48>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80007ee:	bf00      	nop
 80007f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d0f8      	beq.n	80007f0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80007fe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	6013      	str	r3, [r2, #0]
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	e000edfc 	.word	0xe000edfc
 8000814:	e0000e00 	.word	0xe0000e00

08000818 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	e00a      	b.n	8000840 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800082a:	f3af 8000 	nop.w
 800082e:	4601      	mov	r1, r0
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	1c5a      	adds	r2, r3, #1
 8000834:	60ba      	str	r2, [r7, #8]
 8000836:	b2ca      	uxtb	r2, r1
 8000838:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	3301      	adds	r3, #1
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697a      	ldr	r2, [r7, #20]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	429a      	cmp	r2, r3
 8000846:	dbf0      	blt.n	800082a <_read+0x12>
	}

return len;
 8000848:	687b      	ldr	r3, [r7, #4]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b086      	sub	sp, #24
 8000856:	af00      	add	r7, sp, #0
 8000858:	60f8      	str	r0, [r7, #12]
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
 8000862:	e009      	b.n	8000878 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	60ba      	str	r2, [r7, #8]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ffad 	bl	80007cc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	3301      	adds	r3, #1
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697a      	ldr	r2, [r7, #20]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	429a      	cmp	r2, r3
 800087e:	dbf1      	blt.n	8000864 <_write+0x12>
	}
	return len;
 8000880:	687b      	ldr	r3, [r7, #4]
}
 8000882:	4618      	mov	r0, r3
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <_close>:

int _close(int file)
{
 800088a:	b480      	push	{r7}
 800088c:	b083      	sub	sp, #12
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
	return -1;
 8000892:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000896:	4618      	mov	r0, r3
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr

080008a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008b0:	605a      	str	r2, [r3, #4]
	return 0;
 80008b2:	2300      	movs	r3, #0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr

080008be <_isatty>:

int _isatty(int file)
{
 80008be:	b480      	push	{r7}
 80008c0:	b083      	sub	sp, #12
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
	return 1;
 80008c6:	2301      	movs	r3, #1
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr

080008d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008d2:	b480      	push	{r7}
 80008d4:	b085      	sub	sp, #20
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	60f8      	str	r0, [r7, #12]
 80008da:	60b9      	str	r1, [r7, #8]
 80008dc:	607a      	str	r2, [r7, #4]
	return 0;
 80008de:	2300      	movs	r3, #0
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr
	...

080008ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <_sbrk+0x50>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d102      	bne.n	8000902 <_sbrk+0x16>
		heap_end = &end;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <_sbrk+0x50>)
 80008fe:	4a10      	ldr	r2, [pc, #64]	; (8000940 <_sbrk+0x54>)
 8000900:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <_sbrk+0x50>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <_sbrk+0x50>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4413      	add	r3, r2
 8000910:	466a      	mov	r2, sp
 8000912:	4293      	cmp	r3, r2
 8000914:	d907      	bls.n	8000926 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000916:	f000 f83f 	bl	8000998 <__errno>
 800091a:	4602      	mov	r2, r0
 800091c:	230c      	movs	r3, #12
 800091e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000920:	f04f 33ff 	mov.w	r3, #4294967295
 8000924:	e006      	b.n	8000934 <_sbrk+0x48>
	}

	heap_end += incr;
 8000926:	4b05      	ldr	r3, [pc, #20]	; (800093c <_sbrk+0x50>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4413      	add	r3, r2
 800092e:	4a03      	ldr	r2, [pc, #12]	; (800093c <_sbrk+0x50>)
 8000930:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000932:	68fb      	ldr	r3, [r7, #12]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000088 	.word	0x20000088
 8000940:	200000e8 	.word	0x200000e8

08000944 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000944:	480d      	ldr	r0, [pc, #52]	; (800097c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000946:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000948:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800094c:	480c      	ldr	r0, [pc, #48]	; (8000980 <LoopForever+0x6>)
  ldr r1, =_edata
 800094e:	490d      	ldr	r1, [pc, #52]	; (8000984 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000950:	4a0d      	ldr	r2, [pc, #52]	; (8000988 <LoopForever+0xe>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000954:	e002      	b.n	800095c <LoopCopyDataInit>

08000956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095a:	3304      	adds	r3, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800095c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000960:	d3f9      	bcc.n	8000956 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000962:	4a0a      	ldr	r2, [pc, #40]	; (800098c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000964:	4c0a      	ldr	r4, [pc, #40]	; (8000990 <LoopForever+0x16>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000968:	e001      	b.n	800096e <LoopFillZerobss>

0800096a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800096c:	3204      	adds	r2, #4

0800096e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000970:	d3fb      	bcc.n	800096a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000972:	f000 f817 	bl	80009a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000976:	f7ff fcb5 	bl	80002e4 <main>

0800097a <LoopForever>:

LoopForever:
    b LoopForever
 800097a:	e7fe      	b.n	800097a <LoopForever>
  ldr   r0, =_estack
 800097c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000984:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000988:	08001398 	.word	0x08001398
  ldr r2, =_sbss
 800098c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000990:	200000e8 	.word	0x200000e8

08000994 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000994:	e7fe      	b.n	8000994 <ADC_IRQHandler>
	...

08000998 <__errno>:
 8000998:	4b01      	ldr	r3, [pc, #4]	; (80009a0 <__errno+0x8>)
 800099a:	6818      	ldr	r0, [r3, #0]
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	20000004 	.word	0x20000004

080009a4 <__libc_init_array>:
 80009a4:	b570      	push	{r4, r5, r6, lr}
 80009a6:	4e0d      	ldr	r6, [pc, #52]	; (80009dc <__libc_init_array+0x38>)
 80009a8:	4c0d      	ldr	r4, [pc, #52]	; (80009e0 <__libc_init_array+0x3c>)
 80009aa:	1ba4      	subs	r4, r4, r6
 80009ac:	10a4      	asrs	r4, r4, #2
 80009ae:	2500      	movs	r5, #0
 80009b0:	42a5      	cmp	r5, r4
 80009b2:	d109      	bne.n	80009c8 <__libc_init_array+0x24>
 80009b4:	4e0b      	ldr	r6, [pc, #44]	; (80009e4 <__libc_init_array+0x40>)
 80009b6:	4c0c      	ldr	r4, [pc, #48]	; (80009e8 <__libc_init_array+0x44>)
 80009b8:	f000 fc88 	bl	80012cc <_init>
 80009bc:	1ba4      	subs	r4, r4, r6
 80009be:	10a4      	asrs	r4, r4, #2
 80009c0:	2500      	movs	r5, #0
 80009c2:	42a5      	cmp	r5, r4
 80009c4:	d105      	bne.n	80009d2 <__libc_init_array+0x2e>
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009cc:	4798      	blx	r3
 80009ce:	3501      	adds	r5, #1
 80009d0:	e7ee      	b.n	80009b0 <__libc_init_array+0xc>
 80009d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009d6:	4798      	blx	r3
 80009d8:	3501      	adds	r5, #1
 80009da:	e7f2      	b.n	80009c2 <__libc_init_array+0x1e>
 80009dc:	08001390 	.word	0x08001390
 80009e0:	08001390 	.word	0x08001390
 80009e4:	08001390 	.word	0x08001390
 80009e8:	08001394 	.word	0x08001394

080009ec <memset>:
 80009ec:	4402      	add	r2, r0
 80009ee:	4603      	mov	r3, r0
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d100      	bne.n	80009f6 <memset+0xa>
 80009f4:	4770      	bx	lr
 80009f6:	f803 1b01 	strb.w	r1, [r3], #1
 80009fa:	e7f9      	b.n	80009f0 <memset+0x4>

080009fc <_puts_r>:
 80009fc:	b570      	push	{r4, r5, r6, lr}
 80009fe:	460e      	mov	r6, r1
 8000a00:	4605      	mov	r5, r0
 8000a02:	b118      	cbz	r0, 8000a0c <_puts_r+0x10>
 8000a04:	6983      	ldr	r3, [r0, #24]
 8000a06:	b90b      	cbnz	r3, 8000a0c <_puts_r+0x10>
 8000a08:	f000 fa0c 	bl	8000e24 <__sinit>
 8000a0c:	69ab      	ldr	r3, [r5, #24]
 8000a0e:	68ac      	ldr	r4, [r5, #8]
 8000a10:	b913      	cbnz	r3, 8000a18 <_puts_r+0x1c>
 8000a12:	4628      	mov	r0, r5
 8000a14:	f000 fa06 	bl	8000e24 <__sinit>
 8000a18:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <_puts_r+0xac>)
 8000a1a:	429c      	cmp	r4, r3
 8000a1c:	d117      	bne.n	8000a4e <_puts_r+0x52>
 8000a1e:	686c      	ldr	r4, [r5, #4]
 8000a20:	89a3      	ldrh	r3, [r4, #12]
 8000a22:	071b      	lsls	r3, r3, #28
 8000a24:	d51d      	bpl.n	8000a62 <_puts_r+0x66>
 8000a26:	6923      	ldr	r3, [r4, #16]
 8000a28:	b1db      	cbz	r3, 8000a62 <_puts_r+0x66>
 8000a2a:	3e01      	subs	r6, #1
 8000a2c:	68a3      	ldr	r3, [r4, #8]
 8000a2e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000a32:	3b01      	subs	r3, #1
 8000a34:	60a3      	str	r3, [r4, #8]
 8000a36:	b9e9      	cbnz	r1, 8000a74 <_puts_r+0x78>
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	da2e      	bge.n	8000a9a <_puts_r+0x9e>
 8000a3c:	4622      	mov	r2, r4
 8000a3e:	210a      	movs	r1, #10
 8000a40:	4628      	mov	r0, r5
 8000a42:	f000 f83f 	bl	8000ac4 <__swbuf_r>
 8000a46:	3001      	adds	r0, #1
 8000a48:	d011      	beq.n	8000a6e <_puts_r+0x72>
 8000a4a:	200a      	movs	r0, #10
 8000a4c:	e011      	b.n	8000a72 <_puts_r+0x76>
 8000a4e:	4b17      	ldr	r3, [pc, #92]	; (8000aac <_puts_r+0xb0>)
 8000a50:	429c      	cmp	r4, r3
 8000a52:	d101      	bne.n	8000a58 <_puts_r+0x5c>
 8000a54:	68ac      	ldr	r4, [r5, #8]
 8000a56:	e7e3      	b.n	8000a20 <_puts_r+0x24>
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <_puts_r+0xb4>)
 8000a5a:	429c      	cmp	r4, r3
 8000a5c:	bf08      	it	eq
 8000a5e:	68ec      	ldreq	r4, [r5, #12]
 8000a60:	e7de      	b.n	8000a20 <_puts_r+0x24>
 8000a62:	4621      	mov	r1, r4
 8000a64:	4628      	mov	r0, r5
 8000a66:	f000 f87f 	bl	8000b68 <__swsetup_r>
 8000a6a:	2800      	cmp	r0, #0
 8000a6c:	d0dd      	beq.n	8000a2a <_puts_r+0x2e>
 8000a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a72:	bd70      	pop	{r4, r5, r6, pc}
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	da04      	bge.n	8000a82 <_puts_r+0x86>
 8000a78:	69a2      	ldr	r2, [r4, #24]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	dc06      	bgt.n	8000a8c <_puts_r+0x90>
 8000a7e:	290a      	cmp	r1, #10
 8000a80:	d004      	beq.n	8000a8c <_puts_r+0x90>
 8000a82:	6823      	ldr	r3, [r4, #0]
 8000a84:	1c5a      	adds	r2, r3, #1
 8000a86:	6022      	str	r2, [r4, #0]
 8000a88:	7019      	strb	r1, [r3, #0]
 8000a8a:	e7cf      	b.n	8000a2c <_puts_r+0x30>
 8000a8c:	4622      	mov	r2, r4
 8000a8e:	4628      	mov	r0, r5
 8000a90:	f000 f818 	bl	8000ac4 <__swbuf_r>
 8000a94:	3001      	adds	r0, #1
 8000a96:	d1c9      	bne.n	8000a2c <_puts_r+0x30>
 8000a98:	e7e9      	b.n	8000a6e <_puts_r+0x72>
 8000a9a:	6823      	ldr	r3, [r4, #0]
 8000a9c:	200a      	movs	r0, #10
 8000a9e:	1c5a      	adds	r2, r3, #1
 8000aa0:	6022      	str	r2, [r4, #0]
 8000aa2:	7018      	strb	r0, [r3, #0]
 8000aa4:	e7e5      	b.n	8000a72 <_puts_r+0x76>
 8000aa6:	bf00      	nop
 8000aa8:	08001350 	.word	0x08001350
 8000aac:	08001370 	.word	0x08001370
 8000ab0:	08001330 	.word	0x08001330

08000ab4 <puts>:
 8000ab4:	4b02      	ldr	r3, [pc, #8]	; (8000ac0 <puts+0xc>)
 8000ab6:	4601      	mov	r1, r0
 8000ab8:	6818      	ldr	r0, [r3, #0]
 8000aba:	f7ff bf9f 	b.w	80009fc <_puts_r>
 8000abe:	bf00      	nop
 8000ac0:	20000004 	.word	0x20000004

08000ac4 <__swbuf_r>:
 8000ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ac6:	460e      	mov	r6, r1
 8000ac8:	4614      	mov	r4, r2
 8000aca:	4605      	mov	r5, r0
 8000acc:	b118      	cbz	r0, 8000ad6 <__swbuf_r+0x12>
 8000ace:	6983      	ldr	r3, [r0, #24]
 8000ad0:	b90b      	cbnz	r3, 8000ad6 <__swbuf_r+0x12>
 8000ad2:	f000 f9a7 	bl	8000e24 <__sinit>
 8000ad6:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <__swbuf_r+0x98>)
 8000ad8:	429c      	cmp	r4, r3
 8000ada:	d12a      	bne.n	8000b32 <__swbuf_r+0x6e>
 8000adc:	686c      	ldr	r4, [r5, #4]
 8000ade:	69a3      	ldr	r3, [r4, #24]
 8000ae0:	60a3      	str	r3, [r4, #8]
 8000ae2:	89a3      	ldrh	r3, [r4, #12]
 8000ae4:	071a      	lsls	r2, r3, #28
 8000ae6:	d52e      	bpl.n	8000b46 <__swbuf_r+0x82>
 8000ae8:	6923      	ldr	r3, [r4, #16]
 8000aea:	b363      	cbz	r3, 8000b46 <__swbuf_r+0x82>
 8000aec:	6923      	ldr	r3, [r4, #16]
 8000aee:	6820      	ldr	r0, [r4, #0]
 8000af0:	1ac0      	subs	r0, r0, r3
 8000af2:	6963      	ldr	r3, [r4, #20]
 8000af4:	b2f6      	uxtb	r6, r6
 8000af6:	4283      	cmp	r3, r0
 8000af8:	4637      	mov	r7, r6
 8000afa:	dc04      	bgt.n	8000b06 <__swbuf_r+0x42>
 8000afc:	4621      	mov	r1, r4
 8000afe:	4628      	mov	r0, r5
 8000b00:	f000 f926 	bl	8000d50 <_fflush_r>
 8000b04:	bb28      	cbnz	r0, 8000b52 <__swbuf_r+0x8e>
 8000b06:	68a3      	ldr	r3, [r4, #8]
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	60a3      	str	r3, [r4, #8]
 8000b0c:	6823      	ldr	r3, [r4, #0]
 8000b0e:	1c5a      	adds	r2, r3, #1
 8000b10:	6022      	str	r2, [r4, #0]
 8000b12:	701e      	strb	r6, [r3, #0]
 8000b14:	6963      	ldr	r3, [r4, #20]
 8000b16:	3001      	adds	r0, #1
 8000b18:	4283      	cmp	r3, r0
 8000b1a:	d004      	beq.n	8000b26 <__swbuf_r+0x62>
 8000b1c:	89a3      	ldrh	r3, [r4, #12]
 8000b1e:	07db      	lsls	r3, r3, #31
 8000b20:	d519      	bpl.n	8000b56 <__swbuf_r+0x92>
 8000b22:	2e0a      	cmp	r6, #10
 8000b24:	d117      	bne.n	8000b56 <__swbuf_r+0x92>
 8000b26:	4621      	mov	r1, r4
 8000b28:	4628      	mov	r0, r5
 8000b2a:	f000 f911 	bl	8000d50 <_fflush_r>
 8000b2e:	b190      	cbz	r0, 8000b56 <__swbuf_r+0x92>
 8000b30:	e00f      	b.n	8000b52 <__swbuf_r+0x8e>
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <__swbuf_r+0x9c>)
 8000b34:	429c      	cmp	r4, r3
 8000b36:	d101      	bne.n	8000b3c <__swbuf_r+0x78>
 8000b38:	68ac      	ldr	r4, [r5, #8]
 8000b3a:	e7d0      	b.n	8000ade <__swbuf_r+0x1a>
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <__swbuf_r+0xa0>)
 8000b3e:	429c      	cmp	r4, r3
 8000b40:	bf08      	it	eq
 8000b42:	68ec      	ldreq	r4, [r5, #12]
 8000b44:	e7cb      	b.n	8000ade <__swbuf_r+0x1a>
 8000b46:	4621      	mov	r1, r4
 8000b48:	4628      	mov	r0, r5
 8000b4a:	f000 f80d 	bl	8000b68 <__swsetup_r>
 8000b4e:	2800      	cmp	r0, #0
 8000b50:	d0cc      	beq.n	8000aec <__swbuf_r+0x28>
 8000b52:	f04f 37ff 	mov.w	r7, #4294967295
 8000b56:	4638      	mov	r0, r7
 8000b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	08001350 	.word	0x08001350
 8000b60:	08001370 	.word	0x08001370
 8000b64:	08001330 	.word	0x08001330

08000b68 <__swsetup_r>:
 8000b68:	4b32      	ldr	r3, [pc, #200]	; (8000c34 <__swsetup_r+0xcc>)
 8000b6a:	b570      	push	{r4, r5, r6, lr}
 8000b6c:	681d      	ldr	r5, [r3, #0]
 8000b6e:	4606      	mov	r6, r0
 8000b70:	460c      	mov	r4, r1
 8000b72:	b125      	cbz	r5, 8000b7e <__swsetup_r+0x16>
 8000b74:	69ab      	ldr	r3, [r5, #24]
 8000b76:	b913      	cbnz	r3, 8000b7e <__swsetup_r+0x16>
 8000b78:	4628      	mov	r0, r5
 8000b7a:	f000 f953 	bl	8000e24 <__sinit>
 8000b7e:	4b2e      	ldr	r3, [pc, #184]	; (8000c38 <__swsetup_r+0xd0>)
 8000b80:	429c      	cmp	r4, r3
 8000b82:	d10f      	bne.n	8000ba4 <__swsetup_r+0x3c>
 8000b84:	686c      	ldr	r4, [r5, #4]
 8000b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	0715      	lsls	r5, r2, #28
 8000b8e:	d42c      	bmi.n	8000bea <__swsetup_r+0x82>
 8000b90:	06d0      	lsls	r0, r2, #27
 8000b92:	d411      	bmi.n	8000bb8 <__swsetup_r+0x50>
 8000b94:	2209      	movs	r2, #9
 8000b96:	6032      	str	r2, [r6, #0]
 8000b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b9c:	81a3      	strh	r3, [r4, #12]
 8000b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba2:	e03e      	b.n	8000c22 <__swsetup_r+0xba>
 8000ba4:	4b25      	ldr	r3, [pc, #148]	; (8000c3c <__swsetup_r+0xd4>)
 8000ba6:	429c      	cmp	r4, r3
 8000ba8:	d101      	bne.n	8000bae <__swsetup_r+0x46>
 8000baa:	68ac      	ldr	r4, [r5, #8]
 8000bac:	e7eb      	b.n	8000b86 <__swsetup_r+0x1e>
 8000bae:	4b24      	ldr	r3, [pc, #144]	; (8000c40 <__swsetup_r+0xd8>)
 8000bb0:	429c      	cmp	r4, r3
 8000bb2:	bf08      	it	eq
 8000bb4:	68ec      	ldreq	r4, [r5, #12]
 8000bb6:	e7e6      	b.n	8000b86 <__swsetup_r+0x1e>
 8000bb8:	0751      	lsls	r1, r2, #29
 8000bba:	d512      	bpl.n	8000be2 <__swsetup_r+0x7a>
 8000bbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000bbe:	b141      	cbz	r1, 8000bd2 <__swsetup_r+0x6a>
 8000bc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000bc4:	4299      	cmp	r1, r3
 8000bc6:	d002      	beq.n	8000bce <__swsetup_r+0x66>
 8000bc8:	4630      	mov	r0, r6
 8000bca:	f000 fa19 	bl	8001000 <_free_r>
 8000bce:	2300      	movs	r3, #0
 8000bd0:	6363      	str	r3, [r4, #52]	; 0x34
 8000bd2:	89a3      	ldrh	r3, [r4, #12]
 8000bd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000bd8:	81a3      	strh	r3, [r4, #12]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	6063      	str	r3, [r4, #4]
 8000bde:	6923      	ldr	r3, [r4, #16]
 8000be0:	6023      	str	r3, [r4, #0]
 8000be2:	89a3      	ldrh	r3, [r4, #12]
 8000be4:	f043 0308 	orr.w	r3, r3, #8
 8000be8:	81a3      	strh	r3, [r4, #12]
 8000bea:	6923      	ldr	r3, [r4, #16]
 8000bec:	b94b      	cbnz	r3, 8000c02 <__swsetup_r+0x9a>
 8000bee:	89a3      	ldrh	r3, [r4, #12]
 8000bf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bf8:	d003      	beq.n	8000c02 <__swsetup_r+0x9a>
 8000bfa:	4621      	mov	r1, r4
 8000bfc:	4630      	mov	r0, r6
 8000bfe:	f000 f9bf 	bl	8000f80 <__smakebuf_r>
 8000c02:	89a2      	ldrh	r2, [r4, #12]
 8000c04:	f012 0301 	ands.w	r3, r2, #1
 8000c08:	d00c      	beq.n	8000c24 <__swsetup_r+0xbc>
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60a3      	str	r3, [r4, #8]
 8000c0e:	6963      	ldr	r3, [r4, #20]
 8000c10:	425b      	negs	r3, r3
 8000c12:	61a3      	str	r3, [r4, #24]
 8000c14:	6923      	ldr	r3, [r4, #16]
 8000c16:	b953      	cbnz	r3, 8000c2e <__swsetup_r+0xc6>
 8000c18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c1c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8000c20:	d1ba      	bne.n	8000b98 <__swsetup_r+0x30>
 8000c22:	bd70      	pop	{r4, r5, r6, pc}
 8000c24:	0792      	lsls	r2, r2, #30
 8000c26:	bf58      	it	pl
 8000c28:	6963      	ldrpl	r3, [r4, #20]
 8000c2a:	60a3      	str	r3, [r4, #8]
 8000c2c:	e7f2      	b.n	8000c14 <__swsetup_r+0xac>
 8000c2e:	2000      	movs	r0, #0
 8000c30:	e7f7      	b.n	8000c22 <__swsetup_r+0xba>
 8000c32:	bf00      	nop
 8000c34:	20000004 	.word	0x20000004
 8000c38:	08001350 	.word	0x08001350
 8000c3c:	08001370 	.word	0x08001370
 8000c40:	08001330 	.word	0x08001330

08000c44 <__sflush_r>:
 8000c44:	898a      	ldrh	r2, [r1, #12]
 8000c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c4a:	4605      	mov	r5, r0
 8000c4c:	0710      	lsls	r0, r2, #28
 8000c4e:	460c      	mov	r4, r1
 8000c50:	d458      	bmi.n	8000d04 <__sflush_r+0xc0>
 8000c52:	684b      	ldr	r3, [r1, #4]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	dc05      	bgt.n	8000c64 <__sflush_r+0x20>
 8000c58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	dc02      	bgt.n	8000c64 <__sflush_r+0x20>
 8000c5e:	2000      	movs	r0, #0
 8000c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d0f9      	beq.n	8000c5e <__sflush_r+0x1a>
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000c70:	682f      	ldr	r7, [r5, #0]
 8000c72:	6a21      	ldr	r1, [r4, #32]
 8000c74:	602b      	str	r3, [r5, #0]
 8000c76:	d032      	beq.n	8000cde <__sflush_r+0x9a>
 8000c78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000c7a:	89a3      	ldrh	r3, [r4, #12]
 8000c7c:	075a      	lsls	r2, r3, #29
 8000c7e:	d505      	bpl.n	8000c8c <__sflush_r+0x48>
 8000c80:	6863      	ldr	r3, [r4, #4]
 8000c82:	1ac0      	subs	r0, r0, r3
 8000c84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c86:	b10b      	cbz	r3, 8000c8c <__sflush_r+0x48>
 8000c88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c8a:	1ac0      	subs	r0, r0, r3
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4602      	mov	r2, r0
 8000c90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c92:	6a21      	ldr	r1, [r4, #32]
 8000c94:	4628      	mov	r0, r5
 8000c96:	47b0      	blx	r6
 8000c98:	1c43      	adds	r3, r0, #1
 8000c9a:	89a3      	ldrh	r3, [r4, #12]
 8000c9c:	d106      	bne.n	8000cac <__sflush_r+0x68>
 8000c9e:	6829      	ldr	r1, [r5, #0]
 8000ca0:	291d      	cmp	r1, #29
 8000ca2:	d848      	bhi.n	8000d36 <__sflush_r+0xf2>
 8000ca4:	4a29      	ldr	r2, [pc, #164]	; (8000d4c <__sflush_r+0x108>)
 8000ca6:	40ca      	lsrs	r2, r1
 8000ca8:	07d6      	lsls	r6, r2, #31
 8000caa:	d544      	bpl.n	8000d36 <__sflush_r+0xf2>
 8000cac:	2200      	movs	r2, #0
 8000cae:	6062      	str	r2, [r4, #4]
 8000cb0:	04d9      	lsls	r1, r3, #19
 8000cb2:	6922      	ldr	r2, [r4, #16]
 8000cb4:	6022      	str	r2, [r4, #0]
 8000cb6:	d504      	bpl.n	8000cc2 <__sflush_r+0x7e>
 8000cb8:	1c42      	adds	r2, r0, #1
 8000cba:	d101      	bne.n	8000cc0 <__sflush_r+0x7c>
 8000cbc:	682b      	ldr	r3, [r5, #0]
 8000cbe:	b903      	cbnz	r3, 8000cc2 <__sflush_r+0x7e>
 8000cc0:	6560      	str	r0, [r4, #84]	; 0x54
 8000cc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000cc4:	602f      	str	r7, [r5, #0]
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d0c9      	beq.n	8000c5e <__sflush_r+0x1a>
 8000cca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	d002      	beq.n	8000cd8 <__sflush_r+0x94>
 8000cd2:	4628      	mov	r0, r5
 8000cd4:	f000 f994 	bl	8001000 <_free_r>
 8000cd8:	2000      	movs	r0, #0
 8000cda:	6360      	str	r0, [r4, #52]	; 0x34
 8000cdc:	e7c0      	b.n	8000c60 <__sflush_r+0x1c>
 8000cde:	2301      	movs	r3, #1
 8000ce0:	4628      	mov	r0, r5
 8000ce2:	47b0      	blx	r6
 8000ce4:	1c41      	adds	r1, r0, #1
 8000ce6:	d1c8      	bne.n	8000c7a <__sflush_r+0x36>
 8000ce8:	682b      	ldr	r3, [r5, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d0c5      	beq.n	8000c7a <__sflush_r+0x36>
 8000cee:	2b1d      	cmp	r3, #29
 8000cf0:	d001      	beq.n	8000cf6 <__sflush_r+0xb2>
 8000cf2:	2b16      	cmp	r3, #22
 8000cf4:	d101      	bne.n	8000cfa <__sflush_r+0xb6>
 8000cf6:	602f      	str	r7, [r5, #0]
 8000cf8:	e7b1      	b.n	8000c5e <__sflush_r+0x1a>
 8000cfa:	89a3      	ldrh	r3, [r4, #12]
 8000cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d00:	81a3      	strh	r3, [r4, #12]
 8000d02:	e7ad      	b.n	8000c60 <__sflush_r+0x1c>
 8000d04:	690f      	ldr	r7, [r1, #16]
 8000d06:	2f00      	cmp	r7, #0
 8000d08:	d0a9      	beq.n	8000c5e <__sflush_r+0x1a>
 8000d0a:	0793      	lsls	r3, r2, #30
 8000d0c:	680e      	ldr	r6, [r1, #0]
 8000d0e:	bf08      	it	eq
 8000d10:	694b      	ldreq	r3, [r1, #20]
 8000d12:	600f      	str	r7, [r1, #0]
 8000d14:	bf18      	it	ne
 8000d16:	2300      	movne	r3, #0
 8000d18:	eba6 0807 	sub.w	r8, r6, r7
 8000d1c:	608b      	str	r3, [r1, #8]
 8000d1e:	f1b8 0f00 	cmp.w	r8, #0
 8000d22:	dd9c      	ble.n	8000c5e <__sflush_r+0x1a>
 8000d24:	4643      	mov	r3, r8
 8000d26:	463a      	mov	r2, r7
 8000d28:	6a21      	ldr	r1, [r4, #32]
 8000d2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000d2c:	4628      	mov	r0, r5
 8000d2e:	47b0      	blx	r6
 8000d30:	2800      	cmp	r0, #0
 8000d32:	dc06      	bgt.n	8000d42 <__sflush_r+0xfe>
 8000d34:	89a3      	ldrh	r3, [r4, #12]
 8000d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d3a:	81a3      	strh	r3, [r4, #12]
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d40:	e78e      	b.n	8000c60 <__sflush_r+0x1c>
 8000d42:	4407      	add	r7, r0
 8000d44:	eba8 0800 	sub.w	r8, r8, r0
 8000d48:	e7e9      	b.n	8000d1e <__sflush_r+0xda>
 8000d4a:	bf00      	nop
 8000d4c:	20400001 	.word	0x20400001

08000d50 <_fflush_r>:
 8000d50:	b538      	push	{r3, r4, r5, lr}
 8000d52:	690b      	ldr	r3, [r1, #16]
 8000d54:	4605      	mov	r5, r0
 8000d56:	460c      	mov	r4, r1
 8000d58:	b1db      	cbz	r3, 8000d92 <_fflush_r+0x42>
 8000d5a:	b118      	cbz	r0, 8000d64 <_fflush_r+0x14>
 8000d5c:	6983      	ldr	r3, [r0, #24]
 8000d5e:	b90b      	cbnz	r3, 8000d64 <_fflush_r+0x14>
 8000d60:	f000 f860 	bl	8000e24 <__sinit>
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <_fflush_r+0x48>)
 8000d66:	429c      	cmp	r4, r3
 8000d68:	d109      	bne.n	8000d7e <_fflush_r+0x2e>
 8000d6a:	686c      	ldr	r4, [r5, #4]
 8000d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d70:	b17b      	cbz	r3, 8000d92 <_fflush_r+0x42>
 8000d72:	4621      	mov	r1, r4
 8000d74:	4628      	mov	r0, r5
 8000d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d7a:	f7ff bf63 	b.w	8000c44 <__sflush_r>
 8000d7e:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <_fflush_r+0x4c>)
 8000d80:	429c      	cmp	r4, r3
 8000d82:	d101      	bne.n	8000d88 <_fflush_r+0x38>
 8000d84:	68ac      	ldr	r4, [r5, #8]
 8000d86:	e7f1      	b.n	8000d6c <_fflush_r+0x1c>
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <_fflush_r+0x50>)
 8000d8a:	429c      	cmp	r4, r3
 8000d8c:	bf08      	it	eq
 8000d8e:	68ec      	ldreq	r4, [r5, #12]
 8000d90:	e7ec      	b.n	8000d6c <_fflush_r+0x1c>
 8000d92:	2000      	movs	r0, #0
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop
 8000d98:	08001350 	.word	0x08001350
 8000d9c:	08001370 	.word	0x08001370
 8000da0:	08001330 	.word	0x08001330

08000da4 <std>:
 8000da4:	2300      	movs	r3, #0
 8000da6:	b510      	push	{r4, lr}
 8000da8:	4604      	mov	r4, r0
 8000daa:	e9c0 3300 	strd	r3, r3, [r0]
 8000dae:	6083      	str	r3, [r0, #8]
 8000db0:	8181      	strh	r1, [r0, #12]
 8000db2:	6643      	str	r3, [r0, #100]	; 0x64
 8000db4:	81c2      	strh	r2, [r0, #14]
 8000db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000dba:	6183      	str	r3, [r0, #24]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	2208      	movs	r2, #8
 8000dc0:	305c      	adds	r0, #92	; 0x5c
 8000dc2:	f7ff fe13 	bl	80009ec <memset>
 8000dc6:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <std+0x38>)
 8000dc8:	6263      	str	r3, [r4, #36]	; 0x24
 8000dca:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <std+0x3c>)
 8000dcc:	62a3      	str	r3, [r4, #40]	; 0x28
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <std+0x40>)
 8000dd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <std+0x44>)
 8000dd4:	6224      	str	r4, [r4, #32]
 8000dd6:	6323      	str	r3, [r4, #48]	; 0x30
 8000dd8:	bd10      	pop	{r4, pc}
 8000dda:	bf00      	nop
 8000ddc:	08001171 	.word	0x08001171
 8000de0:	08001193 	.word	0x08001193
 8000de4:	080011cb 	.word	0x080011cb
 8000de8:	080011ef 	.word	0x080011ef

08000dec <_cleanup_r>:
 8000dec:	4901      	ldr	r1, [pc, #4]	; (8000df4 <_cleanup_r+0x8>)
 8000dee:	f000 b885 	b.w	8000efc <_fwalk_reent>
 8000df2:	bf00      	nop
 8000df4:	08000d51 	.word	0x08000d51

08000df8 <__sfmoreglue>:
 8000df8:	b570      	push	{r4, r5, r6, lr}
 8000dfa:	1e4a      	subs	r2, r1, #1
 8000dfc:	2568      	movs	r5, #104	; 0x68
 8000dfe:	4355      	muls	r5, r2
 8000e00:	460e      	mov	r6, r1
 8000e02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000e06:	f000 f949 	bl	800109c <_malloc_r>
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	b140      	cbz	r0, 8000e20 <__sfmoreglue+0x28>
 8000e0e:	2100      	movs	r1, #0
 8000e10:	e9c0 1600 	strd	r1, r6, [r0]
 8000e14:	300c      	adds	r0, #12
 8000e16:	60a0      	str	r0, [r4, #8]
 8000e18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000e1c:	f7ff fde6 	bl	80009ec <memset>
 8000e20:	4620      	mov	r0, r4
 8000e22:	bd70      	pop	{r4, r5, r6, pc}

08000e24 <__sinit>:
 8000e24:	6983      	ldr	r3, [r0, #24]
 8000e26:	b510      	push	{r4, lr}
 8000e28:	4604      	mov	r4, r0
 8000e2a:	bb33      	cbnz	r3, 8000e7a <__sinit+0x56>
 8000e2c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8000e30:	6503      	str	r3, [r0, #80]	; 0x50
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <__sinit+0x58>)
 8000e34:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <__sinit+0x5c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	6282      	str	r2, [r0, #40]	; 0x28
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	bf04      	itt	eq
 8000e3e:	2301      	moveq	r3, #1
 8000e40:	6183      	streq	r3, [r0, #24]
 8000e42:	f000 f81f 	bl	8000e84 <__sfp>
 8000e46:	6060      	str	r0, [r4, #4]
 8000e48:	4620      	mov	r0, r4
 8000e4a:	f000 f81b 	bl	8000e84 <__sfp>
 8000e4e:	60a0      	str	r0, [r4, #8]
 8000e50:	4620      	mov	r0, r4
 8000e52:	f000 f817 	bl	8000e84 <__sfp>
 8000e56:	2200      	movs	r2, #0
 8000e58:	60e0      	str	r0, [r4, #12]
 8000e5a:	2104      	movs	r1, #4
 8000e5c:	6860      	ldr	r0, [r4, #4]
 8000e5e:	f7ff ffa1 	bl	8000da4 <std>
 8000e62:	2201      	movs	r2, #1
 8000e64:	2109      	movs	r1, #9
 8000e66:	68a0      	ldr	r0, [r4, #8]
 8000e68:	f7ff ff9c 	bl	8000da4 <std>
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	2112      	movs	r1, #18
 8000e70:	68e0      	ldr	r0, [r4, #12]
 8000e72:	f7ff ff97 	bl	8000da4 <std>
 8000e76:	2301      	movs	r3, #1
 8000e78:	61a3      	str	r3, [r4, #24]
 8000e7a:	bd10      	pop	{r4, pc}
 8000e7c:	0800132c 	.word	0x0800132c
 8000e80:	08000ded 	.word	0x08000ded

08000e84 <__sfp>:
 8000e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e86:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <__sfp+0x70>)
 8000e88:	681e      	ldr	r6, [r3, #0]
 8000e8a:	69b3      	ldr	r3, [r6, #24]
 8000e8c:	4607      	mov	r7, r0
 8000e8e:	b913      	cbnz	r3, 8000e96 <__sfp+0x12>
 8000e90:	4630      	mov	r0, r6
 8000e92:	f7ff ffc7 	bl	8000e24 <__sinit>
 8000e96:	3648      	adds	r6, #72	; 0x48
 8000e98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	d503      	bpl.n	8000ea8 <__sfp+0x24>
 8000ea0:	6833      	ldr	r3, [r6, #0]
 8000ea2:	b133      	cbz	r3, 8000eb2 <__sfp+0x2e>
 8000ea4:	6836      	ldr	r6, [r6, #0]
 8000ea6:	e7f7      	b.n	8000e98 <__sfp+0x14>
 8000ea8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000eac:	b16d      	cbz	r5, 8000eca <__sfp+0x46>
 8000eae:	3468      	adds	r4, #104	; 0x68
 8000eb0:	e7f4      	b.n	8000e9c <__sfp+0x18>
 8000eb2:	2104      	movs	r1, #4
 8000eb4:	4638      	mov	r0, r7
 8000eb6:	f7ff ff9f 	bl	8000df8 <__sfmoreglue>
 8000eba:	6030      	str	r0, [r6, #0]
 8000ebc:	2800      	cmp	r0, #0
 8000ebe:	d1f1      	bne.n	8000ea4 <__sfp+0x20>
 8000ec0:	230c      	movs	r3, #12
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	4604      	mov	r4, r0
 8000ec6:	4620      	mov	r0, r4
 8000ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <__sfp+0x74>)
 8000ecc:	6665      	str	r5, [r4, #100]	; 0x64
 8000ece:	e9c4 5500 	strd	r5, r5, [r4]
 8000ed2:	60a5      	str	r5, [r4, #8]
 8000ed4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8000ed8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000edc:	2208      	movs	r2, #8
 8000ede:	4629      	mov	r1, r5
 8000ee0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000ee4:	f7ff fd82 	bl	80009ec <memset>
 8000ee8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000eec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000ef0:	e7e9      	b.n	8000ec6 <__sfp+0x42>
 8000ef2:	bf00      	nop
 8000ef4:	0800132c 	.word	0x0800132c
 8000ef8:	ffff0001 	.word	0xffff0001

08000efc <_fwalk_reent>:
 8000efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f00:	4680      	mov	r8, r0
 8000f02:	4689      	mov	r9, r1
 8000f04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000f08:	2600      	movs	r6, #0
 8000f0a:	b914      	cbnz	r4, 8000f12 <_fwalk_reent+0x16>
 8000f0c:	4630      	mov	r0, r6
 8000f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f12:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8000f16:	3f01      	subs	r7, #1
 8000f18:	d501      	bpl.n	8000f1e <_fwalk_reent+0x22>
 8000f1a:	6824      	ldr	r4, [r4, #0]
 8000f1c:	e7f5      	b.n	8000f0a <_fwalk_reent+0xe>
 8000f1e:	89ab      	ldrh	r3, [r5, #12]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d907      	bls.n	8000f34 <_fwalk_reent+0x38>
 8000f24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	d003      	beq.n	8000f34 <_fwalk_reent+0x38>
 8000f2c:	4629      	mov	r1, r5
 8000f2e:	4640      	mov	r0, r8
 8000f30:	47c8      	blx	r9
 8000f32:	4306      	orrs	r6, r0
 8000f34:	3568      	adds	r5, #104	; 0x68
 8000f36:	e7ee      	b.n	8000f16 <_fwalk_reent+0x1a>

08000f38 <__swhatbuf_r>:
 8000f38:	b570      	push	{r4, r5, r6, lr}
 8000f3a:	460e      	mov	r6, r1
 8000f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f40:	2900      	cmp	r1, #0
 8000f42:	b096      	sub	sp, #88	; 0x58
 8000f44:	4614      	mov	r4, r2
 8000f46:	461d      	mov	r5, r3
 8000f48:	da07      	bge.n	8000f5a <__swhatbuf_r+0x22>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	602b      	str	r3, [r5, #0]
 8000f4e:	89b3      	ldrh	r3, [r6, #12]
 8000f50:	061a      	lsls	r2, r3, #24
 8000f52:	d410      	bmi.n	8000f76 <__swhatbuf_r+0x3e>
 8000f54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f58:	e00e      	b.n	8000f78 <__swhatbuf_r+0x40>
 8000f5a:	466a      	mov	r2, sp
 8000f5c:	f000 f96e 	bl	800123c <_fstat_r>
 8000f60:	2800      	cmp	r0, #0
 8000f62:	dbf2      	blt.n	8000f4a <__swhatbuf_r+0x12>
 8000f64:	9a01      	ldr	r2, [sp, #4]
 8000f66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000f6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000f6e:	425a      	negs	r2, r3
 8000f70:	415a      	adcs	r2, r3
 8000f72:	602a      	str	r2, [r5, #0]
 8000f74:	e7ee      	b.n	8000f54 <__swhatbuf_r+0x1c>
 8000f76:	2340      	movs	r3, #64	; 0x40
 8000f78:	2000      	movs	r0, #0
 8000f7a:	6023      	str	r3, [r4, #0]
 8000f7c:	b016      	add	sp, #88	; 0x58
 8000f7e:	bd70      	pop	{r4, r5, r6, pc}

08000f80 <__smakebuf_r>:
 8000f80:	898b      	ldrh	r3, [r1, #12]
 8000f82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000f84:	079d      	lsls	r5, r3, #30
 8000f86:	4606      	mov	r6, r0
 8000f88:	460c      	mov	r4, r1
 8000f8a:	d507      	bpl.n	8000f9c <__smakebuf_r+0x1c>
 8000f8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000f90:	6023      	str	r3, [r4, #0]
 8000f92:	6123      	str	r3, [r4, #16]
 8000f94:	2301      	movs	r3, #1
 8000f96:	6163      	str	r3, [r4, #20]
 8000f98:	b002      	add	sp, #8
 8000f9a:	bd70      	pop	{r4, r5, r6, pc}
 8000f9c:	ab01      	add	r3, sp, #4
 8000f9e:	466a      	mov	r2, sp
 8000fa0:	f7ff ffca 	bl	8000f38 <__swhatbuf_r>
 8000fa4:	9900      	ldr	r1, [sp, #0]
 8000fa6:	4605      	mov	r5, r0
 8000fa8:	4630      	mov	r0, r6
 8000faa:	f000 f877 	bl	800109c <_malloc_r>
 8000fae:	b948      	cbnz	r0, 8000fc4 <__smakebuf_r+0x44>
 8000fb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000fb4:	059a      	lsls	r2, r3, #22
 8000fb6:	d4ef      	bmi.n	8000f98 <__smakebuf_r+0x18>
 8000fb8:	f023 0303 	bic.w	r3, r3, #3
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	81a3      	strh	r3, [r4, #12]
 8000fc2:	e7e3      	b.n	8000f8c <__smakebuf_r+0xc>
 8000fc4:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <__smakebuf_r+0x7c>)
 8000fc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8000fc8:	89a3      	ldrh	r3, [r4, #12]
 8000fca:	6020      	str	r0, [r4, #0]
 8000fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd0:	81a3      	strh	r3, [r4, #12]
 8000fd2:	9b00      	ldr	r3, [sp, #0]
 8000fd4:	6163      	str	r3, [r4, #20]
 8000fd6:	9b01      	ldr	r3, [sp, #4]
 8000fd8:	6120      	str	r0, [r4, #16]
 8000fda:	b15b      	cbz	r3, 8000ff4 <__smakebuf_r+0x74>
 8000fdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	f000 f93d 	bl	8001260 <_isatty_r>
 8000fe6:	b128      	cbz	r0, 8000ff4 <__smakebuf_r+0x74>
 8000fe8:	89a3      	ldrh	r3, [r4, #12]
 8000fea:	f023 0303 	bic.w	r3, r3, #3
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	81a3      	strh	r3, [r4, #12]
 8000ff4:	89a3      	ldrh	r3, [r4, #12]
 8000ff6:	431d      	orrs	r5, r3
 8000ff8:	81a5      	strh	r5, [r4, #12]
 8000ffa:	e7cd      	b.n	8000f98 <__smakebuf_r+0x18>
 8000ffc:	08000ded 	.word	0x08000ded

08001000 <_free_r>:
 8001000:	b538      	push	{r3, r4, r5, lr}
 8001002:	4605      	mov	r5, r0
 8001004:	2900      	cmp	r1, #0
 8001006:	d045      	beq.n	8001094 <_free_r+0x94>
 8001008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800100c:	1f0c      	subs	r4, r1, #4
 800100e:	2b00      	cmp	r3, #0
 8001010:	bfb8      	it	lt
 8001012:	18e4      	addlt	r4, r4, r3
 8001014:	f000 f946 	bl	80012a4 <__malloc_lock>
 8001018:	4a1f      	ldr	r2, [pc, #124]	; (8001098 <_free_r+0x98>)
 800101a:	6813      	ldr	r3, [r2, #0]
 800101c:	4610      	mov	r0, r2
 800101e:	b933      	cbnz	r3, 800102e <_free_r+0x2e>
 8001020:	6063      	str	r3, [r4, #4]
 8001022:	6014      	str	r4, [r2, #0]
 8001024:	4628      	mov	r0, r5
 8001026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800102a:	f000 b93c 	b.w	80012a6 <__malloc_unlock>
 800102e:	42a3      	cmp	r3, r4
 8001030:	d90c      	bls.n	800104c <_free_r+0x4c>
 8001032:	6821      	ldr	r1, [r4, #0]
 8001034:	1862      	adds	r2, r4, r1
 8001036:	4293      	cmp	r3, r2
 8001038:	bf04      	itt	eq
 800103a:	681a      	ldreq	r2, [r3, #0]
 800103c:	685b      	ldreq	r3, [r3, #4]
 800103e:	6063      	str	r3, [r4, #4]
 8001040:	bf04      	itt	eq
 8001042:	1852      	addeq	r2, r2, r1
 8001044:	6022      	streq	r2, [r4, #0]
 8001046:	6004      	str	r4, [r0, #0]
 8001048:	e7ec      	b.n	8001024 <_free_r+0x24>
 800104a:	4613      	mov	r3, r2
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	b10a      	cbz	r2, 8001054 <_free_r+0x54>
 8001050:	42a2      	cmp	r2, r4
 8001052:	d9fa      	bls.n	800104a <_free_r+0x4a>
 8001054:	6819      	ldr	r1, [r3, #0]
 8001056:	1858      	adds	r0, r3, r1
 8001058:	42a0      	cmp	r0, r4
 800105a:	d10b      	bne.n	8001074 <_free_r+0x74>
 800105c:	6820      	ldr	r0, [r4, #0]
 800105e:	4401      	add	r1, r0
 8001060:	1858      	adds	r0, r3, r1
 8001062:	4282      	cmp	r2, r0
 8001064:	6019      	str	r1, [r3, #0]
 8001066:	d1dd      	bne.n	8001024 <_free_r+0x24>
 8001068:	6810      	ldr	r0, [r2, #0]
 800106a:	6852      	ldr	r2, [r2, #4]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	4401      	add	r1, r0
 8001070:	6019      	str	r1, [r3, #0]
 8001072:	e7d7      	b.n	8001024 <_free_r+0x24>
 8001074:	d902      	bls.n	800107c <_free_r+0x7c>
 8001076:	230c      	movs	r3, #12
 8001078:	602b      	str	r3, [r5, #0]
 800107a:	e7d3      	b.n	8001024 <_free_r+0x24>
 800107c:	6820      	ldr	r0, [r4, #0]
 800107e:	1821      	adds	r1, r4, r0
 8001080:	428a      	cmp	r2, r1
 8001082:	bf04      	itt	eq
 8001084:	6811      	ldreq	r1, [r2, #0]
 8001086:	6852      	ldreq	r2, [r2, #4]
 8001088:	6062      	str	r2, [r4, #4]
 800108a:	bf04      	itt	eq
 800108c:	1809      	addeq	r1, r1, r0
 800108e:	6021      	streq	r1, [r4, #0]
 8001090:	605c      	str	r4, [r3, #4]
 8001092:	e7c7      	b.n	8001024 <_free_r+0x24>
 8001094:	bd38      	pop	{r3, r4, r5, pc}
 8001096:	bf00      	nop
 8001098:	2000008c 	.word	0x2000008c

0800109c <_malloc_r>:
 800109c:	b570      	push	{r4, r5, r6, lr}
 800109e:	1ccd      	adds	r5, r1, #3
 80010a0:	f025 0503 	bic.w	r5, r5, #3
 80010a4:	3508      	adds	r5, #8
 80010a6:	2d0c      	cmp	r5, #12
 80010a8:	bf38      	it	cc
 80010aa:	250c      	movcc	r5, #12
 80010ac:	2d00      	cmp	r5, #0
 80010ae:	4606      	mov	r6, r0
 80010b0:	db01      	blt.n	80010b6 <_malloc_r+0x1a>
 80010b2:	42a9      	cmp	r1, r5
 80010b4:	d903      	bls.n	80010be <_malloc_r+0x22>
 80010b6:	230c      	movs	r3, #12
 80010b8:	6033      	str	r3, [r6, #0]
 80010ba:	2000      	movs	r0, #0
 80010bc:	bd70      	pop	{r4, r5, r6, pc}
 80010be:	f000 f8f1 	bl	80012a4 <__malloc_lock>
 80010c2:	4a21      	ldr	r2, [pc, #132]	; (8001148 <_malloc_r+0xac>)
 80010c4:	6814      	ldr	r4, [r2, #0]
 80010c6:	4621      	mov	r1, r4
 80010c8:	b991      	cbnz	r1, 80010f0 <_malloc_r+0x54>
 80010ca:	4c20      	ldr	r4, [pc, #128]	; (800114c <_malloc_r+0xb0>)
 80010cc:	6823      	ldr	r3, [r4, #0]
 80010ce:	b91b      	cbnz	r3, 80010d8 <_malloc_r+0x3c>
 80010d0:	4630      	mov	r0, r6
 80010d2:	f000 f83d 	bl	8001150 <_sbrk_r>
 80010d6:	6020      	str	r0, [r4, #0]
 80010d8:	4629      	mov	r1, r5
 80010da:	4630      	mov	r0, r6
 80010dc:	f000 f838 	bl	8001150 <_sbrk_r>
 80010e0:	1c43      	adds	r3, r0, #1
 80010e2:	d124      	bne.n	800112e <_malloc_r+0x92>
 80010e4:	230c      	movs	r3, #12
 80010e6:	6033      	str	r3, [r6, #0]
 80010e8:	4630      	mov	r0, r6
 80010ea:	f000 f8dc 	bl	80012a6 <__malloc_unlock>
 80010ee:	e7e4      	b.n	80010ba <_malloc_r+0x1e>
 80010f0:	680b      	ldr	r3, [r1, #0]
 80010f2:	1b5b      	subs	r3, r3, r5
 80010f4:	d418      	bmi.n	8001128 <_malloc_r+0x8c>
 80010f6:	2b0b      	cmp	r3, #11
 80010f8:	d90f      	bls.n	800111a <_malloc_r+0x7e>
 80010fa:	600b      	str	r3, [r1, #0]
 80010fc:	50cd      	str	r5, [r1, r3]
 80010fe:	18cc      	adds	r4, r1, r3
 8001100:	4630      	mov	r0, r6
 8001102:	f000 f8d0 	bl	80012a6 <__malloc_unlock>
 8001106:	f104 000b 	add.w	r0, r4, #11
 800110a:	1d23      	adds	r3, r4, #4
 800110c:	f020 0007 	bic.w	r0, r0, #7
 8001110:	1ac3      	subs	r3, r0, r3
 8001112:	d0d3      	beq.n	80010bc <_malloc_r+0x20>
 8001114:	425a      	negs	r2, r3
 8001116:	50e2      	str	r2, [r4, r3]
 8001118:	e7d0      	b.n	80010bc <_malloc_r+0x20>
 800111a:	428c      	cmp	r4, r1
 800111c:	684b      	ldr	r3, [r1, #4]
 800111e:	bf16      	itet	ne
 8001120:	6063      	strne	r3, [r4, #4]
 8001122:	6013      	streq	r3, [r2, #0]
 8001124:	460c      	movne	r4, r1
 8001126:	e7eb      	b.n	8001100 <_malloc_r+0x64>
 8001128:	460c      	mov	r4, r1
 800112a:	6849      	ldr	r1, [r1, #4]
 800112c:	e7cc      	b.n	80010c8 <_malloc_r+0x2c>
 800112e:	1cc4      	adds	r4, r0, #3
 8001130:	f024 0403 	bic.w	r4, r4, #3
 8001134:	42a0      	cmp	r0, r4
 8001136:	d005      	beq.n	8001144 <_malloc_r+0xa8>
 8001138:	1a21      	subs	r1, r4, r0
 800113a:	4630      	mov	r0, r6
 800113c:	f000 f808 	bl	8001150 <_sbrk_r>
 8001140:	3001      	adds	r0, #1
 8001142:	d0cf      	beq.n	80010e4 <_malloc_r+0x48>
 8001144:	6025      	str	r5, [r4, #0]
 8001146:	e7db      	b.n	8001100 <_malloc_r+0x64>
 8001148:	2000008c 	.word	0x2000008c
 800114c:	20000090 	.word	0x20000090

08001150 <_sbrk_r>:
 8001150:	b538      	push	{r3, r4, r5, lr}
 8001152:	4c06      	ldr	r4, [pc, #24]	; (800116c <_sbrk_r+0x1c>)
 8001154:	2300      	movs	r3, #0
 8001156:	4605      	mov	r5, r0
 8001158:	4608      	mov	r0, r1
 800115a:	6023      	str	r3, [r4, #0]
 800115c:	f7ff fbc6 	bl	80008ec <_sbrk>
 8001160:	1c43      	adds	r3, r0, #1
 8001162:	d102      	bne.n	800116a <_sbrk_r+0x1a>
 8001164:	6823      	ldr	r3, [r4, #0]
 8001166:	b103      	cbz	r3, 800116a <_sbrk_r+0x1a>
 8001168:	602b      	str	r3, [r5, #0]
 800116a:	bd38      	pop	{r3, r4, r5, pc}
 800116c:	200000e4 	.word	0x200000e4

08001170 <__sread>:
 8001170:	b510      	push	{r4, lr}
 8001172:	460c      	mov	r4, r1
 8001174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001178:	f000 f896 	bl	80012a8 <_read_r>
 800117c:	2800      	cmp	r0, #0
 800117e:	bfab      	itete	ge
 8001180:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001182:	89a3      	ldrhlt	r3, [r4, #12]
 8001184:	181b      	addge	r3, r3, r0
 8001186:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800118a:	bfac      	ite	ge
 800118c:	6563      	strge	r3, [r4, #84]	; 0x54
 800118e:	81a3      	strhlt	r3, [r4, #12]
 8001190:	bd10      	pop	{r4, pc}

08001192 <__swrite>:
 8001192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001196:	461f      	mov	r7, r3
 8001198:	898b      	ldrh	r3, [r1, #12]
 800119a:	05db      	lsls	r3, r3, #23
 800119c:	4605      	mov	r5, r0
 800119e:	460c      	mov	r4, r1
 80011a0:	4616      	mov	r6, r2
 80011a2:	d505      	bpl.n	80011b0 <__swrite+0x1e>
 80011a4:	2302      	movs	r3, #2
 80011a6:	2200      	movs	r2, #0
 80011a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011ac:	f000 f868 	bl	8001280 <_lseek_r>
 80011b0:	89a3      	ldrh	r3, [r4, #12]
 80011b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80011b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011ba:	81a3      	strh	r3, [r4, #12]
 80011bc:	4632      	mov	r2, r6
 80011be:	463b      	mov	r3, r7
 80011c0:	4628      	mov	r0, r5
 80011c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011c6:	f000 b817 	b.w	80011f8 <_write_r>

080011ca <__sseek>:
 80011ca:	b510      	push	{r4, lr}
 80011cc:	460c      	mov	r4, r1
 80011ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011d2:	f000 f855 	bl	8001280 <_lseek_r>
 80011d6:	1c43      	adds	r3, r0, #1
 80011d8:	89a3      	ldrh	r3, [r4, #12]
 80011da:	bf15      	itete	ne
 80011dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80011de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80011e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80011e6:	81a3      	strheq	r3, [r4, #12]
 80011e8:	bf18      	it	ne
 80011ea:	81a3      	strhne	r3, [r4, #12]
 80011ec:	bd10      	pop	{r4, pc}

080011ee <__sclose>:
 80011ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011f2:	f000 b813 	b.w	800121c <_close_r>
	...

080011f8 <_write_r>:
 80011f8:	b538      	push	{r3, r4, r5, lr}
 80011fa:	4c07      	ldr	r4, [pc, #28]	; (8001218 <_write_r+0x20>)
 80011fc:	4605      	mov	r5, r0
 80011fe:	4608      	mov	r0, r1
 8001200:	4611      	mov	r1, r2
 8001202:	2200      	movs	r2, #0
 8001204:	6022      	str	r2, [r4, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	f7ff fb23 	bl	8000852 <_write>
 800120c:	1c43      	adds	r3, r0, #1
 800120e:	d102      	bne.n	8001216 <_write_r+0x1e>
 8001210:	6823      	ldr	r3, [r4, #0]
 8001212:	b103      	cbz	r3, 8001216 <_write_r+0x1e>
 8001214:	602b      	str	r3, [r5, #0]
 8001216:	bd38      	pop	{r3, r4, r5, pc}
 8001218:	200000e4 	.word	0x200000e4

0800121c <_close_r>:
 800121c:	b538      	push	{r3, r4, r5, lr}
 800121e:	4c06      	ldr	r4, [pc, #24]	; (8001238 <_close_r+0x1c>)
 8001220:	2300      	movs	r3, #0
 8001222:	4605      	mov	r5, r0
 8001224:	4608      	mov	r0, r1
 8001226:	6023      	str	r3, [r4, #0]
 8001228:	f7ff fb2f 	bl	800088a <_close>
 800122c:	1c43      	adds	r3, r0, #1
 800122e:	d102      	bne.n	8001236 <_close_r+0x1a>
 8001230:	6823      	ldr	r3, [r4, #0]
 8001232:	b103      	cbz	r3, 8001236 <_close_r+0x1a>
 8001234:	602b      	str	r3, [r5, #0]
 8001236:	bd38      	pop	{r3, r4, r5, pc}
 8001238:	200000e4 	.word	0x200000e4

0800123c <_fstat_r>:
 800123c:	b538      	push	{r3, r4, r5, lr}
 800123e:	4c07      	ldr	r4, [pc, #28]	; (800125c <_fstat_r+0x20>)
 8001240:	2300      	movs	r3, #0
 8001242:	4605      	mov	r5, r0
 8001244:	4608      	mov	r0, r1
 8001246:	4611      	mov	r1, r2
 8001248:	6023      	str	r3, [r4, #0]
 800124a:	f7ff fb29 	bl	80008a0 <_fstat>
 800124e:	1c43      	adds	r3, r0, #1
 8001250:	d102      	bne.n	8001258 <_fstat_r+0x1c>
 8001252:	6823      	ldr	r3, [r4, #0]
 8001254:	b103      	cbz	r3, 8001258 <_fstat_r+0x1c>
 8001256:	602b      	str	r3, [r5, #0]
 8001258:	bd38      	pop	{r3, r4, r5, pc}
 800125a:	bf00      	nop
 800125c:	200000e4 	.word	0x200000e4

08001260 <_isatty_r>:
 8001260:	b538      	push	{r3, r4, r5, lr}
 8001262:	4c06      	ldr	r4, [pc, #24]	; (800127c <_isatty_r+0x1c>)
 8001264:	2300      	movs	r3, #0
 8001266:	4605      	mov	r5, r0
 8001268:	4608      	mov	r0, r1
 800126a:	6023      	str	r3, [r4, #0]
 800126c:	f7ff fb27 	bl	80008be <_isatty>
 8001270:	1c43      	adds	r3, r0, #1
 8001272:	d102      	bne.n	800127a <_isatty_r+0x1a>
 8001274:	6823      	ldr	r3, [r4, #0]
 8001276:	b103      	cbz	r3, 800127a <_isatty_r+0x1a>
 8001278:	602b      	str	r3, [r5, #0]
 800127a:	bd38      	pop	{r3, r4, r5, pc}
 800127c:	200000e4 	.word	0x200000e4

08001280 <_lseek_r>:
 8001280:	b538      	push	{r3, r4, r5, lr}
 8001282:	4c07      	ldr	r4, [pc, #28]	; (80012a0 <_lseek_r+0x20>)
 8001284:	4605      	mov	r5, r0
 8001286:	4608      	mov	r0, r1
 8001288:	4611      	mov	r1, r2
 800128a:	2200      	movs	r2, #0
 800128c:	6022      	str	r2, [r4, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	f7ff fb1f 	bl	80008d2 <_lseek>
 8001294:	1c43      	adds	r3, r0, #1
 8001296:	d102      	bne.n	800129e <_lseek_r+0x1e>
 8001298:	6823      	ldr	r3, [r4, #0]
 800129a:	b103      	cbz	r3, 800129e <_lseek_r+0x1e>
 800129c:	602b      	str	r3, [r5, #0]
 800129e:	bd38      	pop	{r3, r4, r5, pc}
 80012a0:	200000e4 	.word	0x200000e4

080012a4 <__malloc_lock>:
 80012a4:	4770      	bx	lr

080012a6 <__malloc_unlock>:
 80012a6:	4770      	bx	lr

080012a8 <_read_r>:
 80012a8:	b538      	push	{r3, r4, r5, lr}
 80012aa:	4c07      	ldr	r4, [pc, #28]	; (80012c8 <_read_r+0x20>)
 80012ac:	4605      	mov	r5, r0
 80012ae:	4608      	mov	r0, r1
 80012b0:	4611      	mov	r1, r2
 80012b2:	2200      	movs	r2, #0
 80012b4:	6022      	str	r2, [r4, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	f7ff faae 	bl	8000818 <_read>
 80012bc:	1c43      	adds	r3, r0, #1
 80012be:	d102      	bne.n	80012c6 <_read_r+0x1e>
 80012c0:	6823      	ldr	r3, [r4, #0]
 80012c2:	b103      	cbz	r3, 80012c6 <_read_r+0x1e>
 80012c4:	602b      	str	r3, [r5, #0]
 80012c6:	bd38      	pop	{r3, r4, r5, pc}
 80012c8:	200000e4 	.word	0x200000e4

080012cc <_init>:
 80012cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ce:	bf00      	nop
 80012d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012d2:	bc08      	pop	{r3}
 80012d4:	469e      	mov	lr, r3
 80012d6:	4770      	bx	lr

080012d8 <_fini>:
 80012d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012da:	bf00      	nop
 80012dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012de:	bc08      	pop	{r3}
 80012e0:	469e      	mov	lr, r3
 80012e2:	4770      	bx	lr
